/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FlowSet } from './FlowSet';
import {
    FlowSetFromJSON,
    FlowSetFromJSONTyped,
    FlowSetToJSON,
} from './FlowSet';

/**
 * InvitationStage Serializer
 * @export
 * @interface InvitationStage
 */
export interface InvitationStage {
    /**
     * 
     * @type {string}
     * @memberof InvitationStage
     */
    readonly pk: string;
    /**
     * 
     * @type {string}
     * @memberof InvitationStage
     */
    name: string;
    /**
     * Get object type so that we know how to edit the object
     * @type {string}
     * @memberof InvitationStage
     */
    readonly component: string;
    /**
     * Return object's verbose_name
     * @type {string}
     * @memberof InvitationStage
     */
    readonly verboseName: string;
    /**
     * Return object's plural verbose_name
     * @type {string}
     * @memberof InvitationStage
     */
    readonly verboseNamePlural: string;
    /**
     * Return internal model name
     * @type {string}
     * @memberof InvitationStage
     */
    readonly metaModelName: string;
    /**
     * 
     * @type {Array<FlowSet>}
     * @memberof InvitationStage
     */
    flowSet?: Array<FlowSet>;
    /**
     * If this flag is set, this Stage will jump to the next Stage when no Invitation is given. By default this Stage will cancel the Flow when no invitation is given.
     * @type {boolean}
     * @memberof InvitationStage
     */
    continueFlowWithoutInvitation?: boolean;
}

/**
 * Check if a given object implements the InvitationStage interface.
 */
export function instanceOfInvitationStage(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "pk" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "component" in value;
    isInstance = isInstance && "verboseName" in value;
    isInstance = isInstance && "verboseNamePlural" in value;
    isInstance = isInstance && "metaModelName" in value;

    return isInstance;
}

export function InvitationStageFromJSON(json: any): InvitationStage {
    return InvitationStageFromJSONTyped(json, false);
}

export function InvitationStageFromJSONTyped(json: any, ignoreDiscriminator: boolean): InvitationStage {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'pk': json['pk'],
        'name': json['name'],
        'component': json['component'],
        'verboseName': json['verbose_name'],
        'verboseNamePlural': json['verbose_name_plural'],
        'metaModelName': json['meta_model_name'],
        'flowSet': !exists(json, 'flow_set') ? undefined : ((json['flow_set'] as Array<any>).map(FlowSetFromJSON)),
        'continueFlowWithoutInvitation': !exists(json, 'continue_flow_without_invitation') ? undefined : json['continue_flow_without_invitation'],
    };
}

export function InvitationStageToJSON(value?: InvitationStage | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'flow_set': value.flowSet === undefined ? undefined : ((value.flowSet as Array<any>).map(FlowSetToJSON)),
        'continue_flow_without_invitation': value.continueFlowWithoutInvitation,
    };
}

