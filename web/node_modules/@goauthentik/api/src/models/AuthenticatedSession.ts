/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AuthenticatedSessionAsn } from './AuthenticatedSessionAsn';
import {
    AuthenticatedSessionAsnFromJSON,
    AuthenticatedSessionAsnFromJSONTyped,
    AuthenticatedSessionAsnToJSON,
} from './AuthenticatedSessionAsn';
import type { AuthenticatedSessionGeoIp } from './AuthenticatedSessionGeoIp';
import {
    AuthenticatedSessionGeoIpFromJSON,
    AuthenticatedSessionGeoIpFromJSONTyped,
    AuthenticatedSessionGeoIpToJSON,
} from './AuthenticatedSessionGeoIp';
import type { AuthenticatedSessionUserAgent } from './AuthenticatedSessionUserAgent';
import {
    AuthenticatedSessionUserAgentFromJSON,
    AuthenticatedSessionUserAgentFromJSONTyped,
    AuthenticatedSessionUserAgentToJSON,
} from './AuthenticatedSessionUserAgent';

/**
 * AuthenticatedSession Serializer
 * @export
 * @interface AuthenticatedSession
 */
export interface AuthenticatedSession {
    /**
     * 
     * @type {string}
     * @memberof AuthenticatedSession
     */
    uuid?: string;
    /**
     * Check if session is currently active session
     * @type {boolean}
     * @memberof AuthenticatedSession
     */
    readonly current: boolean;
    /**
     * 
     * @type {AuthenticatedSessionUserAgent}
     * @memberof AuthenticatedSession
     */
    userAgent: AuthenticatedSessionUserAgent;
    /**
     * 
     * @type {AuthenticatedSessionGeoIp}
     * @memberof AuthenticatedSession
     */
    geoIp: AuthenticatedSessionGeoIp | null;
    /**
     * 
     * @type {AuthenticatedSessionAsn}
     * @memberof AuthenticatedSession
     */
    asn: AuthenticatedSessionAsn | null;
    /**
     * 
     * @type {number}
     * @memberof AuthenticatedSession
     */
    user: number;
    /**
     * 
     * @type {string}
     * @memberof AuthenticatedSession
     */
    lastIp: string;
    /**
     * 
     * @type {string}
     * @memberof AuthenticatedSession
     */
    lastUserAgent?: string;
    /**
     * 
     * @type {Date}
     * @memberof AuthenticatedSession
     */
    readonly lastUsed: Date;
    /**
     * 
     * @type {Date}
     * @memberof AuthenticatedSession
     */
    expires?: Date;
}

/**
 * Check if a given object implements the AuthenticatedSession interface.
 */
export function instanceOfAuthenticatedSession(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "current" in value;
    isInstance = isInstance && "userAgent" in value;
    isInstance = isInstance && "geoIp" in value;
    isInstance = isInstance && "asn" in value;
    isInstance = isInstance && "user" in value;
    isInstance = isInstance && "lastIp" in value;
    isInstance = isInstance && "lastUsed" in value;

    return isInstance;
}

export function AuthenticatedSessionFromJSON(json: any): AuthenticatedSession {
    return AuthenticatedSessionFromJSONTyped(json, false);
}

export function AuthenticatedSessionFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuthenticatedSession {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'uuid': !exists(json, 'uuid') ? undefined : json['uuid'],
        'current': json['current'],
        'userAgent': AuthenticatedSessionUserAgentFromJSON(json['user_agent']),
        'geoIp': AuthenticatedSessionGeoIpFromJSON(json['geo_ip']),
        'asn': AuthenticatedSessionAsnFromJSON(json['asn']),
        'user': json['user'],
        'lastIp': json['last_ip'],
        'lastUserAgent': !exists(json, 'last_user_agent') ? undefined : json['last_user_agent'],
        'lastUsed': (new Date(json['last_used'])),
        'expires': !exists(json, 'expires') ? undefined : (new Date(json['expires'])),
    };
}

export function AuthenticatedSessionToJSON(value?: AuthenticatedSession | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'uuid': value.uuid,
        'user_agent': AuthenticatedSessionUserAgentToJSON(value.userAgent),
        'geo_ip': AuthenticatedSessionGeoIpToJSON(value.geoIp),
        'asn': AuthenticatedSessionAsnToJSON(value.asn),
        'user': value.user,
        'last_ip': value.lastIp,
        'last_user_agent': value.lastUserAgent,
        'expires': value.expires === undefined ? undefined : (value.expires.toISOString()),
    };
}

