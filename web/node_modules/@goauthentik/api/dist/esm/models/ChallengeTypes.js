/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { AccessDeniedChallengeFromJSONTyped, AccessDeniedChallengeToJSON, } from './AccessDeniedChallenge';
import { AppleLoginChallengeFromJSONTyped, AppleLoginChallengeToJSON, } from './AppleLoginChallenge';
import { AuthenticatorDuoChallengeFromJSONTyped, AuthenticatorDuoChallengeToJSON, } from './AuthenticatorDuoChallenge';
import { AuthenticatorSMSChallengeFromJSONTyped, AuthenticatorSMSChallengeToJSON, } from './AuthenticatorSMSChallenge';
import { AuthenticatorStaticChallengeFromJSONTyped, AuthenticatorStaticChallengeToJSON, } from './AuthenticatorStaticChallenge';
import { AuthenticatorTOTPChallengeFromJSONTyped, AuthenticatorTOTPChallengeToJSON, } from './AuthenticatorTOTPChallenge';
import { AuthenticatorValidationChallengeFromJSONTyped, AuthenticatorValidationChallengeToJSON, } from './AuthenticatorValidationChallenge';
import { AuthenticatorWebAuthnChallengeFromJSONTyped, AuthenticatorWebAuthnChallengeToJSON, } from './AuthenticatorWebAuthnChallenge';
import { AutosubmitChallengeFromJSONTyped, AutosubmitChallengeToJSON, } from './AutosubmitChallenge';
import { CaptchaChallengeFromJSONTyped, CaptchaChallengeToJSON, } from './CaptchaChallenge';
import { ConsentChallengeFromJSONTyped, ConsentChallengeToJSON, } from './ConsentChallenge';
import { DummyChallengeFromJSONTyped, DummyChallengeToJSON, } from './DummyChallenge';
import { EmailChallengeFromJSONTyped, EmailChallengeToJSON, } from './EmailChallenge';
import { FlowErrorChallengeFromJSONTyped, FlowErrorChallengeToJSON, } from './FlowErrorChallenge';
import { IdentificationChallengeFromJSONTyped, IdentificationChallengeToJSON, } from './IdentificationChallenge';
import { OAuthDeviceCodeChallengeFromJSONTyped, OAuthDeviceCodeChallengeToJSON, } from './OAuthDeviceCodeChallenge';
import { OAuthDeviceCodeFinishChallengeFromJSONTyped, OAuthDeviceCodeFinishChallengeToJSON, } from './OAuthDeviceCodeFinishChallenge';
import { PasswordChallengeFromJSONTyped, PasswordChallengeToJSON, } from './PasswordChallenge';
import { PlexAuthenticationChallengeFromJSONTyped, PlexAuthenticationChallengeToJSON, } from './PlexAuthenticationChallenge';
import { PromptChallengeFromJSONTyped, PromptChallengeToJSON, } from './PromptChallenge';
import { RedirectChallengeFromJSONTyped, RedirectChallengeToJSON, } from './RedirectChallenge';
import { ShellChallengeFromJSONTyped, ShellChallengeToJSON, } from './ShellChallenge';
import { UserLoginChallengeFromJSONTyped, UserLoginChallengeToJSON, } from './UserLoginChallenge';
export function ChallengeTypesFromJSON(json) {
    return ChallengeTypesFromJSONTyped(json, false);
}
export function ChallengeTypesFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['component']) {
        case 'ak-provider-oauth2-device-code':
            return Object.assign(Object.assign({}, OAuthDeviceCodeChallengeFromJSONTyped(json, true)), { component: 'ak-provider-oauth2-device-code' });
        case 'ak-provider-oauth2-device-code-finish':
            return Object.assign(Object.assign({}, OAuthDeviceCodeFinishChallengeFromJSONTyped(json, true)), { component: 'ak-provider-oauth2-device-code-finish' });
        case 'ak-source-oauth-apple':
            return Object.assign(Object.assign({}, AppleLoginChallengeFromJSONTyped(json, true)), { component: 'ak-source-oauth-apple' });
        case 'ak-source-plex':
            return Object.assign(Object.assign({}, PlexAuthenticationChallengeFromJSONTyped(json, true)), { component: 'ak-source-plex' });
        case 'ak-stage-access-denied':
            return Object.assign(Object.assign({}, AccessDeniedChallengeFromJSONTyped(json, true)), { component: 'ak-stage-access-denied' });
        case 'ak-stage-authenticator-duo':
            return Object.assign(Object.assign({}, AuthenticatorDuoChallengeFromJSONTyped(json, true)), { component: 'ak-stage-authenticator-duo' });
        case 'ak-stage-authenticator-sms':
            return Object.assign(Object.assign({}, AuthenticatorSMSChallengeFromJSONTyped(json, true)), { component: 'ak-stage-authenticator-sms' });
        case 'ak-stage-authenticator-static':
            return Object.assign(Object.assign({}, AuthenticatorStaticChallengeFromJSONTyped(json, true)), { component: 'ak-stage-authenticator-static' });
        case 'ak-stage-authenticator-totp':
            return Object.assign(Object.assign({}, AuthenticatorTOTPChallengeFromJSONTyped(json, true)), { component: 'ak-stage-authenticator-totp' });
        case 'ak-stage-authenticator-validate':
            return Object.assign(Object.assign({}, AuthenticatorValidationChallengeFromJSONTyped(json, true)), { component: 'ak-stage-authenticator-validate' });
        case 'ak-stage-authenticator-webauthn':
            return Object.assign(Object.assign({}, AuthenticatorWebAuthnChallengeFromJSONTyped(json, true)), { component: 'ak-stage-authenticator-webauthn' });
        case 'ak-stage-autosubmit':
            return Object.assign(Object.assign({}, AutosubmitChallengeFromJSONTyped(json, true)), { component: 'ak-stage-autosubmit' });
        case 'ak-stage-captcha':
            return Object.assign(Object.assign({}, CaptchaChallengeFromJSONTyped(json, true)), { component: 'ak-stage-captcha' });
        case 'ak-stage-consent':
            return Object.assign(Object.assign({}, ConsentChallengeFromJSONTyped(json, true)), { component: 'ak-stage-consent' });
        case 'ak-stage-dummy':
            return Object.assign(Object.assign({}, DummyChallengeFromJSONTyped(json, true)), { component: 'ak-stage-dummy' });
        case 'ak-stage-email':
            return Object.assign(Object.assign({}, EmailChallengeFromJSONTyped(json, true)), { component: 'ak-stage-email' });
        case 'ak-stage-flow-error':
            return Object.assign(Object.assign({}, FlowErrorChallengeFromJSONTyped(json, true)), { component: 'ak-stage-flow-error' });
        case 'ak-stage-identification':
            return Object.assign(Object.assign({}, IdentificationChallengeFromJSONTyped(json, true)), { component: 'ak-stage-identification' });
        case 'ak-stage-password':
            return Object.assign(Object.assign({}, PasswordChallengeFromJSONTyped(json, true)), { component: 'ak-stage-password' });
        case 'ak-stage-prompt':
            return Object.assign(Object.assign({}, PromptChallengeFromJSONTyped(json, true)), { component: 'ak-stage-prompt' });
        case 'ak-stage-user-login':
            return Object.assign(Object.assign({}, UserLoginChallengeFromJSONTyped(json, true)), { component: 'ak-stage-user-login' });
        case 'xak-flow-redirect':
            return Object.assign(Object.assign({}, RedirectChallengeFromJSONTyped(json, true)), { component: 'xak-flow-redirect' });
        case 'xak-flow-shell':
            return Object.assign(Object.assign({}, ShellChallengeFromJSONTyped(json, true)), { component: 'xak-flow-shell' });
        default:
            throw new Error(`No variant of ChallengeTypes exists with 'component=${json['component']}'`);
    }
}
export function ChallengeTypesToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['component']) {
        case 'ak-provider-oauth2-device-code':
            return OAuthDeviceCodeChallengeToJSON(value);
        case 'ak-provider-oauth2-device-code-finish':
            return OAuthDeviceCodeFinishChallengeToJSON(value);
        case 'ak-source-oauth-apple':
            return AppleLoginChallengeToJSON(value);
        case 'ak-source-plex':
            return PlexAuthenticationChallengeToJSON(value);
        case 'ak-stage-access-denied':
            return AccessDeniedChallengeToJSON(value);
        case 'ak-stage-authenticator-duo':
            return AuthenticatorDuoChallengeToJSON(value);
        case 'ak-stage-authenticator-sms':
            return AuthenticatorSMSChallengeToJSON(value);
        case 'ak-stage-authenticator-static':
            return AuthenticatorStaticChallengeToJSON(value);
        case 'ak-stage-authenticator-totp':
            return AuthenticatorTOTPChallengeToJSON(value);
        case 'ak-stage-authenticator-validate':
            return AuthenticatorValidationChallengeToJSON(value);
        case 'ak-stage-authenticator-webauthn':
            return AuthenticatorWebAuthnChallengeToJSON(value);
        case 'ak-stage-autosubmit':
            return AutosubmitChallengeToJSON(value);
        case 'ak-stage-captcha':
            return CaptchaChallengeToJSON(value);
        case 'ak-stage-consent':
            return ConsentChallengeToJSON(value);
        case 'ak-stage-dummy':
            return DummyChallengeToJSON(value);
        case 'ak-stage-email':
            return EmailChallengeToJSON(value);
        case 'ak-stage-flow-error':
            return FlowErrorChallengeToJSON(value);
        case 'ak-stage-identification':
            return IdentificationChallengeToJSON(value);
        case 'ak-stage-password':
            return PasswordChallengeToJSON(value);
        case 'ak-stage-prompt':
            return PromptChallengeToJSON(value);
        case 'ak-stage-user-login':
            return UserLoginChallengeToJSON(value);
        case 'xak-flow-redirect':
            return RedirectChallengeToJSON(value);
        case 'xak-flow-shell':
            return ShellChallengeToJSON(value);
        default:
            throw new Error(`No variant of ChallengeTypes exists with 'component=${value['component']}'`);
    }
}
