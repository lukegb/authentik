/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * RACProvider Serializer
 * @export
 * @interface PatchedRACProviderRequest
 */
export interface PatchedRACProviderRequest {
    /**
     * 
     * @type {string}
     * @memberof PatchedRACProviderRequest
     */
    name?: string;
    /**
     * Flow used for authentication when the associated application is accessed by an un-authenticated user.
     * @type {string}
     * @memberof PatchedRACProviderRequest
     */
    authenticationFlow?: string | null;
    /**
     * Flow used when authorizing this provider.
     * @type {string}
     * @memberof PatchedRACProviderRequest
     */
    authorizationFlow?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PatchedRACProviderRequest
     */
    propertyMappings?: Array<string>;
    /**
     * 
     * @type {any}
     * @memberof PatchedRACProviderRequest
     */
    settings?: any | null;
    /**
     * Determines how long a session lasts. Default of 0 means that the sessions lasts until the browser is closed. (Format: hours=-1;minutes=-2;seconds=-3)
     * @type {string}
     * @memberof PatchedRACProviderRequest
     */
    connectionExpiry?: string;
    /**
     * When set to true, connection tokens will be deleted upon disconnect.
     * @type {boolean}
     * @memberof PatchedRACProviderRequest
     */
    deleteTokenOnDisconnect?: boolean;
}

/**
 * Check if a given object implements the PatchedRACProviderRequest interface.
 */
export function instanceOfPatchedRACProviderRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PatchedRACProviderRequestFromJSON(json: any): PatchedRACProviderRequest {
    return PatchedRACProviderRequestFromJSONTyped(json, false);
}

export function PatchedRACProviderRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PatchedRACProviderRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'authenticationFlow': !exists(json, 'authentication_flow') ? undefined : json['authentication_flow'],
        'authorizationFlow': !exists(json, 'authorization_flow') ? undefined : json['authorization_flow'],
        'propertyMappings': !exists(json, 'property_mappings') ? undefined : json['property_mappings'],
        'settings': !exists(json, 'settings') ? undefined : json['settings'],
        'connectionExpiry': !exists(json, 'connection_expiry') ? undefined : json['connection_expiry'],
        'deleteTokenOnDisconnect': !exists(json, 'delete_token_on_disconnect') ? undefined : json['delete_token_on_disconnect'],
    };
}

export function PatchedRACProviderRequestToJSON(value?: PatchedRACProviderRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'authentication_flow': value.authenticationFlow,
        'authorization_flow': value.authorizationFlow,
        'property_mappings': value.propertyMappings,
        'settings': value.settings,
        'connection_expiry': value.connectionExpiry,
        'delete_token_on_disconnect': value.deleteTokenOnDisconnect,
    };
}

