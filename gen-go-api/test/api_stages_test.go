/*
authentik

Testing StagesApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package api

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_api_StagesApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test StagesApiService StagesAllDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		httpRes, err := apiClient.StagesApi.StagesAllDestroy(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesAllList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesApi.StagesAllList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesAllRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesAllRetrieve(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesAllTypesList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesApi.StagesAllTypesList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesAllUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesAllUsedByList(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesAllUserSettingsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesApi.StagesAllUserSettingsList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesAuthenticatorDuoCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesApi.StagesAuthenticatorDuoCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesAuthenticatorDuoDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		httpRes, err := apiClient.StagesApi.StagesAuthenticatorDuoDestroy(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesAuthenticatorDuoEnrollmentStatusCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesAuthenticatorDuoEnrollmentStatusCreate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesAuthenticatorDuoImportDeviceManualCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		httpRes, err := apiClient.StagesApi.StagesAuthenticatorDuoImportDeviceManualCreate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesAuthenticatorDuoImportDevicesAutomaticCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesAuthenticatorDuoImportDevicesAutomaticCreate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesAuthenticatorDuoList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesApi.StagesAuthenticatorDuoList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesAuthenticatorDuoPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesAuthenticatorDuoPartialUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesAuthenticatorDuoRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesAuthenticatorDuoRetrieve(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesAuthenticatorDuoUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesAuthenticatorDuoUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesAuthenticatorDuoUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesAuthenticatorDuoUsedByList(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesAuthenticatorSmsCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesApi.StagesAuthenticatorSmsCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesAuthenticatorSmsDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		httpRes, err := apiClient.StagesApi.StagesAuthenticatorSmsDestroy(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesAuthenticatorSmsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesApi.StagesAuthenticatorSmsList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesAuthenticatorSmsPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesAuthenticatorSmsPartialUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesAuthenticatorSmsRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesAuthenticatorSmsRetrieve(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesAuthenticatorSmsUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesAuthenticatorSmsUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesAuthenticatorSmsUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesAuthenticatorSmsUsedByList(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesAuthenticatorStaticCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesApi.StagesAuthenticatorStaticCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesAuthenticatorStaticDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		httpRes, err := apiClient.StagesApi.StagesAuthenticatorStaticDestroy(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesAuthenticatorStaticList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesApi.StagesAuthenticatorStaticList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesAuthenticatorStaticPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesAuthenticatorStaticPartialUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesAuthenticatorStaticRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesAuthenticatorStaticRetrieve(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesAuthenticatorStaticUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesAuthenticatorStaticUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesAuthenticatorStaticUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesAuthenticatorStaticUsedByList(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesAuthenticatorTotpCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesApi.StagesAuthenticatorTotpCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesAuthenticatorTotpDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		httpRes, err := apiClient.StagesApi.StagesAuthenticatorTotpDestroy(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesAuthenticatorTotpList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesApi.StagesAuthenticatorTotpList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesAuthenticatorTotpPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesAuthenticatorTotpPartialUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesAuthenticatorTotpRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesAuthenticatorTotpRetrieve(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesAuthenticatorTotpUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesAuthenticatorTotpUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesAuthenticatorTotpUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesAuthenticatorTotpUsedByList(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesAuthenticatorValidateCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesApi.StagesAuthenticatorValidateCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesAuthenticatorValidateDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		httpRes, err := apiClient.StagesApi.StagesAuthenticatorValidateDestroy(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesAuthenticatorValidateList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesApi.StagesAuthenticatorValidateList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesAuthenticatorValidatePartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesAuthenticatorValidatePartialUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesAuthenticatorValidateRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesAuthenticatorValidateRetrieve(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesAuthenticatorValidateUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesAuthenticatorValidateUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesAuthenticatorValidateUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesAuthenticatorValidateUsedByList(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesAuthenticatorWebauthnCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesApi.StagesAuthenticatorWebauthnCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesAuthenticatorWebauthnDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		httpRes, err := apiClient.StagesApi.StagesAuthenticatorWebauthnDestroy(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesAuthenticatorWebauthnList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesApi.StagesAuthenticatorWebauthnList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesAuthenticatorWebauthnPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesAuthenticatorWebauthnPartialUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesAuthenticatorWebauthnRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesAuthenticatorWebauthnRetrieve(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesAuthenticatorWebauthnUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesAuthenticatorWebauthnUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesAuthenticatorWebauthnUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesAuthenticatorWebauthnUsedByList(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesCaptchaCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesApi.StagesCaptchaCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesCaptchaDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		httpRes, err := apiClient.StagesApi.StagesCaptchaDestroy(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesCaptchaList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesApi.StagesCaptchaList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesCaptchaPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesCaptchaPartialUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesCaptchaRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesCaptchaRetrieve(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesCaptchaUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesCaptchaUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesCaptchaUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesCaptchaUsedByList(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesConsentCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesApi.StagesConsentCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesConsentDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		httpRes, err := apiClient.StagesApi.StagesConsentDestroy(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesConsentList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesApi.StagesConsentList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesConsentPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesConsentPartialUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesConsentRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesConsentRetrieve(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesConsentUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesConsentUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesConsentUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesConsentUsedByList(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesDenyCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesApi.StagesDenyCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesDenyDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		httpRes, err := apiClient.StagesApi.StagesDenyDestroy(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesDenyList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesApi.StagesDenyList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesDenyPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesDenyPartialUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesDenyRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesDenyRetrieve(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesDenyUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesDenyUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesDenyUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesDenyUsedByList(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesDummyCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesApi.StagesDummyCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesDummyDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		httpRes, err := apiClient.StagesApi.StagesDummyDestroy(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesDummyList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesApi.StagesDummyList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesDummyPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesDummyPartialUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesDummyRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesDummyRetrieve(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesDummyUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesDummyUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesDummyUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesDummyUsedByList(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesEmailCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesApi.StagesEmailCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesEmailDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		httpRes, err := apiClient.StagesApi.StagesEmailDestroy(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesEmailList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesApi.StagesEmailList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesEmailPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesEmailPartialUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesEmailRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesEmailRetrieve(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesEmailTemplatesList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesApi.StagesEmailTemplatesList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesEmailUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesEmailUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesEmailUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesEmailUsedByList(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesExtAuthCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesApi.StagesExtAuthCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesExtAuthDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		httpRes, err := apiClient.StagesApi.StagesExtAuthDestroy(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesExtAuthList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesApi.StagesExtAuthList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesExtAuthPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesExtAuthPartialUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesExtAuthRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesExtAuthRetrieve(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesExtAuthUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesExtAuthUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesExtAuthUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesExtAuthUsedByList(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesIdentificationCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesApi.StagesIdentificationCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesIdentificationDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		httpRes, err := apiClient.StagesApi.StagesIdentificationDestroy(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesIdentificationList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesApi.StagesIdentificationList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesIdentificationPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesIdentificationPartialUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesIdentificationRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesIdentificationRetrieve(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesIdentificationUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesIdentificationUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesIdentificationUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesIdentificationUsedByList(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesInvitationInvitationsCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesApi.StagesInvitationInvitationsCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesInvitationInvitationsDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var inviteUuid string

		httpRes, err := apiClient.StagesApi.StagesInvitationInvitationsDestroy(context.Background(), inviteUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesInvitationInvitationsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesApi.StagesInvitationInvitationsList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesInvitationInvitationsPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var inviteUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesInvitationInvitationsPartialUpdate(context.Background(), inviteUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesInvitationInvitationsRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var inviteUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesInvitationInvitationsRetrieve(context.Background(), inviteUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesInvitationInvitationsUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var inviteUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesInvitationInvitationsUpdate(context.Background(), inviteUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesInvitationInvitationsUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var inviteUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesInvitationInvitationsUsedByList(context.Background(), inviteUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesInvitationStagesCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesApi.StagesInvitationStagesCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesInvitationStagesDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		httpRes, err := apiClient.StagesApi.StagesInvitationStagesDestroy(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesInvitationStagesList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesApi.StagesInvitationStagesList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesInvitationStagesPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesInvitationStagesPartialUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesInvitationStagesRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesInvitationStagesRetrieve(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesInvitationStagesUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesInvitationStagesUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesInvitationStagesUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesInvitationStagesUsedByList(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesPasswordCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesApi.StagesPasswordCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesPasswordDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		httpRes, err := apiClient.StagesApi.StagesPasswordDestroy(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesPasswordList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesApi.StagesPasswordList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesPasswordPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesPasswordPartialUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesPasswordRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesPasswordRetrieve(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesPasswordUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesPasswordUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesPasswordUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesPasswordUsedByList(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesPromptPromptsCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesApi.StagesPromptPromptsCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesPromptPromptsDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var promptUuid string

		httpRes, err := apiClient.StagesApi.StagesPromptPromptsDestroy(context.Background(), promptUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesPromptPromptsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesApi.StagesPromptPromptsList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesPromptPromptsPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var promptUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesPromptPromptsPartialUpdate(context.Background(), promptUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesPromptPromptsPreviewCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesApi.StagesPromptPromptsPreviewCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesPromptPromptsRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var promptUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesPromptPromptsRetrieve(context.Background(), promptUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesPromptPromptsUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var promptUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesPromptPromptsUpdate(context.Background(), promptUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesPromptPromptsUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var promptUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesPromptPromptsUsedByList(context.Background(), promptUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesPromptStagesCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesApi.StagesPromptStagesCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesPromptStagesDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		httpRes, err := apiClient.StagesApi.StagesPromptStagesDestroy(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesPromptStagesList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesApi.StagesPromptStagesList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesPromptStagesPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesPromptStagesPartialUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesPromptStagesRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesPromptStagesRetrieve(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesPromptStagesUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesPromptStagesUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesPromptStagesUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesPromptStagesUsedByList(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesUserDeleteCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesApi.StagesUserDeleteCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesUserDeleteDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		httpRes, err := apiClient.StagesApi.StagesUserDeleteDestroy(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesUserDeleteList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesApi.StagesUserDeleteList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesUserDeletePartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesUserDeletePartialUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesUserDeleteRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesUserDeleteRetrieve(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesUserDeleteUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesUserDeleteUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesUserDeleteUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesUserDeleteUsedByList(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesUserLoginCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesApi.StagesUserLoginCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesUserLoginDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		httpRes, err := apiClient.StagesApi.StagesUserLoginDestroy(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesUserLoginList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesApi.StagesUserLoginList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesUserLoginPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesUserLoginPartialUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesUserLoginRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesUserLoginRetrieve(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesUserLoginUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesUserLoginUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesUserLoginUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesUserLoginUsedByList(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesUserLogoutCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesApi.StagesUserLogoutCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesUserLogoutDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		httpRes, err := apiClient.StagesApi.StagesUserLogoutDestroy(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesUserLogoutList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesApi.StagesUserLogoutList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesUserLogoutPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesUserLogoutPartialUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesUserLogoutRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesUserLogoutRetrieve(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesUserLogoutUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesUserLogoutUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesUserLogoutUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesUserLogoutUsedByList(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesUserWriteCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesApi.StagesUserWriteCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesUserWriteDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		httpRes, err := apiClient.StagesApi.StagesUserWriteDestroy(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesUserWriteList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.StagesApi.StagesUserWriteList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesUserWritePartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesUserWritePartialUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesUserWriteRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesUserWriteRetrieve(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesUserWriteUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesUserWriteUpdate(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test StagesApiService StagesUserWriteUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var stageUuid string

		resp, httpRes, err := apiClient.StagesApi.StagesUserWriteUsedByList(context.Background(), stageUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
