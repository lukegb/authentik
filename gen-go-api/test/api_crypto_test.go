/*
authentik

Testing CryptoApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package api

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_api_CryptoApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test CryptoApiService CryptoCertificatekeypairsCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CryptoApi.CryptoCertificatekeypairsCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CryptoApiService CryptoCertificatekeypairsDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var kpUuid string

		httpRes, err := apiClient.CryptoApi.CryptoCertificatekeypairsDestroy(context.Background(), kpUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CryptoApiService CryptoCertificatekeypairsGenerateCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CryptoApi.CryptoCertificatekeypairsGenerateCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CryptoApiService CryptoCertificatekeypairsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.CryptoApi.CryptoCertificatekeypairsList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CryptoApiService CryptoCertificatekeypairsPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var kpUuid string

		resp, httpRes, err := apiClient.CryptoApi.CryptoCertificatekeypairsPartialUpdate(context.Background(), kpUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CryptoApiService CryptoCertificatekeypairsRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var kpUuid string

		resp, httpRes, err := apiClient.CryptoApi.CryptoCertificatekeypairsRetrieve(context.Background(), kpUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CryptoApiService CryptoCertificatekeypairsUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var kpUuid string

		resp, httpRes, err := apiClient.CryptoApi.CryptoCertificatekeypairsUpdate(context.Background(), kpUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CryptoApiService CryptoCertificatekeypairsUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var kpUuid string

		resp, httpRes, err := apiClient.CryptoApi.CryptoCertificatekeypairsUsedByList(context.Background(), kpUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CryptoApiService CryptoCertificatekeypairsViewCertificateRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var kpUuid string

		resp, httpRes, err := apiClient.CryptoApi.CryptoCertificatekeypairsViewCertificateRetrieve(context.Background(), kpUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test CryptoApiService CryptoCertificatekeypairsViewPrivateKeyRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var kpUuid string

		resp, httpRes, err := apiClient.CryptoApi.CryptoCertificatekeypairsViewPrivateKeyRetrieve(context.Background(), kpUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
