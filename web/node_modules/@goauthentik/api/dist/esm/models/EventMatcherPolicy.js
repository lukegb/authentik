/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { exists } from '../runtime';
import { AppEnumFromJSON, AppEnumToJSON, } from './AppEnum';
import { EventActionsFromJSON, EventActionsToJSON, } from './EventActions';
import { ModelEnumFromJSON, ModelEnumToJSON, } from './ModelEnum';
/**
 * Check if a given object implements the EventMatcherPolicy interface.
 */
export function instanceOfEventMatcherPolicy(value) {
    let isInstance = true;
    isInstance = isInstance && "pk" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "component" in value;
    isInstance = isInstance && "verboseName" in value;
    isInstance = isInstance && "verboseNamePlural" in value;
    isInstance = isInstance && "metaModelName" in value;
    isInstance = isInstance && "boundTo" in value;
    return isInstance;
}
export function EventMatcherPolicyFromJSON(json) {
    return EventMatcherPolicyFromJSONTyped(json, false);
}
export function EventMatcherPolicyFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'pk': json['pk'],
        'name': json['name'],
        'executionLogging': !exists(json, 'execution_logging') ? undefined : json['execution_logging'],
        'component': json['component'],
        'verboseName': json['verbose_name'],
        'verboseNamePlural': json['verbose_name_plural'],
        'metaModelName': json['meta_model_name'],
        'boundTo': json['bound_to'],
        'action': !exists(json, 'action') ? undefined : EventActionsFromJSON(json['action']),
        'clientIp': !exists(json, 'client_ip') ? undefined : json['client_ip'],
        'app': !exists(json, 'app') ? undefined : AppEnumFromJSON(json['app']),
        'model': !exists(json, 'model') ? undefined : ModelEnumFromJSON(json['model']),
    };
}
export function EventMatcherPolicyToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'name': value.name,
        'execution_logging': value.executionLogging,
        'action': EventActionsToJSON(value.action),
        'client_ip': value.clientIp,
        'app': AppEnumToJSON(value.app),
        'model': ModelEnumToJSON(value.model),
    };
}
