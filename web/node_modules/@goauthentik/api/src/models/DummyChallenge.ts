/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ChallengeChoices } from './ChallengeChoices';
import {
    ChallengeChoicesFromJSON,
    ChallengeChoicesFromJSONTyped,
    ChallengeChoicesToJSON,
} from './ChallengeChoices';
import type { ContextualFlowInfo } from './ContextualFlowInfo';
import {
    ContextualFlowInfoFromJSON,
    ContextualFlowInfoFromJSONTyped,
    ContextualFlowInfoToJSON,
} from './ContextualFlowInfo';
import type { ErrorDetail } from './ErrorDetail';
import {
    ErrorDetailFromJSON,
    ErrorDetailFromJSONTyped,
    ErrorDetailToJSON,
} from './ErrorDetail';

/**
 * Dummy challenge
 * @export
 * @interface DummyChallenge
 */
export interface DummyChallenge {
    /**
     * 
     * @type {ChallengeChoices}
     * @memberof DummyChallenge
     */
    type: ChallengeChoices;
    /**
     * 
     * @type {ContextualFlowInfo}
     * @memberof DummyChallenge
     */
    flowInfo?: ContextualFlowInfo;
    /**
     * 
     * @type {string}
     * @memberof DummyChallenge
     */
    component?: string;
    /**
     * 
     * @type {{ [key: string]: Array<ErrorDetail>; }}
     * @memberof DummyChallenge
     */
    responseErrors?: { [key: string]: Array<ErrorDetail>; };
}

/**
 * Check if a given object implements the DummyChallenge interface.
 */
export function instanceOfDummyChallenge(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;

    return isInstance;
}

export function DummyChallengeFromJSON(json: any): DummyChallenge {
    return DummyChallengeFromJSONTyped(json, false);
}

export function DummyChallengeFromJSONTyped(json: any, ignoreDiscriminator: boolean): DummyChallenge {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': ChallengeChoicesFromJSON(json['type']),
        'flowInfo': !exists(json, 'flow_info') ? undefined : ContextualFlowInfoFromJSON(json['flow_info']),
        'component': !exists(json, 'component') ? undefined : json['component'],
        'responseErrors': !exists(json, 'response_errors') ? undefined : json['response_errors'],
    };
}

export function DummyChallengeToJSON(value?: DummyChallenge | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': ChallengeChoicesToJSON(value.type),
        'flow_info': ContextualFlowInfoToJSON(value.flowInfo),
        'component': value.component,
        'response_errors': value.responseErrors,
    };
}

