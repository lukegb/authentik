/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * OAuth2 Provider Metadata serializer
 * @export
 * @interface OAuth2ProviderSetupURLs
 */
export interface OAuth2ProviderSetupURLs {
    /**
     * 
     * @type {string}
     * @memberof OAuth2ProviderSetupURLs
     */
    readonly issuer: string;
    /**
     * 
     * @type {string}
     * @memberof OAuth2ProviderSetupURLs
     */
    readonly authorize: string;
    /**
     * 
     * @type {string}
     * @memberof OAuth2ProviderSetupURLs
     */
    readonly token: string;
    /**
     * 
     * @type {string}
     * @memberof OAuth2ProviderSetupURLs
     */
    readonly userInfo: string;
    /**
     * 
     * @type {string}
     * @memberof OAuth2ProviderSetupURLs
     */
    readonly providerInfo: string;
    /**
     * 
     * @type {string}
     * @memberof OAuth2ProviderSetupURLs
     */
    readonly logout: string;
    /**
     * 
     * @type {string}
     * @memberof OAuth2ProviderSetupURLs
     */
    readonly jwks: string;
}

/**
 * Check if a given object implements the OAuth2ProviderSetupURLs interface.
 */
export function instanceOfOAuth2ProviderSetupURLs(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "issuer" in value;
    isInstance = isInstance && "authorize" in value;
    isInstance = isInstance && "token" in value;
    isInstance = isInstance && "userInfo" in value;
    isInstance = isInstance && "providerInfo" in value;
    isInstance = isInstance && "logout" in value;
    isInstance = isInstance && "jwks" in value;

    return isInstance;
}

export function OAuth2ProviderSetupURLsFromJSON(json: any): OAuth2ProviderSetupURLs {
    return OAuth2ProviderSetupURLsFromJSONTyped(json, false);
}

export function OAuth2ProviderSetupURLsFromJSONTyped(json: any, ignoreDiscriminator: boolean): OAuth2ProviderSetupURLs {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'issuer': json['issuer'],
        'authorize': json['authorize'],
        'token': json['token'],
        'userInfo': json['user_info'],
        'providerInfo': json['provider_info'],
        'logout': json['logout'],
        'jwks': json['jwks'],
    };
}

export function OAuth2ProviderSetupURLsToJSON(value?: OAuth2ProviderSetupURLs | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
    };
}

