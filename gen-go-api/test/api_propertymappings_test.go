/*
authentik

Testing PropertymappingsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package api

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_api_PropertymappingsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PropertymappingsApiService PropertymappingsAllDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		httpRes, err := apiClient.PropertymappingsApi.PropertymappingsAllDestroy(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsApiService PropertymappingsAllList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PropertymappingsApi.PropertymappingsAllList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsApiService PropertymappingsAllRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		resp, httpRes, err := apiClient.PropertymappingsApi.PropertymappingsAllRetrieve(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsApiService PropertymappingsAllTestCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		resp, httpRes, err := apiClient.PropertymappingsApi.PropertymappingsAllTestCreate(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsApiService PropertymappingsAllTypesList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PropertymappingsApi.PropertymappingsAllTypesList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsApiService PropertymappingsAllUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		resp, httpRes, err := apiClient.PropertymappingsApi.PropertymappingsAllUsedByList(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsApiService PropertymappingsLdapCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PropertymappingsApi.PropertymappingsLdapCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsApiService PropertymappingsLdapDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		httpRes, err := apiClient.PropertymappingsApi.PropertymappingsLdapDestroy(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsApiService PropertymappingsLdapList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PropertymappingsApi.PropertymappingsLdapList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsApiService PropertymappingsLdapPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		resp, httpRes, err := apiClient.PropertymappingsApi.PropertymappingsLdapPartialUpdate(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsApiService PropertymappingsLdapRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		resp, httpRes, err := apiClient.PropertymappingsApi.PropertymappingsLdapRetrieve(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsApiService PropertymappingsLdapUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		resp, httpRes, err := apiClient.PropertymappingsApi.PropertymappingsLdapUpdate(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsApiService PropertymappingsLdapUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		resp, httpRes, err := apiClient.PropertymappingsApi.PropertymappingsLdapUsedByList(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsApiService PropertymappingsNotificationCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PropertymappingsApi.PropertymappingsNotificationCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsApiService PropertymappingsNotificationDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		httpRes, err := apiClient.PropertymappingsApi.PropertymappingsNotificationDestroy(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsApiService PropertymappingsNotificationList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PropertymappingsApi.PropertymappingsNotificationList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsApiService PropertymappingsNotificationPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		resp, httpRes, err := apiClient.PropertymappingsApi.PropertymappingsNotificationPartialUpdate(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsApiService PropertymappingsNotificationRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		resp, httpRes, err := apiClient.PropertymappingsApi.PropertymappingsNotificationRetrieve(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsApiService PropertymappingsNotificationUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		resp, httpRes, err := apiClient.PropertymappingsApi.PropertymappingsNotificationUpdate(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsApiService PropertymappingsNotificationUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		resp, httpRes, err := apiClient.PropertymappingsApi.PropertymappingsNotificationUsedByList(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsApiService PropertymappingsRacCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PropertymappingsApi.PropertymappingsRacCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsApiService PropertymappingsRacDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		httpRes, err := apiClient.PropertymappingsApi.PropertymappingsRacDestroy(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsApiService PropertymappingsRacList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PropertymappingsApi.PropertymappingsRacList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsApiService PropertymappingsRacPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		resp, httpRes, err := apiClient.PropertymappingsApi.PropertymappingsRacPartialUpdate(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsApiService PropertymappingsRacRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		resp, httpRes, err := apiClient.PropertymappingsApi.PropertymappingsRacRetrieve(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsApiService PropertymappingsRacUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		resp, httpRes, err := apiClient.PropertymappingsApi.PropertymappingsRacUpdate(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsApiService PropertymappingsRacUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		resp, httpRes, err := apiClient.PropertymappingsApi.PropertymappingsRacUsedByList(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsApiService PropertymappingsSamlCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PropertymappingsApi.PropertymappingsSamlCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsApiService PropertymappingsSamlDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		httpRes, err := apiClient.PropertymappingsApi.PropertymappingsSamlDestroy(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsApiService PropertymappingsSamlList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PropertymappingsApi.PropertymappingsSamlList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsApiService PropertymappingsSamlPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		resp, httpRes, err := apiClient.PropertymappingsApi.PropertymappingsSamlPartialUpdate(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsApiService PropertymappingsSamlRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		resp, httpRes, err := apiClient.PropertymappingsApi.PropertymappingsSamlRetrieve(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsApiService PropertymappingsSamlUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		resp, httpRes, err := apiClient.PropertymappingsApi.PropertymappingsSamlUpdate(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsApiService PropertymappingsSamlUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		resp, httpRes, err := apiClient.PropertymappingsApi.PropertymappingsSamlUsedByList(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsApiService PropertymappingsScimCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PropertymappingsApi.PropertymappingsScimCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsApiService PropertymappingsScimDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		httpRes, err := apiClient.PropertymappingsApi.PropertymappingsScimDestroy(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsApiService PropertymappingsScimList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PropertymappingsApi.PropertymappingsScimList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsApiService PropertymappingsScimPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		resp, httpRes, err := apiClient.PropertymappingsApi.PropertymappingsScimPartialUpdate(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsApiService PropertymappingsScimRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		resp, httpRes, err := apiClient.PropertymappingsApi.PropertymappingsScimRetrieve(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsApiService PropertymappingsScimUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		resp, httpRes, err := apiClient.PropertymappingsApi.PropertymappingsScimUpdate(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsApiService PropertymappingsScimUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		resp, httpRes, err := apiClient.PropertymappingsApi.PropertymappingsScimUsedByList(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsApiService PropertymappingsScopeCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PropertymappingsApi.PropertymappingsScopeCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsApiService PropertymappingsScopeDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		httpRes, err := apiClient.PropertymappingsApi.PropertymappingsScopeDestroy(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsApiService PropertymappingsScopeList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PropertymappingsApi.PropertymappingsScopeList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsApiService PropertymappingsScopePartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		resp, httpRes, err := apiClient.PropertymappingsApi.PropertymappingsScopePartialUpdate(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsApiService PropertymappingsScopeRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		resp, httpRes, err := apiClient.PropertymappingsApi.PropertymappingsScopeRetrieve(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsApiService PropertymappingsScopeUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		resp, httpRes, err := apiClient.PropertymappingsApi.PropertymappingsScopeUpdate(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PropertymappingsApiService PropertymappingsScopeUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var pmUuid string

		resp, httpRes, err := apiClient.PropertymappingsApi.PropertymappingsScopeUsedByList(context.Background(), pmUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
