/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as runtime from '../runtime';
import { LDAPProviderFromJSON, LDAPProviderRequestToJSON, OAuth2ProviderFromJSON, OAuth2ProviderRequestToJSON, OAuth2ProviderSetupURLsFromJSON, PaginatedLDAPProviderListFromJSON, PaginatedOAuth2ProviderListFromJSON, PaginatedProviderListFromJSON, PaginatedProxyProviderListFromJSON, PaginatedRACProviderListFromJSON, PaginatedRadiusProviderListFromJSON, PaginatedSAMLProviderListFromJSON, PaginatedSCIMProviderListFromJSON, PatchedLDAPProviderRequestToJSON, PatchedOAuth2ProviderRequestToJSON, PatchedProxyProviderRequestToJSON, PatchedRACProviderRequestToJSON, PatchedRadiusProviderRequestToJSON, PatchedSAMLProviderRequestToJSON, PatchedSCIMProviderRequestToJSON, PropertyMappingPreviewFromJSON, ProviderFromJSON, ProxyProviderFromJSON, ProxyProviderRequestToJSON, RACProviderFromJSON, RACProviderRequestToJSON, RadiusProviderFromJSON, RadiusProviderRequestToJSON, SAMLMetadataFromJSON, SAMLProviderFromJSON, SAMLProviderRequestToJSON, SCIMProviderFromJSON, SCIMProviderRequestToJSON, SCIMSyncStatusFromJSON, TypeCreateFromJSON, UsedByFromJSON, } from '../models';
/**
 *
 */
export class ProvidersApi extends runtime.BaseAPI {
    /**
     * Provider Viewset
     */
    providersAllDestroyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling providersAllDestroy.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/all/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Provider Viewset
     */
    providersAllDestroy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.providersAllDestroyRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Provider Viewset
     */
    providersAllListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.applicationIsnull !== undefined) {
                queryParameters['application__isnull'] = requestParameters.applicationIsnull;
            }
            if (requestParameters.backchannelOnly !== undefined) {
                queryParameters['backchannel_only'] = requestParameters.backchannelOnly;
            }
            if (requestParameters.ordering !== undefined) {
                queryParameters['ordering'] = requestParameters.ordering;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.pageSize !== undefined) {
                queryParameters['page_size'] = requestParameters.pageSize;
            }
            if (requestParameters.search !== undefined) {
                queryParameters['search'] = requestParameters.search;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/all/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedProviderListFromJSON(jsonValue));
        });
    }
    /**
     * Provider Viewset
     */
    providersAllList(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.providersAllListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Provider Viewset
     */
    providersAllRetrieveRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling providersAllRetrieve.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/all/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => ProviderFromJSON(jsonValue));
        });
    }
    /**
     * Provider Viewset
     */
    providersAllRetrieve(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.providersAllRetrieveRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get all creatable provider types
     */
    providersAllTypesListRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/all/types/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TypeCreateFromJSON));
        });
    }
    /**
     * Get all creatable provider types
     */
    providersAllTypesList(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.providersAllTypesListRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of all objects that use this object
     */
    providersAllUsedByListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling providersAllUsedByList.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/all/{id}/used_by/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
        });
    }
    /**
     * Get a list of all objects that use this object
     */
    providersAllUsedByList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.providersAllUsedByListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * LDAPProvider Viewset
     */
    providersLdapCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.lDAPProviderRequest === null || requestParameters.lDAPProviderRequest === undefined) {
                throw new runtime.RequiredError('lDAPProviderRequest', 'Required parameter requestParameters.lDAPProviderRequest was null or undefined when calling providersLdapCreate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/ldap/`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: LDAPProviderRequestToJSON(requestParameters.lDAPProviderRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => LDAPProviderFromJSON(jsonValue));
        });
    }
    /**
     * LDAPProvider Viewset
     */
    providersLdapCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.providersLdapCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * LDAPProvider Viewset
     */
    providersLdapDestroyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling providersLdapDestroy.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/ldap/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * LDAPProvider Viewset
     */
    providersLdapDestroy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.providersLdapDestroyRaw(requestParameters, initOverrides);
        });
    }
    /**
     * LDAPProvider Viewset
     */
    providersLdapListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.applicationIsnull !== undefined) {
                queryParameters['application__isnull'] = requestParameters.applicationIsnull;
            }
            if (requestParameters.authorizationFlowSlugIexact !== undefined) {
                queryParameters['authorization_flow__slug__iexact'] = requestParameters.authorizationFlowSlugIexact;
            }
            if (requestParameters.baseDnIexact !== undefined) {
                queryParameters['base_dn__iexact'] = requestParameters.baseDnIexact;
            }
            if (requestParameters.certificateKpUuidIexact !== undefined) {
                queryParameters['certificate__kp_uuid__iexact'] = requestParameters.certificateKpUuidIexact;
            }
            if (requestParameters.certificateNameIexact !== undefined) {
                queryParameters['certificate__name__iexact'] = requestParameters.certificateNameIexact;
            }
            if (requestParameters.gidStartNumberIexact !== undefined) {
                queryParameters['gid_start_number__iexact'] = requestParameters.gidStartNumberIexact;
            }
            if (requestParameters.nameIexact !== undefined) {
                queryParameters['name__iexact'] = requestParameters.nameIexact;
            }
            if (requestParameters.ordering !== undefined) {
                queryParameters['ordering'] = requestParameters.ordering;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.pageSize !== undefined) {
                queryParameters['page_size'] = requestParameters.pageSize;
            }
            if (requestParameters.search !== undefined) {
                queryParameters['search'] = requestParameters.search;
            }
            if (requestParameters.searchGroupGroupUuidIexact !== undefined) {
                queryParameters['search_group__group_uuid__iexact'] = requestParameters.searchGroupGroupUuidIexact;
            }
            if (requestParameters.searchGroupNameIexact !== undefined) {
                queryParameters['search_group__name__iexact'] = requestParameters.searchGroupNameIexact;
            }
            if (requestParameters.tlsServerNameIexact !== undefined) {
                queryParameters['tls_server_name__iexact'] = requestParameters.tlsServerNameIexact;
            }
            if (requestParameters.uidStartNumberIexact !== undefined) {
                queryParameters['uid_start_number__iexact'] = requestParameters.uidStartNumberIexact;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/ldap/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedLDAPProviderListFromJSON(jsonValue));
        });
    }
    /**
     * LDAPProvider Viewset
     */
    providersLdapList(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.providersLdapListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * LDAPProvider Viewset
     */
    providersLdapPartialUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling providersLdapPartialUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/ldap/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: PatchedLDAPProviderRequestToJSON(requestParameters.patchedLDAPProviderRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => LDAPProviderFromJSON(jsonValue));
        });
    }
    /**
     * LDAPProvider Viewset
     */
    providersLdapPartialUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.providersLdapPartialUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * LDAPProvider Viewset
     */
    providersLdapRetrieveRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling providersLdapRetrieve.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/ldap/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => LDAPProviderFromJSON(jsonValue));
        });
    }
    /**
     * LDAPProvider Viewset
     */
    providersLdapRetrieve(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.providersLdapRetrieveRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * LDAPProvider Viewset
     */
    providersLdapUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling providersLdapUpdate.');
            }
            if (requestParameters.lDAPProviderRequest === null || requestParameters.lDAPProviderRequest === undefined) {
                throw new runtime.RequiredError('lDAPProviderRequest', 'Required parameter requestParameters.lDAPProviderRequest was null or undefined when calling providersLdapUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/ldap/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: LDAPProviderRequestToJSON(requestParameters.lDAPProviderRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => LDAPProviderFromJSON(jsonValue));
        });
    }
    /**
     * LDAPProvider Viewset
     */
    providersLdapUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.providersLdapUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of all objects that use this object
     */
    providersLdapUsedByListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling providersLdapUsedByList.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/ldap/{id}/used_by/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
        });
    }
    /**
     * Get a list of all objects that use this object
     */
    providersLdapUsedByList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.providersLdapUsedByListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * OAuth2Provider Viewset
     */
    providersOauth2CreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.oAuth2ProviderRequest === null || requestParameters.oAuth2ProviderRequest === undefined) {
                throw new runtime.RequiredError('oAuth2ProviderRequest', 'Required parameter requestParameters.oAuth2ProviderRequest was null or undefined when calling providersOauth2Create.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/oauth2/`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: OAuth2ProviderRequestToJSON(requestParameters.oAuth2ProviderRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => OAuth2ProviderFromJSON(jsonValue));
        });
    }
    /**
     * OAuth2Provider Viewset
     */
    providersOauth2Create(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.providersOauth2CreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * OAuth2Provider Viewset
     */
    providersOauth2DestroyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling providersOauth2Destroy.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/oauth2/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * OAuth2Provider Viewset
     */
    providersOauth2Destroy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.providersOauth2DestroyRaw(requestParameters, initOverrides);
        });
    }
    /**
     * OAuth2Provider Viewset
     */
    providersOauth2ListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.accessCodeValidity !== undefined) {
                queryParameters['access_code_validity'] = requestParameters.accessCodeValidity;
            }
            if (requestParameters.accessTokenValidity !== undefined) {
                queryParameters['access_token_validity'] = requestParameters.accessTokenValidity;
            }
            if (requestParameters.application !== undefined) {
                queryParameters['application'] = requestParameters.application;
            }
            if (requestParameters.authorizationFlow !== undefined) {
                queryParameters['authorization_flow'] = requestParameters.authorizationFlow;
            }
            if (requestParameters.clientId !== undefined) {
                queryParameters['client_id'] = requestParameters.clientId;
            }
            if (requestParameters.clientType !== undefined) {
                queryParameters['client_type'] = requestParameters.clientType;
            }
            if (requestParameters.includeClaimsInIdToken !== undefined) {
                queryParameters['include_claims_in_id_token'] = requestParameters.includeClaimsInIdToken;
            }
            if (requestParameters.issuerMode !== undefined) {
                queryParameters['issuer_mode'] = requestParameters.issuerMode;
            }
            if (requestParameters.name !== undefined) {
                queryParameters['name'] = requestParameters.name;
            }
            if (requestParameters.ordering !== undefined) {
                queryParameters['ordering'] = requestParameters.ordering;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.pageSize !== undefined) {
                queryParameters['page_size'] = requestParameters.pageSize;
            }
            if (requestParameters.propertyMappings) {
                queryParameters['property_mappings'] = requestParameters.propertyMappings;
            }
            if (requestParameters.redirectUris !== undefined) {
                queryParameters['redirect_uris'] = requestParameters.redirectUris;
            }
            if (requestParameters.refreshTokenValidity !== undefined) {
                queryParameters['refresh_token_validity'] = requestParameters.refreshTokenValidity;
            }
            if (requestParameters.search !== undefined) {
                queryParameters['search'] = requestParameters.search;
            }
            if (requestParameters.signingKey !== undefined) {
                queryParameters['signing_key'] = requestParameters.signingKey;
            }
            if (requestParameters.subMode !== undefined) {
                queryParameters['sub_mode'] = requestParameters.subMode;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/oauth2/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedOAuth2ProviderListFromJSON(jsonValue));
        });
    }
    /**
     * OAuth2Provider Viewset
     */
    providersOauth2List(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.providersOauth2ListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * OAuth2Provider Viewset
     */
    providersOauth2PartialUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling providersOauth2PartialUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/oauth2/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: PatchedOAuth2ProviderRequestToJSON(requestParameters.patchedOAuth2ProviderRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => OAuth2ProviderFromJSON(jsonValue));
        });
    }
    /**
     * OAuth2Provider Viewset
     */
    providersOauth2PartialUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.providersOauth2PartialUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Preview user data for provider
     */
    providersOauth2PreviewUserRetrieveRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling providersOauth2PreviewUserRetrieve.');
            }
            const queryParameters = {};
            if (requestParameters.forUser !== undefined) {
                queryParameters['for_user'] = requestParameters.forUser;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/oauth2/{id}/preview_user/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => PropertyMappingPreviewFromJSON(jsonValue));
        });
    }
    /**
     * Preview user data for provider
     */
    providersOauth2PreviewUserRetrieve(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.providersOauth2PreviewUserRetrieveRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * OAuth2Provider Viewset
     */
    providersOauth2RetrieveRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling providersOauth2Retrieve.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/oauth2/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => OAuth2ProviderFromJSON(jsonValue));
        });
    }
    /**
     * OAuth2Provider Viewset
     */
    providersOauth2Retrieve(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.providersOauth2RetrieveRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get Providers setup URLs
     */
    providersOauth2SetupUrlsRetrieveRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling providersOauth2SetupUrlsRetrieve.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/oauth2/{id}/setup_urls/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => OAuth2ProviderSetupURLsFromJSON(jsonValue));
        });
    }
    /**
     * Get Providers setup URLs
     */
    providersOauth2SetupUrlsRetrieve(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.providersOauth2SetupUrlsRetrieveRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * OAuth2Provider Viewset
     */
    providersOauth2UpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling providersOauth2Update.');
            }
            if (requestParameters.oAuth2ProviderRequest === null || requestParameters.oAuth2ProviderRequest === undefined) {
                throw new runtime.RequiredError('oAuth2ProviderRequest', 'Required parameter requestParameters.oAuth2ProviderRequest was null or undefined when calling providersOauth2Update.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/oauth2/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: OAuth2ProviderRequestToJSON(requestParameters.oAuth2ProviderRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => OAuth2ProviderFromJSON(jsonValue));
        });
    }
    /**
     * OAuth2Provider Viewset
     */
    providersOauth2Update(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.providersOauth2UpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of all objects that use this object
     */
    providersOauth2UsedByListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling providersOauth2UsedByList.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/oauth2/{id}/used_by/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
        });
    }
    /**
     * Get a list of all objects that use this object
     */
    providersOauth2UsedByList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.providersOauth2UsedByListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * ProxyProvider Viewset
     */
    providersProxyCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.proxyProviderRequest === null || requestParameters.proxyProviderRequest === undefined) {
                throw new runtime.RequiredError('proxyProviderRequest', 'Required parameter requestParameters.proxyProviderRequest was null or undefined when calling providersProxyCreate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/proxy/`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: ProxyProviderRequestToJSON(requestParameters.proxyProviderRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => ProxyProviderFromJSON(jsonValue));
        });
    }
    /**
     * ProxyProvider Viewset
     */
    providersProxyCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.providersProxyCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * ProxyProvider Viewset
     */
    providersProxyDestroyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling providersProxyDestroy.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/proxy/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * ProxyProvider Viewset
     */
    providersProxyDestroy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.providersProxyDestroyRaw(requestParameters, initOverrides);
        });
    }
    /**
     * ProxyProvider Viewset
     */
    providersProxyListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.applicationIsnull !== undefined) {
                queryParameters['application__isnull'] = requestParameters.applicationIsnull;
            }
            if (requestParameters.authorizationFlowSlugIexact !== undefined) {
                queryParameters['authorization_flow__slug__iexact'] = requestParameters.authorizationFlowSlugIexact;
            }
            if (requestParameters.basicAuthEnabledIexact !== undefined) {
                queryParameters['basic_auth_enabled__iexact'] = requestParameters.basicAuthEnabledIexact;
            }
            if (requestParameters.basicAuthPasswordAttributeIexact !== undefined) {
                queryParameters['basic_auth_password_attribute__iexact'] = requestParameters.basicAuthPasswordAttributeIexact;
            }
            if (requestParameters.basicAuthUserAttributeIexact !== undefined) {
                queryParameters['basic_auth_user_attribute__iexact'] = requestParameters.basicAuthUserAttributeIexact;
            }
            if (requestParameters.certificateKpUuidIexact !== undefined) {
                queryParameters['certificate__kp_uuid__iexact'] = requestParameters.certificateKpUuidIexact;
            }
            if (requestParameters.certificateNameIexact !== undefined) {
                queryParameters['certificate__name__iexact'] = requestParameters.certificateNameIexact;
            }
            if (requestParameters.cookieDomainIexact !== undefined) {
                queryParameters['cookie_domain__iexact'] = requestParameters.cookieDomainIexact;
            }
            if (requestParameters.externalHostIexact !== undefined) {
                queryParameters['external_host__iexact'] = requestParameters.externalHostIexact;
            }
            if (requestParameters.internalHostIexact !== undefined) {
                queryParameters['internal_host__iexact'] = requestParameters.internalHostIexact;
            }
            if (requestParameters.internalHostSslValidationIexact !== undefined) {
                queryParameters['internal_host_ssl_validation__iexact'] = requestParameters.internalHostSslValidationIexact;
            }
            if (requestParameters.modeIexact !== undefined) {
                queryParameters['mode__iexact'] = requestParameters.modeIexact;
            }
            if (requestParameters.nameIexact !== undefined) {
                queryParameters['name__iexact'] = requestParameters.nameIexact;
            }
            if (requestParameters.ordering !== undefined) {
                queryParameters['ordering'] = requestParameters.ordering;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.pageSize !== undefined) {
                queryParameters['page_size'] = requestParameters.pageSize;
            }
            if (requestParameters.propertyMappingsIexact) {
                queryParameters['property_mappings__iexact'] = requestParameters.propertyMappingsIexact;
            }
            if (requestParameters.redirectUrisIexact !== undefined) {
                queryParameters['redirect_uris__iexact'] = requestParameters.redirectUrisIexact;
            }
            if (requestParameters.search !== undefined) {
                queryParameters['search'] = requestParameters.search;
            }
            if (requestParameters.skipPathRegexIexact !== undefined) {
                queryParameters['skip_path_regex__iexact'] = requestParameters.skipPathRegexIexact;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/proxy/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedProxyProviderListFromJSON(jsonValue));
        });
    }
    /**
     * ProxyProvider Viewset
     */
    providersProxyList(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.providersProxyListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * ProxyProvider Viewset
     */
    providersProxyPartialUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling providersProxyPartialUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/proxy/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: PatchedProxyProviderRequestToJSON(requestParameters.patchedProxyProviderRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => ProxyProviderFromJSON(jsonValue));
        });
    }
    /**
     * ProxyProvider Viewset
     */
    providersProxyPartialUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.providersProxyPartialUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * ProxyProvider Viewset
     */
    providersProxyRetrieveRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling providersProxyRetrieve.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/proxy/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => ProxyProviderFromJSON(jsonValue));
        });
    }
    /**
     * ProxyProvider Viewset
     */
    providersProxyRetrieve(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.providersProxyRetrieveRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * ProxyProvider Viewset
     */
    providersProxyUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling providersProxyUpdate.');
            }
            if (requestParameters.proxyProviderRequest === null || requestParameters.proxyProviderRequest === undefined) {
                throw new runtime.RequiredError('proxyProviderRequest', 'Required parameter requestParameters.proxyProviderRequest was null or undefined when calling providersProxyUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/proxy/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: ProxyProviderRequestToJSON(requestParameters.proxyProviderRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => ProxyProviderFromJSON(jsonValue));
        });
    }
    /**
     * ProxyProvider Viewset
     */
    providersProxyUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.providersProxyUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of all objects that use this object
     */
    providersProxyUsedByListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling providersProxyUsedByList.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/proxy/{id}/used_by/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
        });
    }
    /**
     * Get a list of all objects that use this object
     */
    providersProxyUsedByList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.providersProxyUsedByListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * RACProvider Viewset
     */
    providersRacCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.rACProviderRequest === null || requestParameters.rACProviderRequest === undefined) {
                throw new runtime.RequiredError('rACProviderRequest', 'Required parameter requestParameters.rACProviderRequest was null or undefined when calling providersRacCreate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/rac/`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: RACProviderRequestToJSON(requestParameters.rACProviderRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => RACProviderFromJSON(jsonValue));
        });
    }
    /**
     * RACProvider Viewset
     */
    providersRacCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.providersRacCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * RACProvider Viewset
     */
    providersRacDestroyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling providersRacDestroy.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/rac/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * RACProvider Viewset
     */
    providersRacDestroy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.providersRacDestroyRaw(requestParameters, initOverrides);
        });
    }
    /**
     * RACProvider Viewset
     */
    providersRacListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.applicationIsnull !== undefined) {
                queryParameters['application__isnull'] = requestParameters.applicationIsnull;
            }
            if (requestParameters.nameIexact !== undefined) {
                queryParameters['name__iexact'] = requestParameters.nameIexact;
            }
            if (requestParameters.ordering !== undefined) {
                queryParameters['ordering'] = requestParameters.ordering;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.pageSize !== undefined) {
                queryParameters['page_size'] = requestParameters.pageSize;
            }
            if (requestParameters.search !== undefined) {
                queryParameters['search'] = requestParameters.search;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/rac/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedRACProviderListFromJSON(jsonValue));
        });
    }
    /**
     * RACProvider Viewset
     */
    providersRacList(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.providersRacListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * RACProvider Viewset
     */
    providersRacPartialUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling providersRacPartialUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/rac/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: PatchedRACProviderRequestToJSON(requestParameters.patchedRACProviderRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => RACProviderFromJSON(jsonValue));
        });
    }
    /**
     * RACProvider Viewset
     */
    providersRacPartialUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.providersRacPartialUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * RACProvider Viewset
     */
    providersRacRetrieveRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling providersRacRetrieve.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/rac/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => RACProviderFromJSON(jsonValue));
        });
    }
    /**
     * RACProvider Viewset
     */
    providersRacRetrieve(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.providersRacRetrieveRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * RACProvider Viewset
     */
    providersRacUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling providersRacUpdate.');
            }
            if (requestParameters.rACProviderRequest === null || requestParameters.rACProviderRequest === undefined) {
                throw new runtime.RequiredError('rACProviderRequest', 'Required parameter requestParameters.rACProviderRequest was null or undefined when calling providersRacUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/rac/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: RACProviderRequestToJSON(requestParameters.rACProviderRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => RACProviderFromJSON(jsonValue));
        });
    }
    /**
     * RACProvider Viewset
     */
    providersRacUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.providersRacUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of all objects that use this object
     */
    providersRacUsedByListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling providersRacUsedByList.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/rac/{id}/used_by/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
        });
    }
    /**
     * Get a list of all objects that use this object
     */
    providersRacUsedByList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.providersRacUsedByListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * RadiusProvider Viewset
     */
    providersRadiusCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.radiusProviderRequest === null || requestParameters.radiusProviderRequest === undefined) {
                throw new runtime.RequiredError('radiusProviderRequest', 'Required parameter requestParameters.radiusProviderRequest was null or undefined when calling providersRadiusCreate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/radius/`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: RadiusProviderRequestToJSON(requestParameters.radiusProviderRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => RadiusProviderFromJSON(jsonValue));
        });
    }
    /**
     * RadiusProvider Viewset
     */
    providersRadiusCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.providersRadiusCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * RadiusProvider Viewset
     */
    providersRadiusDestroyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling providersRadiusDestroy.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/radius/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * RadiusProvider Viewset
     */
    providersRadiusDestroy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.providersRadiusDestroyRaw(requestParameters, initOverrides);
        });
    }
    /**
     * RadiusProvider Viewset
     */
    providersRadiusListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.applicationIsnull !== undefined) {
                queryParameters['application__isnull'] = requestParameters.applicationIsnull;
            }
            if (requestParameters.authorizationFlowSlugIexact !== undefined) {
                queryParameters['authorization_flow__slug__iexact'] = requestParameters.authorizationFlowSlugIexact;
            }
            if (requestParameters.clientNetworksIexact !== undefined) {
                queryParameters['client_networks__iexact'] = requestParameters.clientNetworksIexact;
            }
            if (requestParameters.nameIexact !== undefined) {
                queryParameters['name__iexact'] = requestParameters.nameIexact;
            }
            if (requestParameters.ordering !== undefined) {
                queryParameters['ordering'] = requestParameters.ordering;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.pageSize !== undefined) {
                queryParameters['page_size'] = requestParameters.pageSize;
            }
            if (requestParameters.search !== undefined) {
                queryParameters['search'] = requestParameters.search;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/radius/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedRadiusProviderListFromJSON(jsonValue));
        });
    }
    /**
     * RadiusProvider Viewset
     */
    providersRadiusList(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.providersRadiusListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * RadiusProvider Viewset
     */
    providersRadiusPartialUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling providersRadiusPartialUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/radius/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: PatchedRadiusProviderRequestToJSON(requestParameters.patchedRadiusProviderRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => RadiusProviderFromJSON(jsonValue));
        });
    }
    /**
     * RadiusProvider Viewset
     */
    providersRadiusPartialUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.providersRadiusPartialUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * RadiusProvider Viewset
     */
    providersRadiusRetrieveRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling providersRadiusRetrieve.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/radius/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => RadiusProviderFromJSON(jsonValue));
        });
    }
    /**
     * RadiusProvider Viewset
     */
    providersRadiusRetrieve(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.providersRadiusRetrieveRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * RadiusProvider Viewset
     */
    providersRadiusUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling providersRadiusUpdate.');
            }
            if (requestParameters.radiusProviderRequest === null || requestParameters.radiusProviderRequest === undefined) {
                throw new runtime.RequiredError('radiusProviderRequest', 'Required parameter requestParameters.radiusProviderRequest was null or undefined when calling providersRadiusUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/radius/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: RadiusProviderRequestToJSON(requestParameters.radiusProviderRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => RadiusProviderFromJSON(jsonValue));
        });
    }
    /**
     * RadiusProvider Viewset
     */
    providersRadiusUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.providersRadiusUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of all objects that use this object
     */
    providersRadiusUsedByListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling providersRadiusUsedByList.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/radius/{id}/used_by/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
        });
    }
    /**
     * Get a list of all objects that use this object
     */
    providersRadiusUsedByList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.providersRadiusUsedByListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * SAMLProvider Viewset
     */
    providersSamlCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.sAMLProviderRequest === null || requestParameters.sAMLProviderRequest === undefined) {
                throw new runtime.RequiredError('sAMLProviderRequest', 'Required parameter requestParameters.sAMLProviderRequest was null or undefined when calling providersSamlCreate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/saml/`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: SAMLProviderRequestToJSON(requestParameters.sAMLProviderRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => SAMLProviderFromJSON(jsonValue));
        });
    }
    /**
     * SAMLProvider Viewset
     */
    providersSamlCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.providersSamlCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * SAMLProvider Viewset
     */
    providersSamlDestroyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling providersSamlDestroy.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/saml/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * SAMLProvider Viewset
     */
    providersSamlDestroy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.providersSamlDestroyRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Create provider from SAML Metadata
     */
    providersSamlImportMetadataCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.name === null || requestParameters.name === undefined) {
                throw new runtime.RequiredError('name', 'Required parameter requestParameters.name was null or undefined when calling providersSamlImportMetadataCreate.');
            }
            if (requestParameters.authorizationFlow === null || requestParameters.authorizationFlow === undefined) {
                throw new runtime.RequiredError('authorizationFlow', 'Required parameter requestParameters.authorizationFlow was null or undefined when calling providersSamlImportMetadataCreate.');
            }
            if (requestParameters.file === null || requestParameters.file === undefined) {
                throw new runtime.RequiredError('file', 'Required parameter requestParameters.file was null or undefined when calling providersSamlImportMetadataCreate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const consumes = [
                { contentType: 'multipart/form-data' },
            ];
            // @ts-ignore: canConsumeForm may be unused
            const canConsumeForm = runtime.canConsumeForm(consumes);
            let formParams;
            let useForm = false;
            // use FormData to transmit files using content-type "multipart/form-data"
            useForm = canConsumeForm;
            if (useForm) {
                formParams = new FormData();
            }
            else {
                formParams = new URLSearchParams();
            }
            if (requestParameters.name !== undefined) {
                formParams.append('name', requestParameters.name);
            }
            if (requestParameters.authorizationFlow !== undefined) {
                formParams.append('authorization_flow', requestParameters.authorizationFlow);
            }
            if (requestParameters.file !== undefined) {
                formParams.append('file', requestParameters.file);
            }
            const response = yield this.request({
                path: `/providers/saml/import_metadata/`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: formParams,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Create provider from SAML Metadata
     */
    providersSamlImportMetadataCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.providersSamlImportMetadataCreateRaw(requestParameters, initOverrides);
        });
    }
    /**
     * SAMLProvider Viewset
     */
    providersSamlListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.acsUrl !== undefined) {
                queryParameters['acs_url'] = requestParameters.acsUrl;
            }
            if (requestParameters.assertionValidNotBefore !== undefined) {
                queryParameters['assertion_valid_not_before'] = requestParameters.assertionValidNotBefore;
            }
            if (requestParameters.assertionValidNotOnOrAfter !== undefined) {
                queryParameters['assertion_valid_not_on_or_after'] = requestParameters.assertionValidNotOnOrAfter;
            }
            if (requestParameters.audience !== undefined) {
                queryParameters['audience'] = requestParameters.audience;
            }
            if (requestParameters.authenticationFlow !== undefined) {
                queryParameters['authentication_flow'] = requestParameters.authenticationFlow;
            }
            if (requestParameters.authorizationFlow !== undefined) {
                queryParameters['authorization_flow'] = requestParameters.authorizationFlow;
            }
            if (requestParameters.backchannelApplication !== undefined) {
                queryParameters['backchannel_application'] = requestParameters.backchannelApplication;
            }
            if (requestParameters.defaultRelayState !== undefined) {
                queryParameters['default_relay_state'] = requestParameters.defaultRelayState;
            }
            if (requestParameters.digestAlgorithm !== undefined) {
                queryParameters['digest_algorithm'] = requestParameters.digestAlgorithm;
            }
            if (requestParameters.isBackchannel !== undefined) {
                queryParameters['is_backchannel'] = requestParameters.isBackchannel;
            }
            if (requestParameters.issuer !== undefined) {
                queryParameters['issuer'] = requestParameters.issuer;
            }
            if (requestParameters.name !== undefined) {
                queryParameters['name'] = requestParameters.name;
            }
            if (requestParameters.nameIdMapping !== undefined) {
                queryParameters['name_id_mapping'] = requestParameters.nameIdMapping;
            }
            if (requestParameters.ordering !== undefined) {
                queryParameters['ordering'] = requestParameters.ordering;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.pageSize !== undefined) {
                queryParameters['page_size'] = requestParameters.pageSize;
            }
            if (requestParameters.propertyMappings) {
                queryParameters['property_mappings'] = requestParameters.propertyMappings;
            }
            if (requestParameters.search !== undefined) {
                queryParameters['search'] = requestParameters.search;
            }
            if (requestParameters.sessionValidNotOnOrAfter !== undefined) {
                queryParameters['session_valid_not_on_or_after'] = requestParameters.sessionValidNotOnOrAfter;
            }
            if (requestParameters.signatureAlgorithm !== undefined) {
                queryParameters['signature_algorithm'] = requestParameters.signatureAlgorithm;
            }
            if (requestParameters.signingKp !== undefined) {
                queryParameters['signing_kp'] = requestParameters.signingKp;
            }
            if (requestParameters.spBinding !== undefined) {
                queryParameters['sp_binding'] = requestParameters.spBinding;
            }
            if (requestParameters.verificationKp !== undefined) {
                queryParameters['verification_kp'] = requestParameters.verificationKp;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/saml/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedSAMLProviderListFromJSON(jsonValue));
        });
    }
    /**
     * SAMLProvider Viewset
     */
    providersSamlList(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.providersSamlListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Return metadata as XML string
     */
    providersSamlMetadataRetrieveRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling providersSamlMetadataRetrieve.');
            }
            const queryParameters = {};
            if (requestParameters.download !== undefined) {
                queryParameters['download'] = requestParameters.download;
            }
            if (requestParameters.forceBinding !== undefined) {
                queryParameters['force_binding'] = requestParameters.forceBinding;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/saml/{id}/metadata/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => SAMLMetadataFromJSON(jsonValue));
        });
    }
    /**
     * Return metadata as XML string
     */
    providersSamlMetadataRetrieve(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.providersSamlMetadataRetrieveRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * SAMLProvider Viewset
     */
    providersSamlPartialUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling providersSamlPartialUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/saml/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: PatchedSAMLProviderRequestToJSON(requestParameters.patchedSAMLProviderRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => SAMLProviderFromJSON(jsonValue));
        });
    }
    /**
     * SAMLProvider Viewset
     */
    providersSamlPartialUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.providersSamlPartialUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Preview user data for provider
     */
    providersSamlPreviewUserRetrieveRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling providersSamlPreviewUserRetrieve.');
            }
            const queryParameters = {};
            if (requestParameters.forUser !== undefined) {
                queryParameters['for_user'] = requestParameters.forUser;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/saml/{id}/preview_user/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => PropertyMappingPreviewFromJSON(jsonValue));
        });
    }
    /**
     * Preview user data for provider
     */
    providersSamlPreviewUserRetrieve(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.providersSamlPreviewUserRetrieveRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * SAMLProvider Viewset
     */
    providersSamlRetrieveRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling providersSamlRetrieve.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/saml/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => SAMLProviderFromJSON(jsonValue));
        });
    }
    /**
     * SAMLProvider Viewset
     */
    providersSamlRetrieve(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.providersSamlRetrieveRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * SAMLProvider Viewset
     */
    providersSamlUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling providersSamlUpdate.');
            }
            if (requestParameters.sAMLProviderRequest === null || requestParameters.sAMLProviderRequest === undefined) {
                throw new runtime.RequiredError('sAMLProviderRequest', 'Required parameter requestParameters.sAMLProviderRequest was null or undefined when calling providersSamlUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/saml/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: SAMLProviderRequestToJSON(requestParameters.sAMLProviderRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => SAMLProviderFromJSON(jsonValue));
        });
    }
    /**
     * SAMLProvider Viewset
     */
    providersSamlUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.providersSamlUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of all objects that use this object
     */
    providersSamlUsedByListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling providersSamlUsedByList.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/saml/{id}/used_by/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
        });
    }
    /**
     * Get a list of all objects that use this object
     */
    providersSamlUsedByList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.providersSamlUsedByListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * SCIMProvider Viewset
     */
    providersScimCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.sCIMProviderRequest === null || requestParameters.sCIMProviderRequest === undefined) {
                throw new runtime.RequiredError('sCIMProviderRequest', 'Required parameter requestParameters.sCIMProviderRequest was null or undefined when calling providersScimCreate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/scim/`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: SCIMProviderRequestToJSON(requestParameters.sCIMProviderRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => SCIMProviderFromJSON(jsonValue));
        });
    }
    /**
     * SCIMProvider Viewset
     */
    providersScimCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.providersScimCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * SCIMProvider Viewset
     */
    providersScimDestroyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling providersScimDestroy.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/scim/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * SCIMProvider Viewset
     */
    providersScimDestroy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.providersScimDestroyRaw(requestParameters, initOverrides);
        });
    }
    /**
     * SCIMProvider Viewset
     */
    providersScimListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.excludeUsersServiceAccount !== undefined) {
                queryParameters['exclude_users_service_account'] = requestParameters.excludeUsersServiceAccount;
            }
            if (requestParameters.filterGroup !== undefined) {
                queryParameters['filter_group'] = requestParameters.filterGroup;
            }
            if (requestParameters.name !== undefined) {
                queryParameters['name'] = requestParameters.name;
            }
            if (requestParameters.ordering !== undefined) {
                queryParameters['ordering'] = requestParameters.ordering;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.pageSize !== undefined) {
                queryParameters['page_size'] = requestParameters.pageSize;
            }
            if (requestParameters.search !== undefined) {
                queryParameters['search'] = requestParameters.search;
            }
            if (requestParameters.url !== undefined) {
                queryParameters['url'] = requestParameters.url;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/scim/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedSCIMProviderListFromJSON(jsonValue));
        });
    }
    /**
     * SCIMProvider Viewset
     */
    providersScimList(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.providersScimListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * SCIMProvider Viewset
     */
    providersScimPartialUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling providersScimPartialUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/scim/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: PatchedSCIMProviderRequestToJSON(requestParameters.patchedSCIMProviderRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => SCIMProviderFromJSON(jsonValue));
        });
    }
    /**
     * SCIMProvider Viewset
     */
    providersScimPartialUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.providersScimPartialUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * SCIMProvider Viewset
     */
    providersScimRetrieveRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling providersScimRetrieve.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/scim/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => SCIMProviderFromJSON(jsonValue));
        });
    }
    /**
     * SCIMProvider Viewset
     */
    providersScimRetrieve(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.providersScimRetrieveRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get provider\'s sync status
     */
    providersScimSyncStatusRetrieveRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling providersScimSyncStatusRetrieve.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/scim/{id}/sync_status/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => SCIMSyncStatusFromJSON(jsonValue));
        });
    }
    /**
     * Get provider\'s sync status
     */
    providersScimSyncStatusRetrieve(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.providersScimSyncStatusRetrieveRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * SCIMProvider Viewset
     */
    providersScimUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling providersScimUpdate.');
            }
            if (requestParameters.sCIMProviderRequest === null || requestParameters.sCIMProviderRequest === undefined) {
                throw new runtime.RequiredError('sCIMProviderRequest', 'Required parameter requestParameters.sCIMProviderRequest was null or undefined when calling providersScimUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/scim/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: SCIMProviderRequestToJSON(requestParameters.sCIMProviderRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => SCIMProviderFromJSON(jsonValue));
        });
    }
    /**
     * SCIMProvider Viewset
     */
    providersScimUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.providersScimUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of all objects that use this object
     */
    providersScimUsedByListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling providersScimUsedByList.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/providers/scim/{id}/used_by/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
        });
    }
    /**
     * Get a list of all objects that use this object
     */
    providersScimUsedByList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.providersScimUsedByListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
/**
 * @export
 */
export const ProvidersOauth2ListClientTypeEnum = {
    Confidential: 'confidential',
    Public: 'public',
    UnknownDefaultOpenApi: '11184809'
};
/**
 * @export
 */
export const ProvidersOauth2ListIssuerModeEnum = {
    Global: 'global',
    PerProvider: 'per_provider',
    UnknownDefaultOpenApi: '11184809'
};
/**
 * @export
 */
export const ProvidersOauth2ListSubModeEnum = {
    HashedUserId: 'hashed_user_id',
    UserEmail: 'user_email',
    UserId: 'user_id',
    UserUpn: 'user_upn',
    UserUsername: 'user_username',
    UserUuid: 'user_uuid',
    UnknownDefaultOpenApi: '11184809'
};
/**
 * @export
 */
export const ProvidersSamlListDigestAlgorithmEnum = {
    _200009Xmldsigsha1: 'http://www.w3.org/2000/09/xmldsig#sha1',
    _200104XmldsigMoresha384: 'http://www.w3.org/2001/04/xmldsig-more#sha384',
    _200104Xmlencsha256: 'http://www.w3.org/2001/04/xmlenc#sha256',
    _200104Xmlencsha512: 'http://www.w3.org/2001/04/xmlenc#sha512',
    UnknownDefaultOpenApi: '11184809'
};
/**
 * @export
 */
export const ProvidersSamlListSignatureAlgorithmEnum = {
    _200009XmldsigdsaSha1: 'http://www.w3.org/2000/09/xmldsig#dsa-sha1',
    _200009XmldsigrsaSha1: 'http://www.w3.org/2000/09/xmldsig#rsa-sha1',
    _200104XmldsigMorersaSha256: 'http://www.w3.org/2001/04/xmldsig-more#rsa-sha256',
    _200104XmldsigMorersaSha384: 'http://www.w3.org/2001/04/xmldsig-more#rsa-sha384',
    _200104XmldsigMorersaSha512: 'http://www.w3.org/2001/04/xmldsig-more#rsa-sha512',
    UnknownDefaultOpenApi: '11184809'
};
/**
 * @export
 */
export const ProvidersSamlListSpBindingEnum = {
    Post: 'post',
    Redirect: 'redirect',
    UnknownDefaultOpenApi: '11184809'
};
/**
 * @export
 */
export const ProvidersSamlMetadataRetrieveForceBindingEnum = {
    Post: 'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST',
    Redirect: 'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect',
    UnknownDefaultOpenApi: '11184809'
};
