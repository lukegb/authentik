/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PolicyEngineMode } from './PolicyEngineMode';
import {
    PolicyEngineModeFromJSON,
    PolicyEngineModeFromJSONTyped,
    PolicyEngineModeToJSON,
} from './PolicyEngineMode';
import type { ProviderTypeEnum } from './ProviderTypeEnum';
import {
    ProviderTypeEnumFromJSON,
    ProviderTypeEnumFromJSONTyped,
    ProviderTypeEnumToJSON,
} from './ProviderTypeEnum';
import type { UserMatchingModeEnum } from './UserMatchingModeEnum';
import {
    UserMatchingModeEnumFromJSON,
    UserMatchingModeEnumFromJSONTyped,
    UserMatchingModeEnumToJSON,
} from './UserMatchingModeEnum';

/**
 * OAuth Source Serializer
 * @export
 * @interface OAuthSourceRequest
 */
export interface OAuthSourceRequest {
    /**
     * Source's display Name.
     * @type {string}
     * @memberof OAuthSourceRequest
     */
    name: string;
    /**
     * Internal source name, used in URLs.
     * @type {string}
     * @memberof OAuthSourceRequest
     */
    slug: string;
    /**
     * 
     * @type {boolean}
     * @memberof OAuthSourceRequest
     */
    enabled?: boolean;
    /**
     * Flow to use when authenticating existing users.
     * @type {string}
     * @memberof OAuthSourceRequest
     */
    authenticationFlow?: string | null;
    /**
     * Flow to use when enrolling new users.
     * @type {string}
     * @memberof OAuthSourceRequest
     */
    enrollmentFlow?: string | null;
    /**
     * 
     * @type {PolicyEngineMode}
     * @memberof OAuthSourceRequest
     */
    policyEngineMode?: PolicyEngineMode;
    /**
     * 
     * @type {UserMatchingModeEnum}
     * @memberof OAuthSourceRequest
     */
    userMatchingMode?: UserMatchingModeEnum;
    /**
     * 
     * @type {string}
     * @memberof OAuthSourceRequest
     */
    userPathTemplate?: string;
    /**
     * 
     * @type {ProviderTypeEnum}
     * @memberof OAuthSourceRequest
     */
    providerType: ProviderTypeEnum;
    /**
     * URL used to request the initial token. This URL is only required for OAuth 1.
     * @type {string}
     * @memberof OAuthSourceRequest
     */
    requestTokenUrl?: string | null;
    /**
     * URL the user is redirect to to conest the flow.
     * @type {string}
     * @memberof OAuthSourceRequest
     */
    authorizationUrl?: string | null;
    /**
     * URL used by authentik to retrieve tokens.
     * @type {string}
     * @memberof OAuthSourceRequest
     */
    accessTokenUrl?: string | null;
    /**
     * URL used by authentik to get user information.
     * @type {string}
     * @memberof OAuthSourceRequest
     */
    profileUrl?: string | null;
    /**
     * 
     * @type {string}
     * @memberof OAuthSourceRequest
     */
    consumerKey: string;
    /**
     * 
     * @type {string}
     * @memberof OAuthSourceRequest
     */
    consumerSecret: string;
    /**
     * 
     * @type {string}
     * @memberof OAuthSourceRequest
     */
    additionalScopes?: string;
    /**
     * 
     * @type {string}
     * @memberof OAuthSourceRequest
     */
    oidcWellKnownUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof OAuthSourceRequest
     */
    oidcJwksUrl?: string;
    /**
     * 
     * @type {any}
     * @memberof OAuthSourceRequest
     */
    oidcJwks?: any | null;
}

/**
 * Check if a given object implements the OAuthSourceRequest interface.
 */
export function instanceOfOAuthSourceRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "slug" in value;
    isInstance = isInstance && "providerType" in value;
    isInstance = isInstance && "consumerKey" in value;
    isInstance = isInstance && "consumerSecret" in value;

    return isInstance;
}

export function OAuthSourceRequestFromJSON(json: any): OAuthSourceRequest {
    return OAuthSourceRequestFromJSONTyped(json, false);
}

export function OAuthSourceRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): OAuthSourceRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'slug': json['slug'],
        'enabled': !exists(json, 'enabled') ? undefined : json['enabled'],
        'authenticationFlow': !exists(json, 'authentication_flow') ? undefined : json['authentication_flow'],
        'enrollmentFlow': !exists(json, 'enrollment_flow') ? undefined : json['enrollment_flow'],
        'policyEngineMode': !exists(json, 'policy_engine_mode') ? undefined : PolicyEngineModeFromJSON(json['policy_engine_mode']),
        'userMatchingMode': !exists(json, 'user_matching_mode') ? undefined : UserMatchingModeEnumFromJSON(json['user_matching_mode']),
        'userPathTemplate': !exists(json, 'user_path_template') ? undefined : json['user_path_template'],
        'providerType': ProviderTypeEnumFromJSON(json['provider_type']),
        'requestTokenUrl': !exists(json, 'request_token_url') ? undefined : json['request_token_url'],
        'authorizationUrl': !exists(json, 'authorization_url') ? undefined : json['authorization_url'],
        'accessTokenUrl': !exists(json, 'access_token_url') ? undefined : json['access_token_url'],
        'profileUrl': !exists(json, 'profile_url') ? undefined : json['profile_url'],
        'consumerKey': json['consumer_key'],
        'consumerSecret': json['consumer_secret'],
        'additionalScopes': !exists(json, 'additional_scopes') ? undefined : json['additional_scopes'],
        'oidcWellKnownUrl': !exists(json, 'oidc_well_known_url') ? undefined : json['oidc_well_known_url'],
        'oidcJwksUrl': !exists(json, 'oidc_jwks_url') ? undefined : json['oidc_jwks_url'],
        'oidcJwks': !exists(json, 'oidc_jwks') ? undefined : json['oidc_jwks'],
    };
}

export function OAuthSourceRequestToJSON(value?: OAuthSourceRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'slug': value.slug,
        'enabled': value.enabled,
        'authentication_flow': value.authenticationFlow,
        'enrollment_flow': value.enrollmentFlow,
        'policy_engine_mode': PolicyEngineModeToJSON(value.policyEngineMode),
        'user_matching_mode': UserMatchingModeEnumToJSON(value.userMatchingMode),
        'user_path_template': value.userPathTemplate,
        'provider_type': ProviderTypeEnumToJSON(value.providerType),
        'request_token_url': value.requestTokenUrl,
        'authorization_url': value.authorizationUrl,
        'access_token_url': value.accessTokenUrl,
        'profile_url': value.profileUrl,
        'consumer_key': value.consumerKey,
        'consumer_secret': value.consumerSecret,
        'additional_scopes': value.additionalScopes,
        'oidc_well_known_url': value.oidcWellKnownUrl,
        'oidc_jwks_url': value.oidcJwksUrl,
        'oidc_jwks': value.oidcJwks,
    };
}

