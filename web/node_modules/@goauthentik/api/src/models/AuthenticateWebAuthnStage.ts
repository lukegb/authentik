/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AuthenticatorAttachmentEnum } from './AuthenticatorAttachmentEnum';
import {
    AuthenticatorAttachmentEnumFromJSON,
    AuthenticatorAttachmentEnumFromJSONTyped,
    AuthenticatorAttachmentEnumToJSON,
} from './AuthenticatorAttachmentEnum';
import type { FlowSet } from './FlowSet';
import {
    FlowSetFromJSON,
    FlowSetFromJSONTyped,
    FlowSetToJSON,
} from './FlowSet';
import type { ResidentKeyRequirementEnum } from './ResidentKeyRequirementEnum';
import {
    ResidentKeyRequirementEnumFromJSON,
    ResidentKeyRequirementEnumFromJSONTyped,
    ResidentKeyRequirementEnumToJSON,
} from './ResidentKeyRequirementEnum';
import type { UserVerificationEnum } from './UserVerificationEnum';
import {
    UserVerificationEnumFromJSON,
    UserVerificationEnumFromJSONTyped,
    UserVerificationEnumToJSON,
} from './UserVerificationEnum';

/**
 * AuthenticateWebAuthnStage Serializer
 * @export
 * @interface AuthenticateWebAuthnStage
 */
export interface AuthenticateWebAuthnStage {
    /**
     * 
     * @type {string}
     * @memberof AuthenticateWebAuthnStage
     */
    readonly pk: string;
    /**
     * 
     * @type {string}
     * @memberof AuthenticateWebAuthnStage
     */
    name: string;
    /**
     * Get object type so that we know how to edit the object
     * @type {string}
     * @memberof AuthenticateWebAuthnStage
     */
    readonly component: string;
    /**
     * Return object's verbose_name
     * @type {string}
     * @memberof AuthenticateWebAuthnStage
     */
    readonly verboseName: string;
    /**
     * Return object's plural verbose_name
     * @type {string}
     * @memberof AuthenticateWebAuthnStage
     */
    readonly verboseNamePlural: string;
    /**
     * Return internal model name
     * @type {string}
     * @memberof AuthenticateWebAuthnStage
     */
    readonly metaModelName: string;
    /**
     * 
     * @type {Array<FlowSet>}
     * @memberof AuthenticateWebAuthnStage
     */
    flowSet?: Array<FlowSet>;
    /**
     * Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.
     * @type {string}
     * @memberof AuthenticateWebAuthnStage
     */
    configureFlow?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AuthenticateWebAuthnStage
     */
    friendlyName?: string | null;
    /**
     * 
     * @type {UserVerificationEnum}
     * @memberof AuthenticateWebAuthnStage
     */
    userVerification?: UserVerificationEnum;
    /**
     * 
     * @type {AuthenticatorAttachmentEnum}
     * @memberof AuthenticateWebAuthnStage
     */
    authenticatorAttachment?: AuthenticatorAttachmentEnum | null;
    /**
     * 
     * @type {ResidentKeyRequirementEnum}
     * @memberof AuthenticateWebAuthnStage
     */
    residentKeyRequirement?: ResidentKeyRequirementEnum;
}

/**
 * Check if a given object implements the AuthenticateWebAuthnStage interface.
 */
export function instanceOfAuthenticateWebAuthnStage(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "pk" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "component" in value;
    isInstance = isInstance && "verboseName" in value;
    isInstance = isInstance && "verboseNamePlural" in value;
    isInstance = isInstance && "metaModelName" in value;

    return isInstance;
}

export function AuthenticateWebAuthnStageFromJSON(json: any): AuthenticateWebAuthnStage {
    return AuthenticateWebAuthnStageFromJSONTyped(json, false);
}

export function AuthenticateWebAuthnStageFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuthenticateWebAuthnStage {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'pk': json['pk'],
        'name': json['name'],
        'component': json['component'],
        'verboseName': json['verbose_name'],
        'verboseNamePlural': json['verbose_name_plural'],
        'metaModelName': json['meta_model_name'],
        'flowSet': !exists(json, 'flow_set') ? undefined : ((json['flow_set'] as Array<any>).map(FlowSetFromJSON)),
        'configureFlow': !exists(json, 'configure_flow') ? undefined : json['configure_flow'],
        'friendlyName': !exists(json, 'friendly_name') ? undefined : json['friendly_name'],
        'userVerification': !exists(json, 'user_verification') ? undefined : UserVerificationEnumFromJSON(json['user_verification']),
        'authenticatorAttachment': !exists(json, 'authenticator_attachment') ? undefined : AuthenticatorAttachmentEnumFromJSON(json['authenticator_attachment']),
        'residentKeyRequirement': !exists(json, 'resident_key_requirement') ? undefined : ResidentKeyRequirementEnumFromJSON(json['resident_key_requirement']),
    };
}

export function AuthenticateWebAuthnStageToJSON(value?: AuthenticateWebAuthnStage | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'flow_set': value.flowSet === undefined ? undefined : ((value.flowSet as Array<any>).map(FlowSetToJSON)),
        'configure_flow': value.configureFlow,
        'friendly_name': value.friendlyName,
        'user_verification': UserVerificationEnumToJSON(value.userVerification),
        'authenticator_attachment': AuthenticatorAttachmentEnumToJSON(value.authenticatorAttachment),
        'resident_key_requirement': ResidentKeyRequirementEnumToJSON(value.residentKeyRequirement),
    };
}

