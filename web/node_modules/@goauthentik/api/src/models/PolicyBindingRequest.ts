/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * PolicyBinding Serializer
 * @export
 * @interface PolicyBindingRequest
 */
export interface PolicyBindingRequest {
    /**
     * 
     * @type {string}
     * @memberof PolicyBindingRequest
     */
    policy?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PolicyBindingRequest
     */
    group?: string | null;
    /**
     * 
     * @type {number}
     * @memberof PolicyBindingRequest
     */
    user?: number | null;
    /**
     * 
     * @type {string}
     * @memberof PolicyBindingRequest
     */
    target: string;
    /**
     * Negates the outcome of the policy. Messages are unaffected.
     * @type {boolean}
     * @memberof PolicyBindingRequest
     */
    negate?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PolicyBindingRequest
     */
    enabled?: boolean;
    /**
     * 
     * @type {number}
     * @memberof PolicyBindingRequest
     */
    order: number;
    /**
     * Timeout after which Policy execution is terminated.
     * @type {number}
     * @memberof PolicyBindingRequest
     */
    timeout?: number;
    /**
     * Result if the Policy execution fails.
     * @type {boolean}
     * @memberof PolicyBindingRequest
     */
    failureResult?: boolean;
}

/**
 * Check if a given object implements the PolicyBindingRequest interface.
 */
export function instanceOfPolicyBindingRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "target" in value;
    isInstance = isInstance && "order" in value;

    return isInstance;
}

export function PolicyBindingRequestFromJSON(json: any): PolicyBindingRequest {
    return PolicyBindingRequestFromJSONTyped(json, false);
}

export function PolicyBindingRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PolicyBindingRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'policy': !exists(json, 'policy') ? undefined : json['policy'],
        'group': !exists(json, 'group') ? undefined : json['group'],
        'user': !exists(json, 'user') ? undefined : json['user'],
        'target': json['target'],
        'negate': !exists(json, 'negate') ? undefined : json['negate'],
        'enabled': !exists(json, 'enabled') ? undefined : json['enabled'],
        'order': json['order'],
        'timeout': !exists(json, 'timeout') ? undefined : json['timeout'],
        'failureResult': !exists(json, 'failure_result') ? undefined : json['failure_result'],
    };
}

export function PolicyBindingRequestToJSON(value?: PolicyBindingRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'policy': value.policy,
        'group': value.group,
        'user': value.user,
        'target': value.target,
        'negate': value.negate,
        'enabled': value.enabled,
        'order': value.order,
        'timeout': value.timeout,
        'failure_result': value.failureResult,
    };
}

