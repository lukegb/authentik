/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { LDAPProviderRequestFromJSONTyped, LDAPProviderRequestToJSON, } from './LDAPProviderRequest';
import { OAuth2ProviderRequestFromJSONTyped, OAuth2ProviderRequestToJSON, } from './OAuth2ProviderRequest';
import { ProxyProviderRequestFromJSONTyped, ProxyProviderRequestToJSON, } from './ProxyProviderRequest';
import { RACProviderRequestFromJSONTyped, RACProviderRequestToJSON, } from './RACProviderRequest';
import { RadiusProviderRequestFromJSONTyped, RadiusProviderRequestToJSON, } from './RadiusProviderRequest';
import { SAMLProviderRequestFromJSONTyped, SAMLProviderRequestToJSON, } from './SAMLProviderRequest';
import { SCIMProviderRequestFromJSONTyped, SCIMProviderRequestToJSON, } from './SCIMProviderRequest';
export function ModelRequestFromJSON(json) {
    return ModelRequestFromJSONTyped(json, false);
}
export function ModelRequestFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['providerModel']) {
        case 'authentik_providers_ldap.ldapprovider':
            return Object.assign(Object.assign({}, LDAPProviderRequestFromJSONTyped(json, true)), { providerModel: 'authentik_providers_ldap.ldapprovider' });
        case 'authentik_providers_oauth2.oauth2provider':
            return Object.assign(Object.assign({}, OAuth2ProviderRequestFromJSONTyped(json, true)), { providerModel: 'authentik_providers_oauth2.oauth2provider' });
        case 'authentik_providers_proxy.proxyprovider':
            return Object.assign(Object.assign({}, ProxyProviderRequestFromJSONTyped(json, true)), { providerModel: 'authentik_providers_proxy.proxyprovider' });
        case 'authentik_providers_rac.racprovider':
            return Object.assign(Object.assign({}, RACProviderRequestFromJSONTyped(json, true)), { providerModel: 'authentik_providers_rac.racprovider' });
        case 'authentik_providers_radius.radiusprovider':
            return Object.assign(Object.assign({}, RadiusProviderRequestFromJSONTyped(json, true)), { providerModel: 'authentik_providers_radius.radiusprovider' });
        case 'authentik_providers_saml.samlprovider':
            return Object.assign(Object.assign({}, SAMLProviderRequestFromJSONTyped(json, true)), { providerModel: 'authentik_providers_saml.samlprovider' });
        case 'authentik_providers_scim.scimprovider':
            return Object.assign(Object.assign({}, SCIMProviderRequestFromJSONTyped(json, true)), { providerModel: 'authentik_providers_scim.scimprovider' });
        default:
            throw new Error(`No variant of ModelRequest exists with 'providerModel=${json['providerModel']}'`);
    }
}
export function ModelRequestToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['providerModel']) {
        case 'authentik_providers_ldap.ldapprovider':
            return LDAPProviderRequestToJSON(value);
        case 'authentik_providers_oauth2.oauth2provider':
            return OAuth2ProviderRequestToJSON(value);
        case 'authentik_providers_proxy.proxyprovider':
            return ProxyProviderRequestToJSON(value);
        case 'authentik_providers_rac.racprovider':
            return RACProviderRequestToJSON(value);
        case 'authentik_providers_radius.radiusprovider':
            return RadiusProviderRequestToJSON(value);
        case 'authentik_providers_saml.samlprovider':
            return SAMLProviderRequestToJSON(value);
        case 'authentik_providers_scim.scimprovider':
            return SCIMProviderRequestToJSON(value);
        default:
            throw new Error(`No variant of ModelRequest exists with 'providerModel=${value['providerModel']}'`);
    }
}
