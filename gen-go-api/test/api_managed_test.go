/*
authentik

Testing ManagedApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package api

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_api_ManagedApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test ManagedApiService ManagedBlueprintsApplyCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceUuid string

		resp, httpRes, err := apiClient.ManagedApi.ManagedBlueprintsApplyCreate(context.Background(), instanceUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedApiService ManagedBlueprintsAvailableList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagedApi.ManagedBlueprintsAvailableList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedApiService ManagedBlueprintsCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagedApi.ManagedBlueprintsCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedApiService ManagedBlueprintsDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceUuid string

		httpRes, err := apiClient.ManagedApi.ManagedBlueprintsDestroy(context.Background(), instanceUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedApiService ManagedBlueprintsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.ManagedApi.ManagedBlueprintsList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedApiService ManagedBlueprintsPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceUuid string

		resp, httpRes, err := apiClient.ManagedApi.ManagedBlueprintsPartialUpdate(context.Background(), instanceUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedApiService ManagedBlueprintsRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceUuid string

		resp, httpRes, err := apiClient.ManagedApi.ManagedBlueprintsRetrieve(context.Background(), instanceUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedApiService ManagedBlueprintsUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceUuid string

		resp, httpRes, err := apiClient.ManagedApi.ManagedBlueprintsUpdate(context.Background(), instanceUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test ManagedApiService ManagedBlueprintsUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var instanceUuid string

		resp, httpRes, err := apiClient.ManagedApi.ManagedBlueprintsUsedByList(context.Background(), instanceUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
