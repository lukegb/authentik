/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * CertificateKeyPair Serializer
 * @export
 * @interface CertificateKeyPair
 */
export interface CertificateKeyPair {
    /**
     * 
     * @type {string}
     * @memberof CertificateKeyPair
     */
    readonly pk: string;
    /**
     * 
     * @type {string}
     * @memberof CertificateKeyPair
     */
    name: string;
    /**
     * Get certificate Hash (SHA256)
     * @type {string}
     * @memberof CertificateKeyPair
     */
    readonly fingerprintSha256: string | null;
    /**
     * Get certificate Hash (SHA1)
     * @type {string}
     * @memberof CertificateKeyPair
     */
    readonly fingerprintSha1: string | null;
    /**
     * Get certificate expiry
     * @type {Date}
     * @memberof CertificateKeyPair
     */
    readonly certExpiry: Date | null;
    /**
     * Get certificate subject as full rfc4514
     * @type {string}
     * @memberof CertificateKeyPair
     */
    readonly certSubject: string | null;
    /**
     * Show if this keypair has a private key configured or not
     * @type {boolean}
     * @memberof CertificateKeyPair
     */
    readonly privateKeyAvailable: boolean;
    /**
     * Get the private key's type, if set
     * @type {string}
     * @memberof CertificateKeyPair
     */
    readonly privateKeyType: string | null;
    /**
     * Get URL to download certificate
     * @type {string}
     * @memberof CertificateKeyPair
     */
    readonly certificateDownloadUrl: string;
    /**
     * Get URL to download private key
     * @type {string}
     * @memberof CertificateKeyPair
     */
    readonly privateKeyDownloadUrl: string;
    /**
     * Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
     * @type {string}
     * @memberof CertificateKeyPair
     */
    readonly managed: string | null;
}

/**
 * Check if a given object implements the CertificateKeyPair interface.
 */
export function instanceOfCertificateKeyPair(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "pk" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "fingerprintSha256" in value;
    isInstance = isInstance && "fingerprintSha1" in value;
    isInstance = isInstance && "certExpiry" in value;
    isInstance = isInstance && "certSubject" in value;
    isInstance = isInstance && "privateKeyAvailable" in value;
    isInstance = isInstance && "privateKeyType" in value;
    isInstance = isInstance && "certificateDownloadUrl" in value;
    isInstance = isInstance && "privateKeyDownloadUrl" in value;
    isInstance = isInstance && "managed" in value;

    return isInstance;
}

export function CertificateKeyPairFromJSON(json: any): CertificateKeyPair {
    return CertificateKeyPairFromJSONTyped(json, false);
}

export function CertificateKeyPairFromJSONTyped(json: any, ignoreDiscriminator: boolean): CertificateKeyPair {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'pk': json['pk'],
        'name': json['name'],
        'fingerprintSha256': json['fingerprint_sha256'],
        'fingerprintSha1': json['fingerprint_sha1'],
        'certExpiry': (json['cert_expiry'] === null ? null : new Date(json['cert_expiry'])),
        'certSubject': json['cert_subject'],
        'privateKeyAvailable': json['private_key_available'],
        'privateKeyType': json['private_key_type'],
        'certificateDownloadUrl': json['certificate_download_url'],
        'privateKeyDownloadUrl': json['private_key_download_url'],
        'managed': json['managed'],
    };
}

export function CertificateKeyPairToJSON(value?: CertificateKeyPair | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
    };
}

