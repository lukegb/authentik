/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Invitation Serializer
 * @export
 * @interface InvitationRequest
 */
export interface InvitationRequest {
    /**
     * 
     * @type {string}
     * @memberof InvitationRequest
     */
    name: string;
    /**
     * 
     * @type {Date}
     * @memberof InvitationRequest
     */
    expires?: Date;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof InvitationRequest
     */
    fixedData?: { [key: string]: any; };
    /**
     * When enabled, the invitation will be deleted after usage.
     * @type {boolean}
     * @memberof InvitationRequest
     */
    singleUse?: boolean;
    /**
     * When set, only the configured flow can use this invitation.
     * @type {string}
     * @memberof InvitationRequest
     */
    flow?: string | null;
}

/**
 * Check if a given object implements the InvitationRequest interface.
 */
export function instanceOfInvitationRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;

    return isInstance;
}

export function InvitationRequestFromJSON(json: any): InvitationRequest {
    return InvitationRequestFromJSONTyped(json, false);
}

export function InvitationRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): InvitationRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'expires': !exists(json, 'expires') ? undefined : (new Date(json['expires'])),
        'fixedData': !exists(json, 'fixed_data') ? undefined : json['fixed_data'],
        'singleUse': !exists(json, 'single_use') ? undefined : json['single_use'],
        'flow': !exists(json, 'flow') ? undefined : json['flow'],
    };
}

export function InvitationRequestToJSON(value?: InvitationRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'expires': value.expires === undefined ? undefined : (value.expires.toISOString()),
        'fixed_data': value.fixedData,
        'single_use': value.singleUse,
        'flow': value.flow,
    };
}

