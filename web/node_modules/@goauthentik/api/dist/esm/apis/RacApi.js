/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as runtime from '../runtime';
import { ConnectionTokenFromJSON, ConnectionTokenRequestToJSON, EndpointFromJSON, EndpointRequestToJSON, PaginatedConnectionTokenListFromJSON, PaginatedEndpointListFromJSON, PatchedConnectionTokenRequestToJSON, PatchedEndpointRequestToJSON, UsedByFromJSON, } from '../models';
/**
 *
 */
export class RacApi extends runtime.BaseAPI {
    /**
     * ConnectionToken Viewset
     */
    racConnectionTokensDestroyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.connectionTokenUuid === null || requestParameters.connectionTokenUuid === undefined) {
                throw new runtime.RequiredError('connectionTokenUuid', 'Required parameter requestParameters.connectionTokenUuid was null or undefined when calling racConnectionTokensDestroy.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/rac/connection_tokens/{connection_token_uuid}/`.replace(`{${"connection_token_uuid"}}`, encodeURIComponent(String(requestParameters.connectionTokenUuid))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * ConnectionToken Viewset
     */
    racConnectionTokensDestroy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.racConnectionTokensDestroyRaw(requestParameters, initOverrides);
        });
    }
    /**
     * ConnectionToken Viewset
     */
    racConnectionTokensListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.endpoint !== undefined) {
                queryParameters['endpoint'] = requestParameters.endpoint;
            }
            if (requestParameters.ordering !== undefined) {
                queryParameters['ordering'] = requestParameters.ordering;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.pageSize !== undefined) {
                queryParameters['page_size'] = requestParameters.pageSize;
            }
            if (requestParameters.provider !== undefined) {
                queryParameters['provider'] = requestParameters.provider;
            }
            if (requestParameters.search !== undefined) {
                queryParameters['search'] = requestParameters.search;
            }
            if (requestParameters.sessionUser !== undefined) {
                queryParameters['session__user'] = requestParameters.sessionUser;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/rac/connection_tokens/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedConnectionTokenListFromJSON(jsonValue));
        });
    }
    /**
     * ConnectionToken Viewset
     */
    racConnectionTokensList(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.racConnectionTokensListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * ConnectionToken Viewset
     */
    racConnectionTokensPartialUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.connectionTokenUuid === null || requestParameters.connectionTokenUuid === undefined) {
                throw new runtime.RequiredError('connectionTokenUuid', 'Required parameter requestParameters.connectionTokenUuid was null or undefined when calling racConnectionTokensPartialUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/rac/connection_tokens/{connection_token_uuid}/`.replace(`{${"connection_token_uuid"}}`, encodeURIComponent(String(requestParameters.connectionTokenUuid))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: PatchedConnectionTokenRequestToJSON(requestParameters.patchedConnectionTokenRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => ConnectionTokenFromJSON(jsonValue));
        });
    }
    /**
     * ConnectionToken Viewset
     */
    racConnectionTokensPartialUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.racConnectionTokensPartialUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * ConnectionToken Viewset
     */
    racConnectionTokensRetrieveRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.connectionTokenUuid === null || requestParameters.connectionTokenUuid === undefined) {
                throw new runtime.RequiredError('connectionTokenUuid', 'Required parameter requestParameters.connectionTokenUuid was null or undefined when calling racConnectionTokensRetrieve.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/rac/connection_tokens/{connection_token_uuid}/`.replace(`{${"connection_token_uuid"}}`, encodeURIComponent(String(requestParameters.connectionTokenUuid))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => ConnectionTokenFromJSON(jsonValue));
        });
    }
    /**
     * ConnectionToken Viewset
     */
    racConnectionTokensRetrieve(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.racConnectionTokensRetrieveRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * ConnectionToken Viewset
     */
    racConnectionTokensUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.connectionTokenUuid === null || requestParameters.connectionTokenUuid === undefined) {
                throw new runtime.RequiredError('connectionTokenUuid', 'Required parameter requestParameters.connectionTokenUuid was null or undefined when calling racConnectionTokensUpdate.');
            }
            if (requestParameters.connectionTokenRequest === null || requestParameters.connectionTokenRequest === undefined) {
                throw new runtime.RequiredError('connectionTokenRequest', 'Required parameter requestParameters.connectionTokenRequest was null or undefined when calling racConnectionTokensUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/rac/connection_tokens/{connection_token_uuid}/`.replace(`{${"connection_token_uuid"}}`, encodeURIComponent(String(requestParameters.connectionTokenUuid))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: ConnectionTokenRequestToJSON(requestParameters.connectionTokenRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => ConnectionTokenFromJSON(jsonValue));
        });
    }
    /**
     * ConnectionToken Viewset
     */
    racConnectionTokensUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.racConnectionTokensUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of all objects that use this object
     */
    racConnectionTokensUsedByListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.connectionTokenUuid === null || requestParameters.connectionTokenUuid === undefined) {
                throw new runtime.RequiredError('connectionTokenUuid', 'Required parameter requestParameters.connectionTokenUuid was null or undefined when calling racConnectionTokensUsedByList.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/rac/connection_tokens/{connection_token_uuid}/used_by/`.replace(`{${"connection_token_uuid"}}`, encodeURIComponent(String(requestParameters.connectionTokenUuid))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
        });
    }
    /**
     * Get a list of all objects that use this object
     */
    racConnectionTokensUsedByList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.racConnectionTokensUsedByListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Endpoint Viewset
     */
    racEndpointsCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.endpointRequest === null || requestParameters.endpointRequest === undefined) {
                throw new runtime.RequiredError('endpointRequest', 'Required parameter requestParameters.endpointRequest was null or undefined when calling racEndpointsCreate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/rac/endpoints/`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: EndpointRequestToJSON(requestParameters.endpointRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => EndpointFromJSON(jsonValue));
        });
    }
    /**
     * Endpoint Viewset
     */
    racEndpointsCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.racEndpointsCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Endpoint Viewset
     */
    racEndpointsDestroyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.pbmUuid === null || requestParameters.pbmUuid === undefined) {
                throw new runtime.RequiredError('pbmUuid', 'Required parameter requestParameters.pbmUuid was null or undefined when calling racEndpointsDestroy.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/rac/endpoints/{pbm_uuid}/`.replace(`{${"pbm_uuid"}}`, encodeURIComponent(String(requestParameters.pbmUuid))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Endpoint Viewset
     */
    racEndpointsDestroy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.racEndpointsDestroyRaw(requestParameters, initOverrides);
        });
    }
    /**
     * List accessible endpoints
     */
    racEndpointsListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.name !== undefined) {
                queryParameters['name'] = requestParameters.name;
            }
            if (requestParameters.ordering !== undefined) {
                queryParameters['ordering'] = requestParameters.ordering;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.pageSize !== undefined) {
                queryParameters['page_size'] = requestParameters.pageSize;
            }
            if (requestParameters.provider !== undefined) {
                queryParameters['provider'] = requestParameters.provider;
            }
            if (requestParameters.search !== undefined) {
                queryParameters['search'] = requestParameters.search;
            }
            if (requestParameters.superuserFullList !== undefined) {
                queryParameters['superuser_full_list'] = requestParameters.superuserFullList;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/rac/endpoints/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedEndpointListFromJSON(jsonValue));
        });
    }
    /**
     * List accessible endpoints
     */
    racEndpointsList(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.racEndpointsListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Endpoint Viewset
     */
    racEndpointsPartialUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.pbmUuid === null || requestParameters.pbmUuid === undefined) {
                throw new runtime.RequiredError('pbmUuid', 'Required parameter requestParameters.pbmUuid was null or undefined when calling racEndpointsPartialUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/rac/endpoints/{pbm_uuid}/`.replace(`{${"pbm_uuid"}}`, encodeURIComponent(String(requestParameters.pbmUuid))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: PatchedEndpointRequestToJSON(requestParameters.patchedEndpointRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => EndpointFromJSON(jsonValue));
        });
    }
    /**
     * Endpoint Viewset
     */
    racEndpointsPartialUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.racEndpointsPartialUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Endpoint Viewset
     */
    racEndpointsRetrieveRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.pbmUuid === null || requestParameters.pbmUuid === undefined) {
                throw new runtime.RequiredError('pbmUuid', 'Required parameter requestParameters.pbmUuid was null or undefined when calling racEndpointsRetrieve.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/rac/endpoints/{pbm_uuid}/`.replace(`{${"pbm_uuid"}}`, encodeURIComponent(String(requestParameters.pbmUuid))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => EndpointFromJSON(jsonValue));
        });
    }
    /**
     * Endpoint Viewset
     */
    racEndpointsRetrieve(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.racEndpointsRetrieveRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Endpoint Viewset
     */
    racEndpointsUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.pbmUuid === null || requestParameters.pbmUuid === undefined) {
                throw new runtime.RequiredError('pbmUuid', 'Required parameter requestParameters.pbmUuid was null or undefined when calling racEndpointsUpdate.');
            }
            if (requestParameters.endpointRequest === null || requestParameters.endpointRequest === undefined) {
                throw new runtime.RequiredError('endpointRequest', 'Required parameter requestParameters.endpointRequest was null or undefined when calling racEndpointsUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/rac/endpoints/{pbm_uuid}/`.replace(`{${"pbm_uuid"}}`, encodeURIComponent(String(requestParameters.pbmUuid))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: EndpointRequestToJSON(requestParameters.endpointRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => EndpointFromJSON(jsonValue));
        });
    }
    /**
     * Endpoint Viewset
     */
    racEndpointsUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.racEndpointsUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of all objects that use this object
     */
    racEndpointsUsedByListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.pbmUuid === null || requestParameters.pbmUuid === undefined) {
                throw new runtime.RequiredError('pbmUuid', 'Required parameter requestParameters.pbmUuid was null or undefined when calling racEndpointsUsedByList.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/rac/endpoints/{pbm_uuid}/used_by/`.replace(`{${"pbm_uuid"}}`, encodeURIComponent(String(requestParameters.pbmUuid))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
        });
    }
    /**
     * Get a list of all objects that use this object
     */
    racEndpointsUsedByList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.racEndpointsUsedByListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
