/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UserObjectPermission } from './UserObjectPermission';
import {
    UserObjectPermissionFromJSON,
    UserObjectPermissionFromJSONTyped,
    UserObjectPermissionToJSON,
} from './UserObjectPermission';

/**
 * Users assigned object permission serializer
 * @export
 * @interface UserAssignedObjectPermission
 */
export interface UserAssignedObjectPermission {
    /**
     * 
     * @type {number}
     * @memberof UserAssignedObjectPermission
     */
    readonly pk: number;
    /**
     * Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.
     * @type {string}
     * @memberof UserAssignedObjectPermission
     */
    username: string;
    /**
     * User's display name.
     * @type {string}
     * @memberof UserAssignedObjectPermission
     */
    name: string;
    /**
     * Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
     * @type {boolean}
     * @memberof UserAssignedObjectPermission
     */
    isActive?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof UserAssignedObjectPermission
     */
    lastLogin?: Date | null;
    /**
     * 
     * @type {string}
     * @memberof UserAssignedObjectPermission
     */
    email?: string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof UserAssignedObjectPermission
     */
    attributes?: { [key: string]: any; };
    /**
     * 
     * @type {string}
     * @memberof UserAssignedObjectPermission
     */
    readonly uid: string;
    /**
     * 
     * @type {Array<UserObjectPermission>}
     * @memberof UserAssignedObjectPermission
     */
    permissions: Array<UserObjectPermission>;
    /**
     * 
     * @type {boolean}
     * @memberof UserAssignedObjectPermission
     */
    isSuperuser: boolean;
}

/**
 * Check if a given object implements the UserAssignedObjectPermission interface.
 */
export function instanceOfUserAssignedObjectPermission(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "pk" in value;
    isInstance = isInstance && "username" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "uid" in value;
    isInstance = isInstance && "permissions" in value;
    isInstance = isInstance && "isSuperuser" in value;

    return isInstance;
}

export function UserAssignedObjectPermissionFromJSON(json: any): UserAssignedObjectPermission {
    return UserAssignedObjectPermissionFromJSONTyped(json, false);
}

export function UserAssignedObjectPermissionFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserAssignedObjectPermission {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'pk': json['pk'],
        'username': json['username'],
        'name': json['name'],
        'isActive': !exists(json, 'is_active') ? undefined : json['is_active'],
        'lastLogin': !exists(json, 'last_login') ? undefined : (json['last_login'] === null ? null : new Date(json['last_login'])),
        'email': !exists(json, 'email') ? undefined : json['email'],
        'attributes': !exists(json, 'attributes') ? undefined : json['attributes'],
        'uid': json['uid'],
        'permissions': ((json['permissions'] as Array<any>).map(UserObjectPermissionFromJSON)),
        'isSuperuser': json['is_superuser'],
    };
}

export function UserAssignedObjectPermissionToJSON(value?: UserAssignedObjectPermission | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'username': value.username,
        'name': value.name,
        'is_active': value.isActive,
        'last_login': value.lastLogin === undefined ? undefined : (value.lastLogin === null ? null : value.lastLogin.toISOString()),
        'email': value.email,
        'attributes': value.attributes,
        'permissions': ((value.permissions as Array<any>).map(UserObjectPermissionToJSON)),
        'is_superuser': value.isSuperuser,
    };
}

