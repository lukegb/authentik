/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Group Serializer
 * @export
 * @interface GroupRequest
 */
export interface GroupRequest {
    /**
     * 
     * @type {string}
     * @memberof GroupRequest
     */
    name: string;
    /**
     * Users added to this group will be superusers.
     * @type {boolean}
     * @memberof GroupRequest
     */
    isSuperuser?: boolean;
    /**
     * 
     * @type {string}
     * @memberof GroupRequest
     */
    parent?: string | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof GroupRequest
     */
    users?: Array<number>;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof GroupRequest
     */
    attributes?: { [key: string]: any; };
    /**
     * 
     * @type {Array<string>}
     * @memberof GroupRequest
     */
    roles?: Array<string>;
}

/**
 * Check if a given object implements the GroupRequest interface.
 */
export function instanceOfGroupRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;

    return isInstance;
}

export function GroupRequestFromJSON(json: any): GroupRequest {
    return GroupRequestFromJSONTyped(json, false);
}

export function GroupRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): GroupRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'isSuperuser': !exists(json, 'is_superuser') ? undefined : json['is_superuser'],
        'parent': !exists(json, 'parent') ? undefined : json['parent'],
        'users': !exists(json, 'users') ? undefined : json['users'],
        'attributes': !exists(json, 'attributes') ? undefined : json['attributes'],
        'roles': !exists(json, 'roles') ? undefined : json['roles'],
    };
}

export function GroupRequestToJSON(value?: GroupRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'is_superuser': value.isSuperuser,
        'parent': value.parent,
        'users': value.users,
        'attributes': value.attributes,
        'roles': value.roles,
    };
}

