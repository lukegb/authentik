"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.FlowChallengeResponseRequestToJSON = exports.FlowChallengeResponseRequestFromJSONTyped = exports.FlowChallengeResponseRequestFromJSON = void 0;
const AppleChallengeResponseRequest_1 = require("./AppleChallengeResponseRequest");
const AuthenticatorDuoChallengeResponseRequest_1 = require("./AuthenticatorDuoChallengeResponseRequest");
const AuthenticatorSMSChallengeResponseRequest_1 = require("./AuthenticatorSMSChallengeResponseRequest");
const AuthenticatorStaticChallengeResponseRequest_1 = require("./AuthenticatorStaticChallengeResponseRequest");
const AuthenticatorTOTPChallengeResponseRequest_1 = require("./AuthenticatorTOTPChallengeResponseRequest");
const AuthenticatorValidationChallengeResponseRequest_1 = require("./AuthenticatorValidationChallengeResponseRequest");
const AuthenticatorWebAuthnChallengeResponseRequest_1 = require("./AuthenticatorWebAuthnChallengeResponseRequest");
const AutoSubmitChallengeResponseRequest_1 = require("./AutoSubmitChallengeResponseRequest");
const CaptchaChallengeResponseRequest_1 = require("./CaptchaChallengeResponseRequest");
const ConsentChallengeResponseRequest_1 = require("./ConsentChallengeResponseRequest");
const DummyChallengeResponseRequest_1 = require("./DummyChallengeResponseRequest");
const EmailChallengeResponseRequest_1 = require("./EmailChallengeResponseRequest");
const IdentificationChallengeResponseRequest_1 = require("./IdentificationChallengeResponseRequest");
const OAuthDeviceCodeChallengeResponseRequest_1 = require("./OAuthDeviceCodeChallengeResponseRequest");
const OAuthDeviceCodeFinishChallengeResponseRequest_1 = require("./OAuthDeviceCodeFinishChallengeResponseRequest");
const PasswordChallengeResponseRequest_1 = require("./PasswordChallengeResponseRequest");
const PlexAuthenticationChallengeResponseRequest_1 = require("./PlexAuthenticationChallengeResponseRequest");
const PromptChallengeResponseRequest_1 = require("./PromptChallengeResponseRequest");
const UserLoginChallengeResponseRequest_1 = require("./UserLoginChallengeResponseRequest");
function FlowChallengeResponseRequestFromJSON(json) {
    return FlowChallengeResponseRequestFromJSONTyped(json, false);
}
exports.FlowChallengeResponseRequestFromJSON = FlowChallengeResponseRequestFromJSON;
function FlowChallengeResponseRequestFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['component']) {
        case 'ak-provider-oauth2-device-code':
            return Object.assign(Object.assign({}, (0, OAuthDeviceCodeChallengeResponseRequest_1.OAuthDeviceCodeChallengeResponseRequestFromJSONTyped)(json, true)), { component: 'ak-provider-oauth2-device-code' });
        case 'ak-provider-oauth2-device-code-finish':
            return Object.assign(Object.assign({}, (0, OAuthDeviceCodeFinishChallengeResponseRequest_1.OAuthDeviceCodeFinishChallengeResponseRequestFromJSONTyped)(json, true)), { component: 'ak-provider-oauth2-device-code-finish' });
        case 'ak-source-oauth-apple':
            return Object.assign(Object.assign({}, (0, AppleChallengeResponseRequest_1.AppleChallengeResponseRequestFromJSONTyped)(json, true)), { component: 'ak-source-oauth-apple' });
        case 'ak-source-plex':
            return Object.assign(Object.assign({}, (0, PlexAuthenticationChallengeResponseRequest_1.PlexAuthenticationChallengeResponseRequestFromJSONTyped)(json, true)), { component: 'ak-source-plex' });
        case 'ak-stage-authenticator-duo':
            return Object.assign(Object.assign({}, (0, AuthenticatorDuoChallengeResponseRequest_1.AuthenticatorDuoChallengeResponseRequestFromJSONTyped)(json, true)), { component: 'ak-stage-authenticator-duo' });
        case 'ak-stage-authenticator-sms':
            return Object.assign(Object.assign({}, (0, AuthenticatorSMSChallengeResponseRequest_1.AuthenticatorSMSChallengeResponseRequestFromJSONTyped)(json, true)), { component: 'ak-stage-authenticator-sms' });
        case 'ak-stage-authenticator-static':
            return Object.assign(Object.assign({}, (0, AuthenticatorStaticChallengeResponseRequest_1.AuthenticatorStaticChallengeResponseRequestFromJSONTyped)(json, true)), { component: 'ak-stage-authenticator-static' });
        case 'ak-stage-authenticator-totp':
            return Object.assign(Object.assign({}, (0, AuthenticatorTOTPChallengeResponseRequest_1.AuthenticatorTOTPChallengeResponseRequestFromJSONTyped)(json, true)), { component: 'ak-stage-authenticator-totp' });
        case 'ak-stage-authenticator-validate':
            return Object.assign(Object.assign({}, (0, AuthenticatorValidationChallengeResponseRequest_1.AuthenticatorValidationChallengeResponseRequestFromJSONTyped)(json, true)), { component: 'ak-stage-authenticator-validate' });
        case 'ak-stage-authenticator-webauthn':
            return Object.assign(Object.assign({}, (0, AuthenticatorWebAuthnChallengeResponseRequest_1.AuthenticatorWebAuthnChallengeResponseRequestFromJSONTyped)(json, true)), { component: 'ak-stage-authenticator-webauthn' });
        case 'ak-stage-autosubmit':
            return Object.assign(Object.assign({}, (0, AutoSubmitChallengeResponseRequest_1.AutoSubmitChallengeResponseRequestFromJSONTyped)(json, true)), { component: 'ak-stage-autosubmit' });
        case 'ak-stage-captcha':
            return Object.assign(Object.assign({}, (0, CaptchaChallengeResponseRequest_1.CaptchaChallengeResponseRequestFromJSONTyped)(json, true)), { component: 'ak-stage-captcha' });
        case 'ak-stage-consent':
            return Object.assign(Object.assign({}, (0, ConsentChallengeResponseRequest_1.ConsentChallengeResponseRequestFromJSONTyped)(json, true)), { component: 'ak-stage-consent' });
        case 'ak-stage-dummy':
            return Object.assign(Object.assign({}, (0, DummyChallengeResponseRequest_1.DummyChallengeResponseRequestFromJSONTyped)(json, true)), { component: 'ak-stage-dummy' });
        case 'ak-stage-email':
            return Object.assign(Object.assign({}, (0, EmailChallengeResponseRequest_1.EmailChallengeResponseRequestFromJSONTyped)(json, true)), { component: 'ak-stage-email' });
        case 'ak-stage-identification':
            return Object.assign(Object.assign({}, (0, IdentificationChallengeResponseRequest_1.IdentificationChallengeResponseRequestFromJSONTyped)(json, true)), { component: 'ak-stage-identification' });
        case 'ak-stage-password':
            return Object.assign(Object.assign({}, (0, PasswordChallengeResponseRequest_1.PasswordChallengeResponseRequestFromJSONTyped)(json, true)), { component: 'ak-stage-password' });
        case 'ak-stage-prompt':
            return Object.assign(Object.assign({}, (0, PromptChallengeResponseRequest_1.PromptChallengeResponseRequestFromJSONTyped)(json, true)), { component: 'ak-stage-prompt' });
        case 'ak-stage-user-login':
            return Object.assign(Object.assign({}, (0, UserLoginChallengeResponseRequest_1.UserLoginChallengeResponseRequestFromJSONTyped)(json, true)), { component: 'ak-stage-user-login' });
        default:
            throw new Error(`No variant of FlowChallengeResponseRequest exists with 'component=${json['component']}'`);
    }
}
exports.FlowChallengeResponseRequestFromJSONTyped = FlowChallengeResponseRequestFromJSONTyped;
function FlowChallengeResponseRequestToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['component']) {
        case 'ak-provider-oauth2-device-code':
            return (0, OAuthDeviceCodeChallengeResponseRequest_1.OAuthDeviceCodeChallengeResponseRequestToJSON)(value);
        case 'ak-provider-oauth2-device-code-finish':
            return (0, OAuthDeviceCodeFinishChallengeResponseRequest_1.OAuthDeviceCodeFinishChallengeResponseRequestToJSON)(value);
        case 'ak-source-oauth-apple':
            return (0, AppleChallengeResponseRequest_1.AppleChallengeResponseRequestToJSON)(value);
        case 'ak-source-plex':
            return (0, PlexAuthenticationChallengeResponseRequest_1.PlexAuthenticationChallengeResponseRequestToJSON)(value);
        case 'ak-stage-authenticator-duo':
            return (0, AuthenticatorDuoChallengeResponseRequest_1.AuthenticatorDuoChallengeResponseRequestToJSON)(value);
        case 'ak-stage-authenticator-sms':
            return (0, AuthenticatorSMSChallengeResponseRequest_1.AuthenticatorSMSChallengeResponseRequestToJSON)(value);
        case 'ak-stage-authenticator-static':
            return (0, AuthenticatorStaticChallengeResponseRequest_1.AuthenticatorStaticChallengeResponseRequestToJSON)(value);
        case 'ak-stage-authenticator-totp':
            return (0, AuthenticatorTOTPChallengeResponseRequest_1.AuthenticatorTOTPChallengeResponseRequestToJSON)(value);
        case 'ak-stage-authenticator-validate':
            return (0, AuthenticatorValidationChallengeResponseRequest_1.AuthenticatorValidationChallengeResponseRequestToJSON)(value);
        case 'ak-stage-authenticator-webauthn':
            return (0, AuthenticatorWebAuthnChallengeResponseRequest_1.AuthenticatorWebAuthnChallengeResponseRequestToJSON)(value);
        case 'ak-stage-autosubmit':
            return (0, AutoSubmitChallengeResponseRequest_1.AutoSubmitChallengeResponseRequestToJSON)(value);
        case 'ak-stage-captcha':
            return (0, CaptchaChallengeResponseRequest_1.CaptchaChallengeResponseRequestToJSON)(value);
        case 'ak-stage-consent':
            return (0, ConsentChallengeResponseRequest_1.ConsentChallengeResponseRequestToJSON)(value);
        case 'ak-stage-dummy':
            return (0, DummyChallengeResponseRequest_1.DummyChallengeResponseRequestToJSON)(value);
        case 'ak-stage-email':
            return (0, EmailChallengeResponseRequest_1.EmailChallengeResponseRequestToJSON)(value);
        case 'ak-stage-identification':
            return (0, IdentificationChallengeResponseRequest_1.IdentificationChallengeResponseRequestToJSON)(value);
        case 'ak-stage-password':
            return (0, PasswordChallengeResponseRequest_1.PasswordChallengeResponseRequestToJSON)(value);
        case 'ak-stage-prompt':
            return (0, PromptChallengeResponseRequest_1.PromptChallengeResponseRequestToJSON)(value);
        case 'ak-stage-user-login':
            return (0, UserLoginChallengeResponseRequest_1.UserLoginChallengeResponseRequestToJSON)(value);
        default:
            throw new Error(`No variant of FlowChallengeResponseRequest exists with 'component=${value['component']}'`);
    }
}
exports.FlowChallengeResponseRequestToJSON = FlowChallengeResponseRequestToJSON;
