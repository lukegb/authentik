/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * RadiusProvider Serializer
 * @export
 * @interface PatchedRadiusProviderRequest
 */
export interface PatchedRadiusProviderRequest {
    /**
     * 
     * @type {string}
     * @memberof PatchedRadiusProviderRequest
     */
    name?: string;
    /**
     * Flow used for authentication when the associated application is accessed by an un-authenticated user.
     * @type {string}
     * @memberof PatchedRadiusProviderRequest
     */
    authenticationFlow?: string | null;
    /**
     * Flow used when authorizing this provider.
     * @type {string}
     * @memberof PatchedRadiusProviderRequest
     */
    authorizationFlow?: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof PatchedRadiusProviderRequest
     */
    propertyMappings?: Array<string>;
    /**
     * List of CIDRs (comma-separated) that clients can connect from. A more specific CIDR will match before a looser one. Clients connecting from a non-specified CIDR will be dropped.
     * @type {string}
     * @memberof PatchedRadiusProviderRequest
     */
    clientNetworks?: string;
    /**
     * Shared secret between clients and server to hash packets.
     * @type {string}
     * @memberof PatchedRadiusProviderRequest
     */
    sharedSecret?: string;
    /**
     * When enabled, code-based multi-factor authentication can be used by appending a semicolon and the TOTP code to the password. This should only be enabled if all users that will bind to this provider have a TOTP device configured, as otherwise a password may incorrectly be rejected if it contains a semicolon.
     * @type {boolean}
     * @memberof PatchedRadiusProviderRequest
     */
    mfaSupport?: boolean;
}

/**
 * Check if a given object implements the PatchedRadiusProviderRequest interface.
 */
export function instanceOfPatchedRadiusProviderRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PatchedRadiusProviderRequestFromJSON(json: any): PatchedRadiusProviderRequest {
    return PatchedRadiusProviderRequestFromJSONTyped(json, false);
}

export function PatchedRadiusProviderRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PatchedRadiusProviderRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'authenticationFlow': !exists(json, 'authentication_flow') ? undefined : json['authentication_flow'],
        'authorizationFlow': !exists(json, 'authorization_flow') ? undefined : json['authorization_flow'],
        'propertyMappings': !exists(json, 'property_mappings') ? undefined : json['property_mappings'],
        'clientNetworks': !exists(json, 'client_networks') ? undefined : json['client_networks'],
        'sharedSecret': !exists(json, 'shared_secret') ? undefined : json['shared_secret'],
        'mfaSupport': !exists(json, 'mfa_support') ? undefined : json['mfa_support'],
    };
}

export function PatchedRadiusProviderRequestToJSON(value?: PatchedRadiusProviderRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'authentication_flow': value.authenticationFlow,
        'authorization_flow': value.authorizationFlow,
        'property_mappings': value.propertyMappings,
        'client_networks': value.clientNetworks,
        'shared_secret': value.sharedSecret,
        'mfa_support': value.mfaSupport,
    };
}

