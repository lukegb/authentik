/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  App,
  GenericError,
  LoginMetrics,
  PatchedSettingsRequest,
  Settings,
  SettingsRequest,
  SystemInfo,
  ValidationError,
  Version,
  Workers,
} from '../models';
import {
    AppFromJSON,
    AppToJSON,
    GenericErrorFromJSON,
    GenericErrorToJSON,
    LoginMetricsFromJSON,
    LoginMetricsToJSON,
    PatchedSettingsRequestFromJSON,
    PatchedSettingsRequestToJSON,
    SettingsFromJSON,
    SettingsToJSON,
    SettingsRequestFromJSON,
    SettingsRequestToJSON,
    SystemInfoFromJSON,
    SystemInfoToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
    VersionFromJSON,
    VersionToJSON,
    WorkersFromJSON,
    WorkersToJSON,
} from '../models';

export interface AdminSettingsPartialUpdateRequest {
    patchedSettingsRequest?: PatchedSettingsRequest;
}

export interface AdminSettingsUpdateRequest {
    settingsRequest?: SettingsRequest;
}

/**
 * 
 */
export class AdminApi extends runtime.BaseAPI {

    /**
     * Read-only view list all installed apps
     */
    async adminAppsListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<App>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/admin/apps/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AppFromJSON));
    }

    /**
     * Read-only view list all installed apps
     */
    async adminAppsList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<App>> {
        const response = await this.adminAppsListRaw(initOverrides);
        return await response.value();
    }

    /**
     * Login Metrics per 1h
     */
    async adminMetricsRetrieveRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LoginMetrics>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/admin/metrics/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LoginMetricsFromJSON(jsonValue));
    }

    /**
     * Login Metrics per 1h
     */
    async adminMetricsRetrieve(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LoginMetrics> {
        const response = await this.adminMetricsRetrieveRaw(initOverrides);
        return await response.value();
    }

    /**
     * Read-only view list all installed models
     */
    async adminModelsListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<App>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/admin/models/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(AppFromJSON));
    }

    /**
     * Read-only view list all installed models
     */
    async adminModelsList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<App>> {
        const response = await this.adminModelsListRaw(initOverrides);
        return await response.value();
    }

    /**
     * Settings view
     */
    async adminSettingsPartialUpdateRaw(requestParameters: AdminSettingsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Settings>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/admin/settings/`,
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedSettingsRequestToJSON(requestParameters.patchedSettingsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SettingsFromJSON(jsonValue));
    }

    /**
     * Settings view
     */
    async adminSettingsPartialUpdate(requestParameters: AdminSettingsPartialUpdateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Settings> {
        const response = await this.adminSettingsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Settings view
     */
    async adminSettingsRetrieveRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Settings>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/admin/settings/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SettingsFromJSON(jsonValue));
    }

    /**
     * Settings view
     */
    async adminSettingsRetrieve(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Settings> {
        const response = await this.adminSettingsRetrieveRaw(initOverrides);
        return await response.value();
    }

    /**
     * Settings view
     */
    async adminSettingsUpdateRaw(requestParameters: AdminSettingsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Settings>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/admin/settings/`,
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SettingsRequestToJSON(requestParameters.settingsRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SettingsFromJSON(jsonValue));
    }

    /**
     * Settings view
     */
    async adminSettingsUpdate(requestParameters: AdminSettingsUpdateRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Settings> {
        const response = await this.adminSettingsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get system information.
     */
    async adminSystemCreateRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SystemInfo>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/admin/system/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemInfoFromJSON(jsonValue));
    }

    /**
     * Get system information.
     */
    async adminSystemCreate(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SystemInfo> {
        const response = await this.adminSystemCreateRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get system information.
     */
    async adminSystemRetrieveRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SystemInfo>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/admin/system/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SystemInfoFromJSON(jsonValue));
    }

    /**
     * Get system information.
     */
    async adminSystemRetrieve(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SystemInfo> {
        const response = await this.adminSystemRetrieveRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get running and latest version.
     */
    async adminVersionRetrieveRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Version>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/admin/version/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => VersionFromJSON(jsonValue));
    }

    /**
     * Get running and latest version.
     */
    async adminVersionRetrieve(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Version> {
        const response = await this.adminVersionRetrieveRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get currently connected worker count.
     */
    async adminWorkersRetrieveRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Workers>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/admin/workers/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => WorkersFromJSON(jsonValue));
    }

    /**
     * Get currently connected worker count.
     */
    async adminWorkersRetrieve(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Workers> {
        const response = await this.adminWorkersRetrieveRaw(initOverrides);
        return await response.value();
    }

}
