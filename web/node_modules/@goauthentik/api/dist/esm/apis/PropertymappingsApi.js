/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as runtime from '../runtime';
import { LDAPPropertyMappingFromJSON, LDAPPropertyMappingRequestToJSON, NotificationWebhookMappingFromJSON, NotificationWebhookMappingRequestToJSON, PaginatedLDAPPropertyMappingListFromJSON, PaginatedNotificationWebhookMappingListFromJSON, PaginatedPropertyMappingListFromJSON, PaginatedRACPropertyMappingListFromJSON, PaginatedSAMLPropertyMappingListFromJSON, PaginatedSCIMMappingListFromJSON, PaginatedScopeMappingListFromJSON, PatchedLDAPPropertyMappingRequestToJSON, PatchedNotificationWebhookMappingRequestToJSON, PatchedRACPropertyMappingRequestToJSON, PatchedSAMLPropertyMappingRequestToJSON, PatchedSCIMMappingRequestToJSON, PatchedScopeMappingRequestToJSON, PolicyTestRequestToJSON, PropertyMappingFromJSON, PropertyMappingTestResultFromJSON, RACPropertyMappingFromJSON, RACPropertyMappingRequestToJSON, SAMLPropertyMappingFromJSON, SAMLPropertyMappingRequestToJSON, SCIMMappingFromJSON, SCIMMappingRequestToJSON, ScopeMappingFromJSON, ScopeMappingRequestToJSON, TypeCreateFromJSON, UsedByFromJSON, } from '../models';
/**
 *
 */
export class PropertymappingsApi extends runtime.BaseAPI {
    /**
     * PropertyMapping Viewset
     */
    propertymappingsAllDestroyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
                throw new runtime.RequiredError('pmUuid', 'Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsAllDestroy.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/propertymappings/all/{pm_uuid}/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * PropertyMapping Viewset
     */
    propertymappingsAllDestroy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.propertymappingsAllDestroyRaw(requestParameters, initOverrides);
        });
    }
    /**
     * PropertyMapping Viewset
     */
    propertymappingsAllListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.managedIsnull !== undefined) {
                queryParameters['managed__isnull'] = requestParameters.managedIsnull;
            }
            if (requestParameters.ordering !== undefined) {
                queryParameters['ordering'] = requestParameters.ordering;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.pageSize !== undefined) {
                queryParameters['page_size'] = requestParameters.pageSize;
            }
            if (requestParameters.search !== undefined) {
                queryParameters['search'] = requestParameters.search;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/propertymappings/all/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedPropertyMappingListFromJSON(jsonValue));
        });
    }
    /**
     * PropertyMapping Viewset
     */
    propertymappingsAllList(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.propertymappingsAllListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * PropertyMapping Viewset
     */
    propertymappingsAllRetrieveRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
                throw new runtime.RequiredError('pmUuid', 'Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsAllRetrieve.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/propertymappings/all/{pm_uuid}/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => PropertyMappingFromJSON(jsonValue));
        });
    }
    /**
     * PropertyMapping Viewset
     */
    propertymappingsAllRetrieve(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.propertymappingsAllRetrieveRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Test Property Mapping
     */
    propertymappingsAllTestCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
                throw new runtime.RequiredError('pmUuid', 'Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsAllTestCreate.');
            }
            if (requestParameters.policyTestRequest === null || requestParameters.policyTestRequest === undefined) {
                throw new runtime.RequiredError('policyTestRequest', 'Required parameter requestParameters.policyTestRequest was null or undefined when calling propertymappingsAllTestCreate.');
            }
            const queryParameters = {};
            if (requestParameters.formatResult !== undefined) {
                queryParameters['format_result'] = requestParameters.formatResult;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/propertymappings/all/{pm_uuid}/test/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: PolicyTestRequestToJSON(requestParameters.policyTestRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => PropertyMappingTestResultFromJSON(jsonValue));
        });
    }
    /**
     * Test Property Mapping
     */
    propertymappingsAllTestCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.propertymappingsAllTestCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get all creatable property-mapping types
     */
    propertymappingsAllTypesListRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/propertymappings/all/types/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TypeCreateFromJSON));
        });
    }
    /**
     * Get all creatable property-mapping types
     */
    propertymappingsAllTypesList(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.propertymappingsAllTypesListRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of all objects that use this object
     */
    propertymappingsAllUsedByListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
                throw new runtime.RequiredError('pmUuid', 'Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsAllUsedByList.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/propertymappings/all/{pm_uuid}/used_by/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
        });
    }
    /**
     * Get a list of all objects that use this object
     */
    propertymappingsAllUsedByList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.propertymappingsAllUsedByListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * LDAP PropertyMapping Viewset
     */
    propertymappingsLdapCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.lDAPPropertyMappingRequest === null || requestParameters.lDAPPropertyMappingRequest === undefined) {
                throw new runtime.RequiredError('lDAPPropertyMappingRequest', 'Required parameter requestParameters.lDAPPropertyMappingRequest was null or undefined when calling propertymappingsLdapCreate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/propertymappings/ldap/`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: LDAPPropertyMappingRequestToJSON(requestParameters.lDAPPropertyMappingRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => LDAPPropertyMappingFromJSON(jsonValue));
        });
    }
    /**
     * LDAP PropertyMapping Viewset
     */
    propertymappingsLdapCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.propertymappingsLdapCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * LDAP PropertyMapping Viewset
     */
    propertymappingsLdapDestroyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
                throw new runtime.RequiredError('pmUuid', 'Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsLdapDestroy.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/propertymappings/ldap/{pm_uuid}/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * LDAP PropertyMapping Viewset
     */
    propertymappingsLdapDestroy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.propertymappingsLdapDestroyRaw(requestParameters, initOverrides);
        });
    }
    /**
     * LDAP PropertyMapping Viewset
     */
    propertymappingsLdapListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.expression !== undefined) {
                queryParameters['expression'] = requestParameters.expression;
            }
            if (requestParameters.managed) {
                queryParameters['managed'] = requestParameters.managed;
            }
            if (requestParameters.name !== undefined) {
                queryParameters['name'] = requestParameters.name;
            }
            if (requestParameters.objectField !== undefined) {
                queryParameters['object_field'] = requestParameters.objectField;
            }
            if (requestParameters.ordering !== undefined) {
                queryParameters['ordering'] = requestParameters.ordering;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.pageSize !== undefined) {
                queryParameters['page_size'] = requestParameters.pageSize;
            }
            if (requestParameters.pmUuid !== undefined) {
                queryParameters['pm_uuid'] = requestParameters.pmUuid;
            }
            if (requestParameters.search !== undefined) {
                queryParameters['search'] = requestParameters.search;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/propertymappings/ldap/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedLDAPPropertyMappingListFromJSON(jsonValue));
        });
    }
    /**
     * LDAP PropertyMapping Viewset
     */
    propertymappingsLdapList(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.propertymappingsLdapListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * LDAP PropertyMapping Viewset
     */
    propertymappingsLdapPartialUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
                throw new runtime.RequiredError('pmUuid', 'Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsLdapPartialUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/propertymappings/ldap/{pm_uuid}/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: PatchedLDAPPropertyMappingRequestToJSON(requestParameters.patchedLDAPPropertyMappingRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => LDAPPropertyMappingFromJSON(jsonValue));
        });
    }
    /**
     * LDAP PropertyMapping Viewset
     */
    propertymappingsLdapPartialUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.propertymappingsLdapPartialUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * LDAP PropertyMapping Viewset
     */
    propertymappingsLdapRetrieveRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
                throw new runtime.RequiredError('pmUuid', 'Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsLdapRetrieve.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/propertymappings/ldap/{pm_uuid}/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => LDAPPropertyMappingFromJSON(jsonValue));
        });
    }
    /**
     * LDAP PropertyMapping Viewset
     */
    propertymappingsLdapRetrieve(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.propertymappingsLdapRetrieveRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * LDAP PropertyMapping Viewset
     */
    propertymappingsLdapUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
                throw new runtime.RequiredError('pmUuid', 'Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsLdapUpdate.');
            }
            if (requestParameters.lDAPPropertyMappingRequest === null || requestParameters.lDAPPropertyMappingRequest === undefined) {
                throw new runtime.RequiredError('lDAPPropertyMappingRequest', 'Required parameter requestParameters.lDAPPropertyMappingRequest was null or undefined when calling propertymappingsLdapUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/propertymappings/ldap/{pm_uuid}/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: LDAPPropertyMappingRequestToJSON(requestParameters.lDAPPropertyMappingRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => LDAPPropertyMappingFromJSON(jsonValue));
        });
    }
    /**
     * LDAP PropertyMapping Viewset
     */
    propertymappingsLdapUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.propertymappingsLdapUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of all objects that use this object
     */
    propertymappingsLdapUsedByListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
                throw new runtime.RequiredError('pmUuid', 'Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsLdapUsedByList.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/propertymappings/ldap/{pm_uuid}/used_by/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
        });
    }
    /**
     * Get a list of all objects that use this object
     */
    propertymappingsLdapUsedByList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.propertymappingsLdapUsedByListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * NotificationWebhookMapping Viewset
     */
    propertymappingsNotificationCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.notificationWebhookMappingRequest === null || requestParameters.notificationWebhookMappingRequest === undefined) {
                throw new runtime.RequiredError('notificationWebhookMappingRequest', 'Required parameter requestParameters.notificationWebhookMappingRequest was null or undefined when calling propertymappingsNotificationCreate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/propertymappings/notification/`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: NotificationWebhookMappingRequestToJSON(requestParameters.notificationWebhookMappingRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => NotificationWebhookMappingFromJSON(jsonValue));
        });
    }
    /**
     * NotificationWebhookMapping Viewset
     */
    propertymappingsNotificationCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.propertymappingsNotificationCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * NotificationWebhookMapping Viewset
     */
    propertymappingsNotificationDestroyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
                throw new runtime.RequiredError('pmUuid', 'Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsNotificationDestroy.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/propertymappings/notification/{pm_uuid}/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * NotificationWebhookMapping Viewset
     */
    propertymappingsNotificationDestroy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.propertymappingsNotificationDestroyRaw(requestParameters, initOverrides);
        });
    }
    /**
     * NotificationWebhookMapping Viewset
     */
    propertymappingsNotificationListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.name !== undefined) {
                queryParameters['name'] = requestParameters.name;
            }
            if (requestParameters.ordering !== undefined) {
                queryParameters['ordering'] = requestParameters.ordering;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.pageSize !== undefined) {
                queryParameters['page_size'] = requestParameters.pageSize;
            }
            if (requestParameters.search !== undefined) {
                queryParameters['search'] = requestParameters.search;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/propertymappings/notification/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedNotificationWebhookMappingListFromJSON(jsonValue));
        });
    }
    /**
     * NotificationWebhookMapping Viewset
     */
    propertymappingsNotificationList(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.propertymappingsNotificationListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * NotificationWebhookMapping Viewset
     */
    propertymappingsNotificationPartialUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
                throw new runtime.RequiredError('pmUuid', 'Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsNotificationPartialUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/propertymappings/notification/{pm_uuid}/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: PatchedNotificationWebhookMappingRequestToJSON(requestParameters.patchedNotificationWebhookMappingRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => NotificationWebhookMappingFromJSON(jsonValue));
        });
    }
    /**
     * NotificationWebhookMapping Viewset
     */
    propertymappingsNotificationPartialUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.propertymappingsNotificationPartialUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * NotificationWebhookMapping Viewset
     */
    propertymappingsNotificationRetrieveRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
                throw new runtime.RequiredError('pmUuid', 'Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsNotificationRetrieve.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/propertymappings/notification/{pm_uuid}/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => NotificationWebhookMappingFromJSON(jsonValue));
        });
    }
    /**
     * NotificationWebhookMapping Viewset
     */
    propertymappingsNotificationRetrieve(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.propertymappingsNotificationRetrieveRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * NotificationWebhookMapping Viewset
     */
    propertymappingsNotificationUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
                throw new runtime.RequiredError('pmUuid', 'Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsNotificationUpdate.');
            }
            if (requestParameters.notificationWebhookMappingRequest === null || requestParameters.notificationWebhookMappingRequest === undefined) {
                throw new runtime.RequiredError('notificationWebhookMappingRequest', 'Required parameter requestParameters.notificationWebhookMappingRequest was null or undefined when calling propertymappingsNotificationUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/propertymappings/notification/{pm_uuid}/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: NotificationWebhookMappingRequestToJSON(requestParameters.notificationWebhookMappingRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => NotificationWebhookMappingFromJSON(jsonValue));
        });
    }
    /**
     * NotificationWebhookMapping Viewset
     */
    propertymappingsNotificationUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.propertymappingsNotificationUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of all objects that use this object
     */
    propertymappingsNotificationUsedByListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
                throw new runtime.RequiredError('pmUuid', 'Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsNotificationUsedByList.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/propertymappings/notification/{pm_uuid}/used_by/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
        });
    }
    /**
     * Get a list of all objects that use this object
     */
    propertymappingsNotificationUsedByList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.propertymappingsNotificationUsedByListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * RACPropertyMapping Viewset
     */
    propertymappingsRacCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.rACPropertyMappingRequest === null || requestParameters.rACPropertyMappingRequest === undefined) {
                throw new runtime.RequiredError('rACPropertyMappingRequest', 'Required parameter requestParameters.rACPropertyMappingRequest was null or undefined when calling propertymappingsRacCreate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/propertymappings/rac/`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: RACPropertyMappingRequestToJSON(requestParameters.rACPropertyMappingRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => RACPropertyMappingFromJSON(jsonValue));
        });
    }
    /**
     * RACPropertyMapping Viewset
     */
    propertymappingsRacCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.propertymappingsRacCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * RACPropertyMapping Viewset
     */
    propertymappingsRacDestroyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
                throw new runtime.RequiredError('pmUuid', 'Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsRacDestroy.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/propertymappings/rac/{pm_uuid}/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * RACPropertyMapping Viewset
     */
    propertymappingsRacDestroy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.propertymappingsRacDestroyRaw(requestParameters, initOverrides);
        });
    }
    /**
     * RACPropertyMapping Viewset
     */
    propertymappingsRacListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.managed) {
                queryParameters['managed'] = requestParameters.managed;
            }
            if (requestParameters.name !== undefined) {
                queryParameters['name'] = requestParameters.name;
            }
            if (requestParameters.ordering !== undefined) {
                queryParameters['ordering'] = requestParameters.ordering;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.pageSize !== undefined) {
                queryParameters['page_size'] = requestParameters.pageSize;
            }
            if (requestParameters.search !== undefined) {
                queryParameters['search'] = requestParameters.search;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/propertymappings/rac/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedRACPropertyMappingListFromJSON(jsonValue));
        });
    }
    /**
     * RACPropertyMapping Viewset
     */
    propertymappingsRacList(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.propertymappingsRacListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * RACPropertyMapping Viewset
     */
    propertymappingsRacPartialUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
                throw new runtime.RequiredError('pmUuid', 'Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsRacPartialUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/propertymappings/rac/{pm_uuid}/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: PatchedRACPropertyMappingRequestToJSON(requestParameters.patchedRACPropertyMappingRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => RACPropertyMappingFromJSON(jsonValue));
        });
    }
    /**
     * RACPropertyMapping Viewset
     */
    propertymappingsRacPartialUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.propertymappingsRacPartialUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * RACPropertyMapping Viewset
     */
    propertymappingsRacRetrieveRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
                throw new runtime.RequiredError('pmUuid', 'Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsRacRetrieve.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/propertymappings/rac/{pm_uuid}/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => RACPropertyMappingFromJSON(jsonValue));
        });
    }
    /**
     * RACPropertyMapping Viewset
     */
    propertymappingsRacRetrieve(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.propertymappingsRacRetrieveRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * RACPropertyMapping Viewset
     */
    propertymappingsRacUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
                throw new runtime.RequiredError('pmUuid', 'Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsRacUpdate.');
            }
            if (requestParameters.rACPropertyMappingRequest === null || requestParameters.rACPropertyMappingRequest === undefined) {
                throw new runtime.RequiredError('rACPropertyMappingRequest', 'Required parameter requestParameters.rACPropertyMappingRequest was null or undefined when calling propertymappingsRacUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/propertymappings/rac/{pm_uuid}/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: RACPropertyMappingRequestToJSON(requestParameters.rACPropertyMappingRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => RACPropertyMappingFromJSON(jsonValue));
        });
    }
    /**
     * RACPropertyMapping Viewset
     */
    propertymappingsRacUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.propertymappingsRacUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of all objects that use this object
     */
    propertymappingsRacUsedByListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
                throw new runtime.RequiredError('pmUuid', 'Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsRacUsedByList.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/propertymappings/rac/{pm_uuid}/used_by/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
        });
    }
    /**
     * Get a list of all objects that use this object
     */
    propertymappingsRacUsedByList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.propertymappingsRacUsedByListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * SAMLPropertyMapping Viewset
     */
    propertymappingsSamlCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.sAMLPropertyMappingRequest === null || requestParameters.sAMLPropertyMappingRequest === undefined) {
                throw new runtime.RequiredError('sAMLPropertyMappingRequest', 'Required parameter requestParameters.sAMLPropertyMappingRequest was null or undefined when calling propertymappingsSamlCreate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/propertymappings/saml/`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: SAMLPropertyMappingRequestToJSON(requestParameters.sAMLPropertyMappingRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => SAMLPropertyMappingFromJSON(jsonValue));
        });
    }
    /**
     * SAMLPropertyMapping Viewset
     */
    propertymappingsSamlCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.propertymappingsSamlCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * SAMLPropertyMapping Viewset
     */
    propertymappingsSamlDestroyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
                throw new runtime.RequiredError('pmUuid', 'Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsSamlDestroy.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/propertymappings/saml/{pm_uuid}/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * SAMLPropertyMapping Viewset
     */
    propertymappingsSamlDestroy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.propertymappingsSamlDestroyRaw(requestParameters, initOverrides);
        });
    }
    /**
     * SAMLPropertyMapping Viewset
     */
    propertymappingsSamlListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.expression !== undefined) {
                queryParameters['expression'] = requestParameters.expression;
            }
            if (requestParameters.friendlyName !== undefined) {
                queryParameters['friendly_name'] = requestParameters.friendlyName;
            }
            if (requestParameters.managed) {
                queryParameters['managed'] = requestParameters.managed;
            }
            if (requestParameters.name !== undefined) {
                queryParameters['name'] = requestParameters.name;
            }
            if (requestParameters.ordering !== undefined) {
                queryParameters['ordering'] = requestParameters.ordering;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.pageSize !== undefined) {
                queryParameters['page_size'] = requestParameters.pageSize;
            }
            if (requestParameters.pmUuid !== undefined) {
                queryParameters['pm_uuid'] = requestParameters.pmUuid;
            }
            if (requestParameters.samlName !== undefined) {
                queryParameters['saml_name'] = requestParameters.samlName;
            }
            if (requestParameters.search !== undefined) {
                queryParameters['search'] = requestParameters.search;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/propertymappings/saml/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedSAMLPropertyMappingListFromJSON(jsonValue));
        });
    }
    /**
     * SAMLPropertyMapping Viewset
     */
    propertymappingsSamlList(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.propertymappingsSamlListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * SAMLPropertyMapping Viewset
     */
    propertymappingsSamlPartialUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
                throw new runtime.RequiredError('pmUuid', 'Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsSamlPartialUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/propertymappings/saml/{pm_uuid}/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: PatchedSAMLPropertyMappingRequestToJSON(requestParameters.patchedSAMLPropertyMappingRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => SAMLPropertyMappingFromJSON(jsonValue));
        });
    }
    /**
     * SAMLPropertyMapping Viewset
     */
    propertymappingsSamlPartialUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.propertymappingsSamlPartialUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * SAMLPropertyMapping Viewset
     */
    propertymappingsSamlRetrieveRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
                throw new runtime.RequiredError('pmUuid', 'Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsSamlRetrieve.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/propertymappings/saml/{pm_uuid}/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => SAMLPropertyMappingFromJSON(jsonValue));
        });
    }
    /**
     * SAMLPropertyMapping Viewset
     */
    propertymappingsSamlRetrieve(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.propertymappingsSamlRetrieveRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * SAMLPropertyMapping Viewset
     */
    propertymappingsSamlUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
                throw new runtime.RequiredError('pmUuid', 'Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsSamlUpdate.');
            }
            if (requestParameters.sAMLPropertyMappingRequest === null || requestParameters.sAMLPropertyMappingRequest === undefined) {
                throw new runtime.RequiredError('sAMLPropertyMappingRequest', 'Required parameter requestParameters.sAMLPropertyMappingRequest was null or undefined when calling propertymappingsSamlUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/propertymappings/saml/{pm_uuid}/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: SAMLPropertyMappingRequestToJSON(requestParameters.sAMLPropertyMappingRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => SAMLPropertyMappingFromJSON(jsonValue));
        });
    }
    /**
     * SAMLPropertyMapping Viewset
     */
    propertymappingsSamlUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.propertymappingsSamlUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of all objects that use this object
     */
    propertymappingsSamlUsedByListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
                throw new runtime.RequiredError('pmUuid', 'Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsSamlUsedByList.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/propertymappings/saml/{pm_uuid}/used_by/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
        });
    }
    /**
     * Get a list of all objects that use this object
     */
    propertymappingsSamlUsedByList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.propertymappingsSamlUsedByListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * SCIMMapping Viewset
     */
    propertymappingsScimCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.sCIMMappingRequest === null || requestParameters.sCIMMappingRequest === undefined) {
                throw new runtime.RequiredError('sCIMMappingRequest', 'Required parameter requestParameters.sCIMMappingRequest was null or undefined when calling propertymappingsScimCreate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/propertymappings/scim/`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: SCIMMappingRequestToJSON(requestParameters.sCIMMappingRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => SCIMMappingFromJSON(jsonValue));
        });
    }
    /**
     * SCIMMapping Viewset
     */
    propertymappingsScimCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.propertymappingsScimCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * SCIMMapping Viewset
     */
    propertymappingsScimDestroyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
                throw new runtime.RequiredError('pmUuid', 'Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsScimDestroy.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/propertymappings/scim/{pm_uuid}/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * SCIMMapping Viewset
     */
    propertymappingsScimDestroy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.propertymappingsScimDestroyRaw(requestParameters, initOverrides);
        });
    }
    /**
     * SCIMMapping Viewset
     */
    propertymappingsScimListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.expression !== undefined) {
                queryParameters['expression'] = requestParameters.expression;
            }
            if (requestParameters.managed) {
                queryParameters['managed'] = requestParameters.managed;
            }
            if (requestParameters.name !== undefined) {
                queryParameters['name'] = requestParameters.name;
            }
            if (requestParameters.ordering !== undefined) {
                queryParameters['ordering'] = requestParameters.ordering;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.pageSize !== undefined) {
                queryParameters['page_size'] = requestParameters.pageSize;
            }
            if (requestParameters.pmUuid !== undefined) {
                queryParameters['pm_uuid'] = requestParameters.pmUuid;
            }
            if (requestParameters.search !== undefined) {
                queryParameters['search'] = requestParameters.search;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/propertymappings/scim/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedSCIMMappingListFromJSON(jsonValue));
        });
    }
    /**
     * SCIMMapping Viewset
     */
    propertymappingsScimList(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.propertymappingsScimListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * SCIMMapping Viewset
     */
    propertymappingsScimPartialUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
                throw new runtime.RequiredError('pmUuid', 'Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsScimPartialUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/propertymappings/scim/{pm_uuid}/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: PatchedSCIMMappingRequestToJSON(requestParameters.patchedSCIMMappingRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => SCIMMappingFromJSON(jsonValue));
        });
    }
    /**
     * SCIMMapping Viewset
     */
    propertymappingsScimPartialUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.propertymappingsScimPartialUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * SCIMMapping Viewset
     */
    propertymappingsScimRetrieveRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
                throw new runtime.RequiredError('pmUuid', 'Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsScimRetrieve.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/propertymappings/scim/{pm_uuid}/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => SCIMMappingFromJSON(jsonValue));
        });
    }
    /**
     * SCIMMapping Viewset
     */
    propertymappingsScimRetrieve(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.propertymappingsScimRetrieveRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * SCIMMapping Viewset
     */
    propertymappingsScimUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
                throw new runtime.RequiredError('pmUuid', 'Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsScimUpdate.');
            }
            if (requestParameters.sCIMMappingRequest === null || requestParameters.sCIMMappingRequest === undefined) {
                throw new runtime.RequiredError('sCIMMappingRequest', 'Required parameter requestParameters.sCIMMappingRequest was null or undefined when calling propertymappingsScimUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/propertymappings/scim/{pm_uuid}/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: SCIMMappingRequestToJSON(requestParameters.sCIMMappingRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => SCIMMappingFromJSON(jsonValue));
        });
    }
    /**
     * SCIMMapping Viewset
     */
    propertymappingsScimUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.propertymappingsScimUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of all objects that use this object
     */
    propertymappingsScimUsedByListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
                throw new runtime.RequiredError('pmUuid', 'Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsScimUsedByList.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/propertymappings/scim/{pm_uuid}/used_by/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
        });
    }
    /**
     * Get a list of all objects that use this object
     */
    propertymappingsScimUsedByList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.propertymappingsScimUsedByListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * ScopeMapping Viewset
     */
    propertymappingsScopeCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.scopeMappingRequest === null || requestParameters.scopeMappingRequest === undefined) {
                throw new runtime.RequiredError('scopeMappingRequest', 'Required parameter requestParameters.scopeMappingRequest was null or undefined when calling propertymappingsScopeCreate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/propertymappings/scope/`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: ScopeMappingRequestToJSON(requestParameters.scopeMappingRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => ScopeMappingFromJSON(jsonValue));
        });
    }
    /**
     * ScopeMapping Viewset
     */
    propertymappingsScopeCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.propertymappingsScopeCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * ScopeMapping Viewset
     */
    propertymappingsScopeDestroyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
                throw new runtime.RequiredError('pmUuid', 'Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsScopeDestroy.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/propertymappings/scope/{pm_uuid}/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * ScopeMapping Viewset
     */
    propertymappingsScopeDestroy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.propertymappingsScopeDestroyRaw(requestParameters, initOverrides);
        });
    }
    /**
     * ScopeMapping Viewset
     */
    propertymappingsScopeListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.managed) {
                queryParameters['managed'] = requestParameters.managed;
            }
            if (requestParameters.name !== undefined) {
                queryParameters['name'] = requestParameters.name;
            }
            if (requestParameters.ordering !== undefined) {
                queryParameters['ordering'] = requestParameters.ordering;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.pageSize !== undefined) {
                queryParameters['page_size'] = requestParameters.pageSize;
            }
            if (requestParameters.scopeName !== undefined) {
                queryParameters['scope_name'] = requestParameters.scopeName;
            }
            if (requestParameters.search !== undefined) {
                queryParameters['search'] = requestParameters.search;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/propertymappings/scope/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedScopeMappingListFromJSON(jsonValue));
        });
    }
    /**
     * ScopeMapping Viewset
     */
    propertymappingsScopeList(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.propertymappingsScopeListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * ScopeMapping Viewset
     */
    propertymappingsScopePartialUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
                throw new runtime.RequiredError('pmUuid', 'Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsScopePartialUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/propertymappings/scope/{pm_uuid}/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: PatchedScopeMappingRequestToJSON(requestParameters.patchedScopeMappingRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => ScopeMappingFromJSON(jsonValue));
        });
    }
    /**
     * ScopeMapping Viewset
     */
    propertymappingsScopePartialUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.propertymappingsScopePartialUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * ScopeMapping Viewset
     */
    propertymappingsScopeRetrieveRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
                throw new runtime.RequiredError('pmUuid', 'Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsScopeRetrieve.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/propertymappings/scope/{pm_uuid}/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => ScopeMappingFromJSON(jsonValue));
        });
    }
    /**
     * ScopeMapping Viewset
     */
    propertymappingsScopeRetrieve(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.propertymappingsScopeRetrieveRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * ScopeMapping Viewset
     */
    propertymappingsScopeUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
                throw new runtime.RequiredError('pmUuid', 'Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsScopeUpdate.');
            }
            if (requestParameters.scopeMappingRequest === null || requestParameters.scopeMappingRequest === undefined) {
                throw new runtime.RequiredError('scopeMappingRequest', 'Required parameter requestParameters.scopeMappingRequest was null or undefined when calling propertymappingsScopeUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/propertymappings/scope/{pm_uuid}/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: ScopeMappingRequestToJSON(requestParameters.scopeMappingRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => ScopeMappingFromJSON(jsonValue));
        });
    }
    /**
     * ScopeMapping Viewset
     */
    propertymappingsScopeUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.propertymappingsScopeUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of all objects that use this object
     */
    propertymappingsScopeUsedByListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
                throw new runtime.RequiredError('pmUuid', 'Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsScopeUsedByList.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/propertymappings/scope/{pm_uuid}/used_by/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
        });
    }
    /**
     * Get a list of all objects that use this object
     */
    propertymappingsScopeUsedByList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.propertymappingsScopeUsedByListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
