/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  AuthenticateWebAuthnStage,
  AuthenticateWebAuthnStageRequest,
  AuthenticatorDuoStage,
  AuthenticatorDuoStageDeviceImportResponse,
  AuthenticatorDuoStageManualDeviceImportRequest,
  AuthenticatorDuoStageRequest,
  AuthenticatorSMSStage,
  AuthenticatorSMSStageRequest,
  AuthenticatorStaticStage,
  AuthenticatorStaticStageRequest,
  AuthenticatorTOTPStage,
  AuthenticatorTOTPStageRequest,
  AuthenticatorValidateStage,
  AuthenticatorValidateStageRequest,
  CaptchaStage,
  CaptchaStageRequest,
  ConsentStage,
  ConsentStageRequest,
  DenyStage,
  DenyStageRequest,
  DummyStage,
  DummyStageRequest,
  DuoDeviceEnrollmentStatus,
  EmailStage,
  EmailStageRequest,
  ExtAuthStage,
  ExtAuthStageRequest,
  GenericError,
  IdentificationStage,
  IdentificationStageRequest,
  Invitation,
  InvitationRequest,
  InvitationStage,
  InvitationStageRequest,
  PaginatedAuthenticateWebAuthnStageList,
  PaginatedAuthenticatorDuoStageList,
  PaginatedAuthenticatorSMSStageList,
  PaginatedAuthenticatorStaticStageList,
  PaginatedAuthenticatorTOTPStageList,
  PaginatedAuthenticatorValidateStageList,
  PaginatedCaptchaStageList,
  PaginatedConsentStageList,
  PaginatedDenyStageList,
  PaginatedDummyStageList,
  PaginatedEmailStageList,
  PaginatedExtAuthStageList,
  PaginatedIdentificationStageList,
  PaginatedInvitationList,
  PaginatedInvitationStageList,
  PaginatedPasswordStageList,
  PaginatedPromptList,
  PaginatedPromptStageList,
  PaginatedStageList,
  PaginatedUserDeleteStageList,
  PaginatedUserLoginStageList,
  PaginatedUserLogoutStageList,
  PaginatedUserWriteStageList,
  PasswordStage,
  PasswordStageRequest,
  PatchedAuthenticateWebAuthnStageRequest,
  PatchedAuthenticatorDuoStageRequest,
  PatchedAuthenticatorSMSStageRequest,
  PatchedAuthenticatorStaticStageRequest,
  PatchedAuthenticatorTOTPStageRequest,
  PatchedAuthenticatorValidateStageRequest,
  PatchedCaptchaStageRequest,
  PatchedConsentStageRequest,
  PatchedDenyStageRequest,
  PatchedDummyStageRequest,
  PatchedEmailStageRequest,
  PatchedExtAuthStageRequest,
  PatchedIdentificationStageRequest,
  PatchedInvitationRequest,
  PatchedInvitationStageRequest,
  PatchedPasswordStageRequest,
  PatchedPromptRequest,
  PatchedPromptStageRequest,
  PatchedUserDeleteStageRequest,
  PatchedUserLoginStageRequest,
  PatchedUserLogoutStageRequest,
  PatchedUserWriteStageRequest,
  Prompt,
  PromptChallenge,
  PromptRequest,
  PromptStage,
  PromptStageRequest,
  Stage,
  TypeCreate,
  UsedBy,
  UserDeleteStage,
  UserDeleteStageRequest,
  UserLoginStage,
  UserLoginStageRequest,
  UserLogoutStage,
  UserLogoutStageRequest,
  UserSetting,
  UserWriteStage,
  UserWriteStageRequest,
  ValidationError,
} from '../models';
import {
    AuthenticateWebAuthnStageFromJSON,
    AuthenticateWebAuthnStageToJSON,
    AuthenticateWebAuthnStageRequestFromJSON,
    AuthenticateWebAuthnStageRequestToJSON,
    AuthenticatorDuoStageFromJSON,
    AuthenticatorDuoStageToJSON,
    AuthenticatorDuoStageDeviceImportResponseFromJSON,
    AuthenticatorDuoStageDeviceImportResponseToJSON,
    AuthenticatorDuoStageManualDeviceImportRequestFromJSON,
    AuthenticatorDuoStageManualDeviceImportRequestToJSON,
    AuthenticatorDuoStageRequestFromJSON,
    AuthenticatorDuoStageRequestToJSON,
    AuthenticatorSMSStageFromJSON,
    AuthenticatorSMSStageToJSON,
    AuthenticatorSMSStageRequestFromJSON,
    AuthenticatorSMSStageRequestToJSON,
    AuthenticatorStaticStageFromJSON,
    AuthenticatorStaticStageToJSON,
    AuthenticatorStaticStageRequestFromJSON,
    AuthenticatorStaticStageRequestToJSON,
    AuthenticatorTOTPStageFromJSON,
    AuthenticatorTOTPStageToJSON,
    AuthenticatorTOTPStageRequestFromJSON,
    AuthenticatorTOTPStageRequestToJSON,
    AuthenticatorValidateStageFromJSON,
    AuthenticatorValidateStageToJSON,
    AuthenticatorValidateStageRequestFromJSON,
    AuthenticatorValidateStageRequestToJSON,
    CaptchaStageFromJSON,
    CaptchaStageToJSON,
    CaptchaStageRequestFromJSON,
    CaptchaStageRequestToJSON,
    ConsentStageFromJSON,
    ConsentStageToJSON,
    ConsentStageRequestFromJSON,
    ConsentStageRequestToJSON,
    DenyStageFromJSON,
    DenyStageToJSON,
    DenyStageRequestFromJSON,
    DenyStageRequestToJSON,
    DummyStageFromJSON,
    DummyStageToJSON,
    DummyStageRequestFromJSON,
    DummyStageRequestToJSON,
    DuoDeviceEnrollmentStatusFromJSON,
    DuoDeviceEnrollmentStatusToJSON,
    EmailStageFromJSON,
    EmailStageToJSON,
    EmailStageRequestFromJSON,
    EmailStageRequestToJSON,
    ExtAuthStageFromJSON,
    ExtAuthStageToJSON,
    ExtAuthStageRequestFromJSON,
    ExtAuthStageRequestToJSON,
    GenericErrorFromJSON,
    GenericErrorToJSON,
    IdentificationStageFromJSON,
    IdentificationStageToJSON,
    IdentificationStageRequestFromJSON,
    IdentificationStageRequestToJSON,
    InvitationFromJSON,
    InvitationToJSON,
    InvitationRequestFromJSON,
    InvitationRequestToJSON,
    InvitationStageFromJSON,
    InvitationStageToJSON,
    InvitationStageRequestFromJSON,
    InvitationStageRequestToJSON,
    PaginatedAuthenticateWebAuthnStageListFromJSON,
    PaginatedAuthenticateWebAuthnStageListToJSON,
    PaginatedAuthenticatorDuoStageListFromJSON,
    PaginatedAuthenticatorDuoStageListToJSON,
    PaginatedAuthenticatorSMSStageListFromJSON,
    PaginatedAuthenticatorSMSStageListToJSON,
    PaginatedAuthenticatorStaticStageListFromJSON,
    PaginatedAuthenticatorStaticStageListToJSON,
    PaginatedAuthenticatorTOTPStageListFromJSON,
    PaginatedAuthenticatorTOTPStageListToJSON,
    PaginatedAuthenticatorValidateStageListFromJSON,
    PaginatedAuthenticatorValidateStageListToJSON,
    PaginatedCaptchaStageListFromJSON,
    PaginatedCaptchaStageListToJSON,
    PaginatedConsentStageListFromJSON,
    PaginatedConsentStageListToJSON,
    PaginatedDenyStageListFromJSON,
    PaginatedDenyStageListToJSON,
    PaginatedDummyStageListFromJSON,
    PaginatedDummyStageListToJSON,
    PaginatedEmailStageListFromJSON,
    PaginatedEmailStageListToJSON,
    PaginatedExtAuthStageListFromJSON,
    PaginatedExtAuthStageListToJSON,
    PaginatedIdentificationStageListFromJSON,
    PaginatedIdentificationStageListToJSON,
    PaginatedInvitationListFromJSON,
    PaginatedInvitationListToJSON,
    PaginatedInvitationStageListFromJSON,
    PaginatedInvitationStageListToJSON,
    PaginatedPasswordStageListFromJSON,
    PaginatedPasswordStageListToJSON,
    PaginatedPromptListFromJSON,
    PaginatedPromptListToJSON,
    PaginatedPromptStageListFromJSON,
    PaginatedPromptStageListToJSON,
    PaginatedStageListFromJSON,
    PaginatedStageListToJSON,
    PaginatedUserDeleteStageListFromJSON,
    PaginatedUserDeleteStageListToJSON,
    PaginatedUserLoginStageListFromJSON,
    PaginatedUserLoginStageListToJSON,
    PaginatedUserLogoutStageListFromJSON,
    PaginatedUserLogoutStageListToJSON,
    PaginatedUserWriteStageListFromJSON,
    PaginatedUserWriteStageListToJSON,
    PasswordStageFromJSON,
    PasswordStageToJSON,
    PasswordStageRequestFromJSON,
    PasswordStageRequestToJSON,
    PatchedAuthenticateWebAuthnStageRequestFromJSON,
    PatchedAuthenticateWebAuthnStageRequestToJSON,
    PatchedAuthenticatorDuoStageRequestFromJSON,
    PatchedAuthenticatorDuoStageRequestToJSON,
    PatchedAuthenticatorSMSStageRequestFromJSON,
    PatchedAuthenticatorSMSStageRequestToJSON,
    PatchedAuthenticatorStaticStageRequestFromJSON,
    PatchedAuthenticatorStaticStageRequestToJSON,
    PatchedAuthenticatorTOTPStageRequestFromJSON,
    PatchedAuthenticatorTOTPStageRequestToJSON,
    PatchedAuthenticatorValidateStageRequestFromJSON,
    PatchedAuthenticatorValidateStageRequestToJSON,
    PatchedCaptchaStageRequestFromJSON,
    PatchedCaptchaStageRequestToJSON,
    PatchedConsentStageRequestFromJSON,
    PatchedConsentStageRequestToJSON,
    PatchedDenyStageRequestFromJSON,
    PatchedDenyStageRequestToJSON,
    PatchedDummyStageRequestFromJSON,
    PatchedDummyStageRequestToJSON,
    PatchedEmailStageRequestFromJSON,
    PatchedEmailStageRequestToJSON,
    PatchedExtAuthStageRequestFromJSON,
    PatchedExtAuthStageRequestToJSON,
    PatchedIdentificationStageRequestFromJSON,
    PatchedIdentificationStageRequestToJSON,
    PatchedInvitationRequestFromJSON,
    PatchedInvitationRequestToJSON,
    PatchedInvitationStageRequestFromJSON,
    PatchedInvitationStageRequestToJSON,
    PatchedPasswordStageRequestFromJSON,
    PatchedPasswordStageRequestToJSON,
    PatchedPromptRequestFromJSON,
    PatchedPromptRequestToJSON,
    PatchedPromptStageRequestFromJSON,
    PatchedPromptStageRequestToJSON,
    PatchedUserDeleteStageRequestFromJSON,
    PatchedUserDeleteStageRequestToJSON,
    PatchedUserLoginStageRequestFromJSON,
    PatchedUserLoginStageRequestToJSON,
    PatchedUserLogoutStageRequestFromJSON,
    PatchedUserLogoutStageRequestToJSON,
    PatchedUserWriteStageRequestFromJSON,
    PatchedUserWriteStageRequestToJSON,
    PromptFromJSON,
    PromptToJSON,
    PromptChallengeFromJSON,
    PromptChallengeToJSON,
    PromptRequestFromJSON,
    PromptRequestToJSON,
    PromptStageFromJSON,
    PromptStageToJSON,
    PromptStageRequestFromJSON,
    PromptStageRequestToJSON,
    StageFromJSON,
    StageToJSON,
    TypeCreateFromJSON,
    TypeCreateToJSON,
    UsedByFromJSON,
    UsedByToJSON,
    UserDeleteStageFromJSON,
    UserDeleteStageToJSON,
    UserDeleteStageRequestFromJSON,
    UserDeleteStageRequestToJSON,
    UserLoginStageFromJSON,
    UserLoginStageToJSON,
    UserLoginStageRequestFromJSON,
    UserLoginStageRequestToJSON,
    UserLogoutStageFromJSON,
    UserLogoutStageToJSON,
    UserLogoutStageRequestFromJSON,
    UserLogoutStageRequestToJSON,
    UserSettingFromJSON,
    UserSettingToJSON,
    UserWriteStageFromJSON,
    UserWriteStageToJSON,
    UserWriteStageRequestFromJSON,
    UserWriteStageRequestToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models';

export interface StagesAllDestroyRequest {
    stageUuid: string;
}

export interface StagesAllListRequest {
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
}

export interface StagesAllRetrieveRequest {
    stageUuid: string;
}

export interface StagesAllUsedByListRequest {
    stageUuid: string;
}

export interface StagesAuthenticatorDuoCreateRequest {
    authenticatorDuoStageRequest: AuthenticatorDuoStageRequest;
}

export interface StagesAuthenticatorDuoDestroyRequest {
    stageUuid: string;
}

export interface StagesAuthenticatorDuoEnrollmentStatusCreateRequest {
    stageUuid: string;
}

export interface StagesAuthenticatorDuoImportDeviceManualCreateRequest {
    stageUuid: string;
    authenticatorDuoStageManualDeviceImportRequest: AuthenticatorDuoStageManualDeviceImportRequest;
}

export interface StagesAuthenticatorDuoImportDevicesAutomaticCreateRequest {
    stageUuid: string;
}

export interface StagesAuthenticatorDuoListRequest {
    apiHostname?: string;
    clientId?: string;
    configureFlow?: string;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
}

export interface StagesAuthenticatorDuoPartialUpdateRequest {
    stageUuid: string;
    patchedAuthenticatorDuoStageRequest?: PatchedAuthenticatorDuoStageRequest;
}

export interface StagesAuthenticatorDuoRetrieveRequest {
    stageUuid: string;
}

export interface StagesAuthenticatorDuoUpdateRequest {
    stageUuid: string;
    authenticatorDuoStageRequest: AuthenticatorDuoStageRequest;
}

export interface StagesAuthenticatorDuoUsedByListRequest {
    stageUuid: string;
}

export interface StagesAuthenticatorSmsCreateRequest {
    authenticatorSMSStageRequest: AuthenticatorSMSStageRequest;
}

export interface StagesAuthenticatorSmsDestroyRequest {
    stageUuid: string;
}

export interface StagesAuthenticatorSmsListRequest {
    accountSid?: string;
    auth?: string;
    authPassword?: string;
    authType?: StagesAuthenticatorSmsListAuthTypeEnum;
    configureFlow?: string;
    friendlyName?: string;
    fromNumber?: string;
    mapping?: string;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    provider?: StagesAuthenticatorSmsListProviderEnum;
    search?: string;
    stageUuid?: string;
    verifyOnly?: boolean;
}

export interface StagesAuthenticatorSmsPartialUpdateRequest {
    stageUuid: string;
    patchedAuthenticatorSMSStageRequest?: PatchedAuthenticatorSMSStageRequest;
}

export interface StagesAuthenticatorSmsRetrieveRequest {
    stageUuid: string;
}

export interface StagesAuthenticatorSmsUpdateRequest {
    stageUuid: string;
    authenticatorSMSStageRequest: AuthenticatorSMSStageRequest;
}

export interface StagesAuthenticatorSmsUsedByListRequest {
    stageUuid: string;
}

export interface StagesAuthenticatorStaticCreateRequest {
    authenticatorStaticStageRequest: AuthenticatorStaticStageRequest;
}

export interface StagesAuthenticatorStaticDestroyRequest {
    stageUuid: string;
}

export interface StagesAuthenticatorStaticListRequest {
    configureFlow?: string;
    friendlyName?: string;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
    stageUuid?: string;
    tokenCount?: number;
    tokenLength?: number;
}

export interface StagesAuthenticatorStaticPartialUpdateRequest {
    stageUuid: string;
    patchedAuthenticatorStaticStageRequest?: PatchedAuthenticatorStaticStageRequest;
}

export interface StagesAuthenticatorStaticRetrieveRequest {
    stageUuid: string;
}

export interface StagesAuthenticatorStaticUpdateRequest {
    stageUuid: string;
    authenticatorStaticStageRequest: AuthenticatorStaticStageRequest;
}

export interface StagesAuthenticatorStaticUsedByListRequest {
    stageUuid: string;
}

export interface StagesAuthenticatorTotpCreateRequest {
    authenticatorTOTPStageRequest: AuthenticatorTOTPStageRequest;
}

export interface StagesAuthenticatorTotpDestroyRequest {
    stageUuid: string;
}

export interface StagesAuthenticatorTotpListRequest {
    configureFlow?: string;
    digits?: StagesAuthenticatorTotpListDigitsEnum;
    friendlyName?: string;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
    stageUuid?: string;
}

export interface StagesAuthenticatorTotpPartialUpdateRequest {
    stageUuid: string;
    patchedAuthenticatorTOTPStageRequest?: PatchedAuthenticatorTOTPStageRequest;
}

export interface StagesAuthenticatorTotpRetrieveRequest {
    stageUuid: string;
}

export interface StagesAuthenticatorTotpUpdateRequest {
    stageUuid: string;
    authenticatorTOTPStageRequest: AuthenticatorTOTPStageRequest;
}

export interface StagesAuthenticatorTotpUsedByListRequest {
    stageUuid: string;
}

export interface StagesAuthenticatorValidateCreateRequest {
    authenticatorValidateStageRequest: AuthenticatorValidateStageRequest;
}

export interface StagesAuthenticatorValidateDestroyRequest {
    stageUuid: string;
}

export interface StagesAuthenticatorValidateListRequest {
    configurationStages?: Array<string>;
    name?: string;
    notConfiguredAction?: StagesAuthenticatorValidateListNotConfiguredActionEnum;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
}

export interface StagesAuthenticatorValidatePartialUpdateRequest {
    stageUuid: string;
    patchedAuthenticatorValidateStageRequest?: PatchedAuthenticatorValidateStageRequest;
}

export interface StagesAuthenticatorValidateRetrieveRequest {
    stageUuid: string;
}

export interface StagesAuthenticatorValidateUpdateRequest {
    stageUuid: string;
    authenticatorValidateStageRequest: AuthenticatorValidateStageRequest;
}

export interface StagesAuthenticatorValidateUsedByListRequest {
    stageUuid: string;
}

export interface StagesAuthenticatorWebauthnCreateRequest {
    authenticateWebAuthnStageRequest: AuthenticateWebAuthnStageRequest;
}

export interface StagesAuthenticatorWebauthnDestroyRequest {
    stageUuid: string;
}

export interface StagesAuthenticatorWebauthnListRequest {
    authenticatorAttachment?: StagesAuthenticatorWebauthnListAuthenticatorAttachmentEnum;
    configureFlow?: string;
    friendlyName?: string;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    residentKeyRequirement?: StagesAuthenticatorWebauthnListResidentKeyRequirementEnum;
    search?: string;
    stageUuid?: string;
    userVerification?: StagesAuthenticatorWebauthnListUserVerificationEnum;
}

export interface StagesAuthenticatorWebauthnPartialUpdateRequest {
    stageUuid: string;
    patchedAuthenticateWebAuthnStageRequest?: PatchedAuthenticateWebAuthnStageRequest;
}

export interface StagesAuthenticatorWebauthnRetrieveRequest {
    stageUuid: string;
}

export interface StagesAuthenticatorWebauthnUpdateRequest {
    stageUuid: string;
    authenticateWebAuthnStageRequest: AuthenticateWebAuthnStageRequest;
}

export interface StagesAuthenticatorWebauthnUsedByListRequest {
    stageUuid: string;
}

export interface StagesCaptchaCreateRequest {
    captchaStageRequest: CaptchaStageRequest;
}

export interface StagesCaptchaDestroyRequest {
    stageUuid: string;
}

export interface StagesCaptchaListRequest {
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    publicKey?: string;
    search?: string;
}

export interface StagesCaptchaPartialUpdateRequest {
    stageUuid: string;
    patchedCaptchaStageRequest?: PatchedCaptchaStageRequest;
}

export interface StagesCaptchaRetrieveRequest {
    stageUuid: string;
}

export interface StagesCaptchaUpdateRequest {
    stageUuid: string;
    captchaStageRequest: CaptchaStageRequest;
}

export interface StagesCaptchaUsedByListRequest {
    stageUuid: string;
}

export interface StagesConsentCreateRequest {
    consentStageRequest: ConsentStageRequest;
}

export interface StagesConsentDestroyRequest {
    stageUuid: string;
}

export interface StagesConsentListRequest {
    consentExpireIn?: string;
    mode?: StagesConsentListModeEnum;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
    stageUuid?: string;
}

export interface StagesConsentPartialUpdateRequest {
    stageUuid: string;
    patchedConsentStageRequest?: PatchedConsentStageRequest;
}

export interface StagesConsentRetrieveRequest {
    stageUuid: string;
}

export interface StagesConsentUpdateRequest {
    stageUuid: string;
    consentStageRequest: ConsentStageRequest;
}

export interface StagesConsentUsedByListRequest {
    stageUuid: string;
}

export interface StagesDenyCreateRequest {
    denyStageRequest: DenyStageRequest;
}

export interface StagesDenyDestroyRequest {
    stageUuid: string;
}

export interface StagesDenyListRequest {
    denyMessage?: string;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
    stageUuid?: string;
}

export interface StagesDenyPartialUpdateRequest {
    stageUuid: string;
    patchedDenyStageRequest?: PatchedDenyStageRequest;
}

export interface StagesDenyRetrieveRequest {
    stageUuid: string;
}

export interface StagesDenyUpdateRequest {
    stageUuid: string;
    denyStageRequest: DenyStageRequest;
}

export interface StagesDenyUsedByListRequest {
    stageUuid: string;
}

export interface StagesDummyCreateRequest {
    dummyStageRequest: DummyStageRequest;
}

export interface StagesDummyDestroyRequest {
    stageUuid: string;
}

export interface StagesDummyListRequest {
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
    stageUuid?: string;
    throwError?: boolean;
}

export interface StagesDummyPartialUpdateRequest {
    stageUuid: string;
    patchedDummyStageRequest?: PatchedDummyStageRequest;
}

export interface StagesDummyRetrieveRequest {
    stageUuid: string;
}

export interface StagesDummyUpdateRequest {
    stageUuid: string;
    dummyStageRequest: DummyStageRequest;
}

export interface StagesDummyUsedByListRequest {
    stageUuid: string;
}

export interface StagesEmailCreateRequest {
    emailStageRequest: EmailStageRequest;
}

export interface StagesEmailDestroyRequest {
    stageUuid: string;
}

export interface StagesEmailListRequest {
    activateUserOnSuccess?: boolean;
    fromAddress?: string;
    host?: string;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    port?: number;
    search?: string;
    subject?: string;
    template?: string;
    timeout?: number;
    tokenExpiry?: number;
    useGlobalSettings?: boolean;
    useSsl?: boolean;
    useTls?: boolean;
    username?: string;
}

export interface StagesEmailPartialUpdateRequest {
    stageUuid: string;
    patchedEmailStageRequest?: PatchedEmailStageRequest;
}

export interface StagesEmailRetrieveRequest {
    stageUuid: string;
}

export interface StagesEmailUpdateRequest {
    stageUuid: string;
    emailStageRequest: EmailStageRequest;
}

export interface StagesEmailUsedByListRequest {
    stageUuid: string;
}

export interface StagesExtAuthCreateRequest {
    extAuthStageRequest: ExtAuthStageRequest;
}

export interface StagesExtAuthDestroyRequest {
    stageUuid: string;
}

export interface StagesExtAuthListRequest {
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
    stageUuid?: string;
}

export interface StagesExtAuthPartialUpdateRequest {
    stageUuid: string;
    patchedExtAuthStageRequest?: PatchedExtAuthStageRequest;
}

export interface StagesExtAuthRetrieveRequest {
    stageUuid: string;
}

export interface StagesExtAuthUpdateRequest {
    stageUuid: string;
    extAuthStageRequest: ExtAuthStageRequest;
}

export interface StagesExtAuthUsedByListRequest {
    stageUuid: string;
}

export interface StagesIdentificationCreateRequest {
    identificationStageRequest: IdentificationStageRequest;
}

export interface StagesIdentificationDestroyRequest {
    stageUuid: string;
}

export interface StagesIdentificationListRequest {
    caseInsensitiveMatching?: boolean;
    enrollmentFlow?: string;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    passwordStage?: string;
    passwordlessFlow?: string;
    recoveryFlow?: string;
    search?: string;
    showMatchedUser?: boolean;
    showSourceLabels?: boolean;
}

export interface StagesIdentificationPartialUpdateRequest {
    stageUuid: string;
    patchedIdentificationStageRequest?: PatchedIdentificationStageRequest;
}

export interface StagesIdentificationRetrieveRequest {
    stageUuid: string;
}

export interface StagesIdentificationUpdateRequest {
    stageUuid: string;
    identificationStageRequest: IdentificationStageRequest;
}

export interface StagesIdentificationUsedByListRequest {
    stageUuid: string;
}

export interface StagesInvitationInvitationsCreateRequest {
    invitationRequest: InvitationRequest;
}

export interface StagesInvitationInvitationsDestroyRequest {
    inviteUuid: string;
}

export interface StagesInvitationInvitationsListRequest {
    createdByUsername?: string;
    expires?: Date;
    flowSlug?: string;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
}

export interface StagesInvitationInvitationsPartialUpdateRequest {
    inviteUuid: string;
    patchedInvitationRequest?: PatchedInvitationRequest;
}

export interface StagesInvitationInvitationsRetrieveRequest {
    inviteUuid: string;
}

export interface StagesInvitationInvitationsUpdateRequest {
    inviteUuid: string;
    invitationRequest: InvitationRequest;
}

export interface StagesInvitationInvitationsUsedByListRequest {
    inviteUuid: string;
}

export interface StagesInvitationStagesCreateRequest {
    invitationStageRequest: InvitationStageRequest;
}

export interface StagesInvitationStagesDestroyRequest {
    stageUuid: string;
}

export interface StagesInvitationStagesListRequest {
    continueFlowWithoutInvitation?: boolean;
    name?: string;
    noFlows?: boolean;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
    stageUuid?: string;
}

export interface StagesInvitationStagesPartialUpdateRequest {
    stageUuid: string;
    patchedInvitationStageRequest?: PatchedInvitationStageRequest;
}

export interface StagesInvitationStagesRetrieveRequest {
    stageUuid: string;
}

export interface StagesInvitationStagesUpdateRequest {
    stageUuid: string;
    invitationStageRequest: InvitationStageRequest;
}

export interface StagesInvitationStagesUsedByListRequest {
    stageUuid: string;
}

export interface StagesPasswordCreateRequest {
    passwordStageRequest: PasswordStageRequest;
}

export interface StagesPasswordDestroyRequest {
    stageUuid: string;
}

export interface StagesPasswordListRequest {
    configureFlow?: string;
    failedAttemptsBeforeCancel?: number;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
}

export interface StagesPasswordPartialUpdateRequest {
    stageUuid: string;
    patchedPasswordStageRequest?: PatchedPasswordStageRequest;
}

export interface StagesPasswordRetrieveRequest {
    stageUuid: string;
}

export interface StagesPasswordUpdateRequest {
    stageUuid: string;
    passwordStageRequest: PasswordStageRequest;
}

export interface StagesPasswordUsedByListRequest {
    stageUuid: string;
}

export interface StagesPromptPromptsCreateRequest {
    promptRequest: PromptRequest;
}

export interface StagesPromptPromptsDestroyRequest {
    promptUuid: string;
}

export interface StagesPromptPromptsListRequest {
    fieldKey?: string;
    label?: string;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    placeholder?: string;
    search?: string;
    type?: StagesPromptPromptsListTypeEnum;
}

export interface StagesPromptPromptsPartialUpdateRequest {
    promptUuid: string;
    patchedPromptRequest?: PatchedPromptRequest;
}

export interface StagesPromptPromptsPreviewCreateRequest {
    promptRequest: PromptRequest;
}

export interface StagesPromptPromptsRetrieveRequest {
    promptUuid: string;
}

export interface StagesPromptPromptsUpdateRequest {
    promptUuid: string;
    promptRequest: PromptRequest;
}

export interface StagesPromptPromptsUsedByListRequest {
    promptUuid: string;
}

export interface StagesPromptStagesCreateRequest {
    promptStageRequest: PromptStageRequest;
}

export interface StagesPromptStagesDestroyRequest {
    stageUuid: string;
}

export interface StagesPromptStagesListRequest {
    fields?: Array<string>;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
    stageUuid?: string;
    validationPolicies?: Array<string>;
}

export interface StagesPromptStagesPartialUpdateRequest {
    stageUuid: string;
    patchedPromptStageRequest?: PatchedPromptStageRequest;
}

export interface StagesPromptStagesRetrieveRequest {
    stageUuid: string;
}

export interface StagesPromptStagesUpdateRequest {
    stageUuid: string;
    promptStageRequest: PromptStageRequest;
}

export interface StagesPromptStagesUsedByListRequest {
    stageUuid: string;
}

export interface StagesUserDeleteCreateRequest {
    userDeleteStageRequest: UserDeleteStageRequest;
}

export interface StagesUserDeleteDestroyRequest {
    stageUuid: string;
}

export interface StagesUserDeleteListRequest {
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
    stageUuid?: string;
}

export interface StagesUserDeletePartialUpdateRequest {
    stageUuid: string;
    patchedUserDeleteStageRequest?: PatchedUserDeleteStageRequest;
}

export interface StagesUserDeleteRetrieveRequest {
    stageUuid: string;
}

export interface StagesUserDeleteUpdateRequest {
    stageUuid: string;
    userDeleteStageRequest: UserDeleteStageRequest;
}

export interface StagesUserDeleteUsedByListRequest {
    stageUuid: string;
}

export interface StagesUserLoginCreateRequest {
    userLoginStageRequest: UserLoginStageRequest;
}

export interface StagesUserLoginDestroyRequest {
    stageUuid: string;
}

export interface StagesUserLoginListRequest {
    geoipBinding?: StagesUserLoginListGeoipBindingEnum;
    name?: string;
    networkBinding?: StagesUserLoginListNetworkBindingEnum;
    ordering?: string;
    page?: number;
    pageSize?: number;
    rememberMeOffset?: string;
    search?: string;
    sessionDuration?: string;
    stageUuid?: string;
    terminateOtherSessions?: boolean;
}

export interface StagesUserLoginPartialUpdateRequest {
    stageUuid: string;
    patchedUserLoginStageRequest?: PatchedUserLoginStageRequest;
}

export interface StagesUserLoginRetrieveRequest {
    stageUuid: string;
}

export interface StagesUserLoginUpdateRequest {
    stageUuid: string;
    userLoginStageRequest: UserLoginStageRequest;
}

export interface StagesUserLoginUsedByListRequest {
    stageUuid: string;
}

export interface StagesUserLogoutCreateRequest {
    userLogoutStageRequest: UserLogoutStageRequest;
}

export interface StagesUserLogoutDestroyRequest {
    stageUuid: string;
}

export interface StagesUserLogoutListRequest {
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
    stageUuid?: string;
}

export interface StagesUserLogoutPartialUpdateRequest {
    stageUuid: string;
    patchedUserLogoutStageRequest?: PatchedUserLogoutStageRequest;
}

export interface StagesUserLogoutRetrieveRequest {
    stageUuid: string;
}

export interface StagesUserLogoutUpdateRequest {
    stageUuid: string;
    userLogoutStageRequest: UserLogoutStageRequest;
}

export interface StagesUserLogoutUsedByListRequest {
    stageUuid: string;
}

export interface StagesUserWriteCreateRequest {
    userWriteStageRequest: UserWriteStageRequest;
}

export interface StagesUserWriteDestroyRequest {
    stageUuid: string;
}

export interface StagesUserWriteListRequest {
    createUsersAsInactive?: boolean;
    createUsersGroup?: string;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
    stageUuid?: string;
    userCreationMode?: StagesUserWriteListUserCreationModeEnum;
    userPathTemplate?: string;
    userType?: StagesUserWriteListUserTypeEnum;
}

export interface StagesUserWritePartialUpdateRequest {
    stageUuid: string;
    patchedUserWriteStageRequest?: PatchedUserWriteStageRequest;
}

export interface StagesUserWriteRetrieveRequest {
    stageUuid: string;
}

export interface StagesUserWriteUpdateRequest {
    stageUuid: string;
    userWriteStageRequest: UserWriteStageRequest;
}

export interface StagesUserWriteUsedByListRequest {
    stageUuid: string;
}

/**
 * 
 */
export class StagesApi extends runtime.BaseAPI {

    /**
     * Stage Viewset
     */
    async stagesAllDestroyRaw(requestParameters: StagesAllDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesAllDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/all/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Stage Viewset
     */
    async stagesAllDestroy(requestParameters: StagesAllDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.stagesAllDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Stage Viewset
     */
    async stagesAllListRaw(requestParameters: StagesAllListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedStageList>> {
        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/all/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedStageListFromJSON(jsonValue));
    }

    /**
     * Stage Viewset
     */
    async stagesAllList(requestParameters: StagesAllListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedStageList> {
        const response = await this.stagesAllListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Stage Viewset
     */
    async stagesAllRetrieveRaw(requestParameters: StagesAllRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Stage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesAllRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/all/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => StageFromJSON(jsonValue));
    }

    /**
     * Stage Viewset
     */
    async stagesAllRetrieve(requestParameters: StagesAllRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Stage> {
        const response = await this.stagesAllRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all creatable stage types
     */
    async stagesAllTypesListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TypeCreate>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/all/types/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TypeCreateFromJSON));
    }

    /**
     * Get all creatable stage types
     */
    async stagesAllTypesList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TypeCreate>> {
        const response = await this.stagesAllTypesListRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all objects that use this object
     */
    async stagesAllUsedByListRaw(requestParameters: StagesAllUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UsedBy>>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesAllUsedByList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/all/{stage_uuid}/used_by/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
    }

    /**
     * Get a list of all objects that use this object
     */
    async stagesAllUsedByList(requestParameters: StagesAllUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UsedBy>> {
        const response = await this.stagesAllUsedByListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all stages the user can configure
     */
    async stagesAllUserSettingsListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UserSetting>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/all/user_settings/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UserSettingFromJSON));
    }

    /**
     * Get all stages the user can configure
     */
    async stagesAllUserSettingsList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UserSetting>> {
        const response = await this.stagesAllUserSettingsListRaw(initOverrides);
        return await response.value();
    }

    /**
     * AuthenticatorDuoStage Viewset
     */
    async stagesAuthenticatorDuoCreateRaw(requestParameters: StagesAuthenticatorDuoCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticatorDuoStage>> {
        if (requestParameters.authenticatorDuoStageRequest === null || requestParameters.authenticatorDuoStageRequest === undefined) {
            throw new runtime.RequiredError('authenticatorDuoStageRequest','Required parameter requestParameters.authenticatorDuoStageRequest was null or undefined when calling stagesAuthenticatorDuoCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/authenticator/duo/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticatorDuoStageRequestToJSON(requestParameters.authenticatorDuoStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticatorDuoStageFromJSON(jsonValue));
    }

    /**
     * AuthenticatorDuoStage Viewset
     */
    async stagesAuthenticatorDuoCreate(requestParameters: StagesAuthenticatorDuoCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticatorDuoStage> {
        const response = await this.stagesAuthenticatorDuoCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * AuthenticatorDuoStage Viewset
     */
    async stagesAuthenticatorDuoDestroyRaw(requestParameters: StagesAuthenticatorDuoDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesAuthenticatorDuoDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/authenticator/duo/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * AuthenticatorDuoStage Viewset
     */
    async stagesAuthenticatorDuoDestroy(requestParameters: StagesAuthenticatorDuoDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.stagesAuthenticatorDuoDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Check enrollment status of user details in current session
     */
    async stagesAuthenticatorDuoEnrollmentStatusCreateRaw(requestParameters: StagesAuthenticatorDuoEnrollmentStatusCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DuoDeviceEnrollmentStatus>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesAuthenticatorDuoEnrollmentStatusCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/authenticator/duo/{stage_uuid}/enrollment_status/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DuoDeviceEnrollmentStatusFromJSON(jsonValue));
    }

    /**
     * Check enrollment status of user details in current session
     */
    async stagesAuthenticatorDuoEnrollmentStatusCreate(requestParameters: StagesAuthenticatorDuoEnrollmentStatusCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DuoDeviceEnrollmentStatus> {
        const response = await this.stagesAuthenticatorDuoEnrollmentStatusCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Import duo devices into authentik
     */
    async stagesAuthenticatorDuoImportDeviceManualCreateRaw(requestParameters: StagesAuthenticatorDuoImportDeviceManualCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesAuthenticatorDuoImportDeviceManualCreate.');
        }

        if (requestParameters.authenticatorDuoStageManualDeviceImportRequest === null || requestParameters.authenticatorDuoStageManualDeviceImportRequest === undefined) {
            throw new runtime.RequiredError('authenticatorDuoStageManualDeviceImportRequest','Required parameter requestParameters.authenticatorDuoStageManualDeviceImportRequest was null or undefined when calling stagesAuthenticatorDuoImportDeviceManualCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/authenticator/duo/{stage_uuid}/import_device_manual/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticatorDuoStageManualDeviceImportRequestToJSON(requestParameters.authenticatorDuoStageManualDeviceImportRequest),
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Import duo devices into authentik
     */
    async stagesAuthenticatorDuoImportDeviceManualCreate(requestParameters: StagesAuthenticatorDuoImportDeviceManualCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.stagesAuthenticatorDuoImportDeviceManualCreateRaw(requestParameters, initOverrides);
    }

    /**
     * Import duo devices into authentik
     */
    async stagesAuthenticatorDuoImportDevicesAutomaticCreateRaw(requestParameters: StagesAuthenticatorDuoImportDevicesAutomaticCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticatorDuoStageDeviceImportResponse>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesAuthenticatorDuoImportDevicesAutomaticCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/authenticator/duo/{stage_uuid}/import_devices_automatic/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticatorDuoStageDeviceImportResponseFromJSON(jsonValue));
    }

    /**
     * Import duo devices into authentik
     */
    async stagesAuthenticatorDuoImportDevicesAutomaticCreate(requestParameters: StagesAuthenticatorDuoImportDevicesAutomaticCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticatorDuoStageDeviceImportResponse> {
        const response = await this.stagesAuthenticatorDuoImportDevicesAutomaticCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * AuthenticatorDuoStage Viewset
     */
    async stagesAuthenticatorDuoListRaw(requestParameters: StagesAuthenticatorDuoListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedAuthenticatorDuoStageList>> {
        const queryParameters: any = {};

        if (requestParameters.apiHostname !== undefined) {
            queryParameters['api_hostname'] = requestParameters.apiHostname;
        }

        if (requestParameters.clientId !== undefined) {
            queryParameters['client_id'] = requestParameters.clientId;
        }

        if (requestParameters.configureFlow !== undefined) {
            queryParameters['configure_flow'] = requestParameters.configureFlow;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/authenticator/duo/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedAuthenticatorDuoStageListFromJSON(jsonValue));
    }

    /**
     * AuthenticatorDuoStage Viewset
     */
    async stagesAuthenticatorDuoList(requestParameters: StagesAuthenticatorDuoListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedAuthenticatorDuoStageList> {
        const response = await this.stagesAuthenticatorDuoListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * AuthenticatorDuoStage Viewset
     */
    async stagesAuthenticatorDuoPartialUpdateRaw(requestParameters: StagesAuthenticatorDuoPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticatorDuoStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesAuthenticatorDuoPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/authenticator/duo/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedAuthenticatorDuoStageRequestToJSON(requestParameters.patchedAuthenticatorDuoStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticatorDuoStageFromJSON(jsonValue));
    }

    /**
     * AuthenticatorDuoStage Viewset
     */
    async stagesAuthenticatorDuoPartialUpdate(requestParameters: StagesAuthenticatorDuoPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticatorDuoStage> {
        const response = await this.stagesAuthenticatorDuoPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * AuthenticatorDuoStage Viewset
     */
    async stagesAuthenticatorDuoRetrieveRaw(requestParameters: StagesAuthenticatorDuoRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticatorDuoStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesAuthenticatorDuoRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/authenticator/duo/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticatorDuoStageFromJSON(jsonValue));
    }

    /**
     * AuthenticatorDuoStage Viewset
     */
    async stagesAuthenticatorDuoRetrieve(requestParameters: StagesAuthenticatorDuoRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticatorDuoStage> {
        const response = await this.stagesAuthenticatorDuoRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * AuthenticatorDuoStage Viewset
     */
    async stagesAuthenticatorDuoUpdateRaw(requestParameters: StagesAuthenticatorDuoUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticatorDuoStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesAuthenticatorDuoUpdate.');
        }

        if (requestParameters.authenticatorDuoStageRequest === null || requestParameters.authenticatorDuoStageRequest === undefined) {
            throw new runtime.RequiredError('authenticatorDuoStageRequest','Required parameter requestParameters.authenticatorDuoStageRequest was null or undefined when calling stagesAuthenticatorDuoUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/authenticator/duo/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticatorDuoStageRequestToJSON(requestParameters.authenticatorDuoStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticatorDuoStageFromJSON(jsonValue));
    }

    /**
     * AuthenticatorDuoStage Viewset
     */
    async stagesAuthenticatorDuoUpdate(requestParameters: StagesAuthenticatorDuoUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticatorDuoStage> {
        const response = await this.stagesAuthenticatorDuoUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all objects that use this object
     */
    async stagesAuthenticatorDuoUsedByListRaw(requestParameters: StagesAuthenticatorDuoUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UsedBy>>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesAuthenticatorDuoUsedByList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/authenticator/duo/{stage_uuid}/used_by/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
    }

    /**
     * Get a list of all objects that use this object
     */
    async stagesAuthenticatorDuoUsedByList(requestParameters: StagesAuthenticatorDuoUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UsedBy>> {
        const response = await this.stagesAuthenticatorDuoUsedByListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * AuthenticatorSMSStage Viewset
     */
    async stagesAuthenticatorSmsCreateRaw(requestParameters: StagesAuthenticatorSmsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticatorSMSStage>> {
        if (requestParameters.authenticatorSMSStageRequest === null || requestParameters.authenticatorSMSStageRequest === undefined) {
            throw new runtime.RequiredError('authenticatorSMSStageRequest','Required parameter requestParameters.authenticatorSMSStageRequest was null or undefined when calling stagesAuthenticatorSmsCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/authenticator/sms/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticatorSMSStageRequestToJSON(requestParameters.authenticatorSMSStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticatorSMSStageFromJSON(jsonValue));
    }

    /**
     * AuthenticatorSMSStage Viewset
     */
    async stagesAuthenticatorSmsCreate(requestParameters: StagesAuthenticatorSmsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticatorSMSStage> {
        const response = await this.stagesAuthenticatorSmsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * AuthenticatorSMSStage Viewset
     */
    async stagesAuthenticatorSmsDestroyRaw(requestParameters: StagesAuthenticatorSmsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesAuthenticatorSmsDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/authenticator/sms/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * AuthenticatorSMSStage Viewset
     */
    async stagesAuthenticatorSmsDestroy(requestParameters: StagesAuthenticatorSmsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.stagesAuthenticatorSmsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * AuthenticatorSMSStage Viewset
     */
    async stagesAuthenticatorSmsListRaw(requestParameters: StagesAuthenticatorSmsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedAuthenticatorSMSStageList>> {
        const queryParameters: any = {};

        if (requestParameters.accountSid !== undefined) {
            queryParameters['account_sid'] = requestParameters.accountSid;
        }

        if (requestParameters.auth !== undefined) {
            queryParameters['auth'] = requestParameters.auth;
        }

        if (requestParameters.authPassword !== undefined) {
            queryParameters['auth_password'] = requestParameters.authPassword;
        }

        if (requestParameters.authType !== undefined) {
            queryParameters['auth_type'] = requestParameters.authType;
        }

        if (requestParameters.configureFlow !== undefined) {
            queryParameters['configure_flow'] = requestParameters.configureFlow;
        }

        if (requestParameters.friendlyName !== undefined) {
            queryParameters['friendly_name'] = requestParameters.friendlyName;
        }

        if (requestParameters.fromNumber !== undefined) {
            queryParameters['from_number'] = requestParameters.fromNumber;
        }

        if (requestParameters.mapping !== undefined) {
            queryParameters['mapping'] = requestParameters.mapping;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.provider !== undefined) {
            queryParameters['provider'] = requestParameters.provider;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.stageUuid !== undefined) {
            queryParameters['stage_uuid'] = requestParameters.stageUuid;
        }

        if (requestParameters.verifyOnly !== undefined) {
            queryParameters['verify_only'] = requestParameters.verifyOnly;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/authenticator/sms/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedAuthenticatorSMSStageListFromJSON(jsonValue));
    }

    /**
     * AuthenticatorSMSStage Viewset
     */
    async stagesAuthenticatorSmsList(requestParameters: StagesAuthenticatorSmsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedAuthenticatorSMSStageList> {
        const response = await this.stagesAuthenticatorSmsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * AuthenticatorSMSStage Viewset
     */
    async stagesAuthenticatorSmsPartialUpdateRaw(requestParameters: StagesAuthenticatorSmsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticatorSMSStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesAuthenticatorSmsPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/authenticator/sms/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedAuthenticatorSMSStageRequestToJSON(requestParameters.patchedAuthenticatorSMSStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticatorSMSStageFromJSON(jsonValue));
    }

    /**
     * AuthenticatorSMSStage Viewset
     */
    async stagesAuthenticatorSmsPartialUpdate(requestParameters: StagesAuthenticatorSmsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticatorSMSStage> {
        const response = await this.stagesAuthenticatorSmsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * AuthenticatorSMSStage Viewset
     */
    async stagesAuthenticatorSmsRetrieveRaw(requestParameters: StagesAuthenticatorSmsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticatorSMSStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesAuthenticatorSmsRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/authenticator/sms/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticatorSMSStageFromJSON(jsonValue));
    }

    /**
     * AuthenticatorSMSStage Viewset
     */
    async stagesAuthenticatorSmsRetrieve(requestParameters: StagesAuthenticatorSmsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticatorSMSStage> {
        const response = await this.stagesAuthenticatorSmsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * AuthenticatorSMSStage Viewset
     */
    async stagesAuthenticatorSmsUpdateRaw(requestParameters: StagesAuthenticatorSmsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticatorSMSStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesAuthenticatorSmsUpdate.');
        }

        if (requestParameters.authenticatorSMSStageRequest === null || requestParameters.authenticatorSMSStageRequest === undefined) {
            throw new runtime.RequiredError('authenticatorSMSStageRequest','Required parameter requestParameters.authenticatorSMSStageRequest was null or undefined when calling stagesAuthenticatorSmsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/authenticator/sms/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticatorSMSStageRequestToJSON(requestParameters.authenticatorSMSStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticatorSMSStageFromJSON(jsonValue));
    }

    /**
     * AuthenticatorSMSStage Viewset
     */
    async stagesAuthenticatorSmsUpdate(requestParameters: StagesAuthenticatorSmsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticatorSMSStage> {
        const response = await this.stagesAuthenticatorSmsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all objects that use this object
     */
    async stagesAuthenticatorSmsUsedByListRaw(requestParameters: StagesAuthenticatorSmsUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UsedBy>>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesAuthenticatorSmsUsedByList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/authenticator/sms/{stage_uuid}/used_by/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
    }

    /**
     * Get a list of all objects that use this object
     */
    async stagesAuthenticatorSmsUsedByList(requestParameters: StagesAuthenticatorSmsUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UsedBy>> {
        const response = await this.stagesAuthenticatorSmsUsedByListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * AuthenticatorStaticStage Viewset
     */
    async stagesAuthenticatorStaticCreateRaw(requestParameters: StagesAuthenticatorStaticCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticatorStaticStage>> {
        if (requestParameters.authenticatorStaticStageRequest === null || requestParameters.authenticatorStaticStageRequest === undefined) {
            throw new runtime.RequiredError('authenticatorStaticStageRequest','Required parameter requestParameters.authenticatorStaticStageRequest was null or undefined when calling stagesAuthenticatorStaticCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/authenticator/static/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticatorStaticStageRequestToJSON(requestParameters.authenticatorStaticStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticatorStaticStageFromJSON(jsonValue));
    }

    /**
     * AuthenticatorStaticStage Viewset
     */
    async stagesAuthenticatorStaticCreate(requestParameters: StagesAuthenticatorStaticCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticatorStaticStage> {
        const response = await this.stagesAuthenticatorStaticCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * AuthenticatorStaticStage Viewset
     */
    async stagesAuthenticatorStaticDestroyRaw(requestParameters: StagesAuthenticatorStaticDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesAuthenticatorStaticDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/authenticator/static/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * AuthenticatorStaticStage Viewset
     */
    async stagesAuthenticatorStaticDestroy(requestParameters: StagesAuthenticatorStaticDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.stagesAuthenticatorStaticDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * AuthenticatorStaticStage Viewset
     */
    async stagesAuthenticatorStaticListRaw(requestParameters: StagesAuthenticatorStaticListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedAuthenticatorStaticStageList>> {
        const queryParameters: any = {};

        if (requestParameters.configureFlow !== undefined) {
            queryParameters['configure_flow'] = requestParameters.configureFlow;
        }

        if (requestParameters.friendlyName !== undefined) {
            queryParameters['friendly_name'] = requestParameters.friendlyName;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.stageUuid !== undefined) {
            queryParameters['stage_uuid'] = requestParameters.stageUuid;
        }

        if (requestParameters.tokenCount !== undefined) {
            queryParameters['token_count'] = requestParameters.tokenCount;
        }

        if (requestParameters.tokenLength !== undefined) {
            queryParameters['token_length'] = requestParameters.tokenLength;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/authenticator/static/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedAuthenticatorStaticStageListFromJSON(jsonValue));
    }

    /**
     * AuthenticatorStaticStage Viewset
     */
    async stagesAuthenticatorStaticList(requestParameters: StagesAuthenticatorStaticListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedAuthenticatorStaticStageList> {
        const response = await this.stagesAuthenticatorStaticListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * AuthenticatorStaticStage Viewset
     */
    async stagesAuthenticatorStaticPartialUpdateRaw(requestParameters: StagesAuthenticatorStaticPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticatorStaticStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesAuthenticatorStaticPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/authenticator/static/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedAuthenticatorStaticStageRequestToJSON(requestParameters.patchedAuthenticatorStaticStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticatorStaticStageFromJSON(jsonValue));
    }

    /**
     * AuthenticatorStaticStage Viewset
     */
    async stagesAuthenticatorStaticPartialUpdate(requestParameters: StagesAuthenticatorStaticPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticatorStaticStage> {
        const response = await this.stagesAuthenticatorStaticPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * AuthenticatorStaticStage Viewset
     */
    async stagesAuthenticatorStaticRetrieveRaw(requestParameters: StagesAuthenticatorStaticRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticatorStaticStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesAuthenticatorStaticRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/authenticator/static/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticatorStaticStageFromJSON(jsonValue));
    }

    /**
     * AuthenticatorStaticStage Viewset
     */
    async stagesAuthenticatorStaticRetrieve(requestParameters: StagesAuthenticatorStaticRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticatorStaticStage> {
        const response = await this.stagesAuthenticatorStaticRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * AuthenticatorStaticStage Viewset
     */
    async stagesAuthenticatorStaticUpdateRaw(requestParameters: StagesAuthenticatorStaticUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticatorStaticStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesAuthenticatorStaticUpdate.');
        }

        if (requestParameters.authenticatorStaticStageRequest === null || requestParameters.authenticatorStaticStageRequest === undefined) {
            throw new runtime.RequiredError('authenticatorStaticStageRequest','Required parameter requestParameters.authenticatorStaticStageRequest was null or undefined when calling stagesAuthenticatorStaticUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/authenticator/static/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticatorStaticStageRequestToJSON(requestParameters.authenticatorStaticStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticatorStaticStageFromJSON(jsonValue));
    }

    /**
     * AuthenticatorStaticStage Viewset
     */
    async stagesAuthenticatorStaticUpdate(requestParameters: StagesAuthenticatorStaticUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticatorStaticStage> {
        const response = await this.stagesAuthenticatorStaticUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all objects that use this object
     */
    async stagesAuthenticatorStaticUsedByListRaw(requestParameters: StagesAuthenticatorStaticUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UsedBy>>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesAuthenticatorStaticUsedByList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/authenticator/static/{stage_uuid}/used_by/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
    }

    /**
     * Get a list of all objects that use this object
     */
    async stagesAuthenticatorStaticUsedByList(requestParameters: StagesAuthenticatorStaticUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UsedBy>> {
        const response = await this.stagesAuthenticatorStaticUsedByListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * AuthenticatorTOTPStage Viewset
     */
    async stagesAuthenticatorTotpCreateRaw(requestParameters: StagesAuthenticatorTotpCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticatorTOTPStage>> {
        if (requestParameters.authenticatorTOTPStageRequest === null || requestParameters.authenticatorTOTPStageRequest === undefined) {
            throw new runtime.RequiredError('authenticatorTOTPStageRequest','Required parameter requestParameters.authenticatorTOTPStageRequest was null or undefined when calling stagesAuthenticatorTotpCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/authenticator/totp/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticatorTOTPStageRequestToJSON(requestParameters.authenticatorTOTPStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticatorTOTPStageFromJSON(jsonValue));
    }

    /**
     * AuthenticatorTOTPStage Viewset
     */
    async stagesAuthenticatorTotpCreate(requestParameters: StagesAuthenticatorTotpCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticatorTOTPStage> {
        const response = await this.stagesAuthenticatorTotpCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * AuthenticatorTOTPStage Viewset
     */
    async stagesAuthenticatorTotpDestroyRaw(requestParameters: StagesAuthenticatorTotpDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesAuthenticatorTotpDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/authenticator/totp/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * AuthenticatorTOTPStage Viewset
     */
    async stagesAuthenticatorTotpDestroy(requestParameters: StagesAuthenticatorTotpDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.stagesAuthenticatorTotpDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * AuthenticatorTOTPStage Viewset
     */
    async stagesAuthenticatorTotpListRaw(requestParameters: StagesAuthenticatorTotpListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedAuthenticatorTOTPStageList>> {
        const queryParameters: any = {};

        if (requestParameters.configureFlow !== undefined) {
            queryParameters['configure_flow'] = requestParameters.configureFlow;
        }

        if (requestParameters.digits !== undefined) {
            queryParameters['digits'] = requestParameters.digits;
        }

        if (requestParameters.friendlyName !== undefined) {
            queryParameters['friendly_name'] = requestParameters.friendlyName;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.stageUuid !== undefined) {
            queryParameters['stage_uuid'] = requestParameters.stageUuid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/authenticator/totp/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedAuthenticatorTOTPStageListFromJSON(jsonValue));
    }

    /**
     * AuthenticatorTOTPStage Viewset
     */
    async stagesAuthenticatorTotpList(requestParameters: StagesAuthenticatorTotpListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedAuthenticatorTOTPStageList> {
        const response = await this.stagesAuthenticatorTotpListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * AuthenticatorTOTPStage Viewset
     */
    async stagesAuthenticatorTotpPartialUpdateRaw(requestParameters: StagesAuthenticatorTotpPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticatorTOTPStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesAuthenticatorTotpPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/authenticator/totp/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedAuthenticatorTOTPStageRequestToJSON(requestParameters.patchedAuthenticatorTOTPStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticatorTOTPStageFromJSON(jsonValue));
    }

    /**
     * AuthenticatorTOTPStage Viewset
     */
    async stagesAuthenticatorTotpPartialUpdate(requestParameters: StagesAuthenticatorTotpPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticatorTOTPStage> {
        const response = await this.stagesAuthenticatorTotpPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * AuthenticatorTOTPStage Viewset
     */
    async stagesAuthenticatorTotpRetrieveRaw(requestParameters: StagesAuthenticatorTotpRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticatorTOTPStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesAuthenticatorTotpRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/authenticator/totp/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticatorTOTPStageFromJSON(jsonValue));
    }

    /**
     * AuthenticatorTOTPStage Viewset
     */
    async stagesAuthenticatorTotpRetrieve(requestParameters: StagesAuthenticatorTotpRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticatorTOTPStage> {
        const response = await this.stagesAuthenticatorTotpRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * AuthenticatorTOTPStage Viewset
     */
    async stagesAuthenticatorTotpUpdateRaw(requestParameters: StagesAuthenticatorTotpUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticatorTOTPStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesAuthenticatorTotpUpdate.');
        }

        if (requestParameters.authenticatorTOTPStageRequest === null || requestParameters.authenticatorTOTPStageRequest === undefined) {
            throw new runtime.RequiredError('authenticatorTOTPStageRequest','Required parameter requestParameters.authenticatorTOTPStageRequest was null or undefined when calling stagesAuthenticatorTotpUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/authenticator/totp/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticatorTOTPStageRequestToJSON(requestParameters.authenticatorTOTPStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticatorTOTPStageFromJSON(jsonValue));
    }

    /**
     * AuthenticatorTOTPStage Viewset
     */
    async stagesAuthenticatorTotpUpdate(requestParameters: StagesAuthenticatorTotpUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticatorTOTPStage> {
        const response = await this.stagesAuthenticatorTotpUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all objects that use this object
     */
    async stagesAuthenticatorTotpUsedByListRaw(requestParameters: StagesAuthenticatorTotpUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UsedBy>>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesAuthenticatorTotpUsedByList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/authenticator/totp/{stage_uuid}/used_by/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
    }

    /**
     * Get a list of all objects that use this object
     */
    async stagesAuthenticatorTotpUsedByList(requestParameters: StagesAuthenticatorTotpUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UsedBy>> {
        const response = await this.stagesAuthenticatorTotpUsedByListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * AuthenticatorValidateStage Viewset
     */
    async stagesAuthenticatorValidateCreateRaw(requestParameters: StagesAuthenticatorValidateCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticatorValidateStage>> {
        if (requestParameters.authenticatorValidateStageRequest === null || requestParameters.authenticatorValidateStageRequest === undefined) {
            throw new runtime.RequiredError('authenticatorValidateStageRequest','Required parameter requestParameters.authenticatorValidateStageRequest was null or undefined when calling stagesAuthenticatorValidateCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/authenticator/validate/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticatorValidateStageRequestToJSON(requestParameters.authenticatorValidateStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticatorValidateStageFromJSON(jsonValue));
    }

    /**
     * AuthenticatorValidateStage Viewset
     */
    async stagesAuthenticatorValidateCreate(requestParameters: StagesAuthenticatorValidateCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticatorValidateStage> {
        const response = await this.stagesAuthenticatorValidateCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * AuthenticatorValidateStage Viewset
     */
    async stagesAuthenticatorValidateDestroyRaw(requestParameters: StagesAuthenticatorValidateDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesAuthenticatorValidateDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/authenticator/validate/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * AuthenticatorValidateStage Viewset
     */
    async stagesAuthenticatorValidateDestroy(requestParameters: StagesAuthenticatorValidateDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.stagesAuthenticatorValidateDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * AuthenticatorValidateStage Viewset
     */
    async stagesAuthenticatorValidateListRaw(requestParameters: StagesAuthenticatorValidateListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedAuthenticatorValidateStageList>> {
        const queryParameters: any = {};

        if (requestParameters.configurationStages) {
            queryParameters['configuration_stages'] = requestParameters.configurationStages;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.notConfiguredAction !== undefined) {
            queryParameters['not_configured_action'] = requestParameters.notConfiguredAction;
        }

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/authenticator/validate/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedAuthenticatorValidateStageListFromJSON(jsonValue));
    }

    /**
     * AuthenticatorValidateStage Viewset
     */
    async stagesAuthenticatorValidateList(requestParameters: StagesAuthenticatorValidateListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedAuthenticatorValidateStageList> {
        const response = await this.stagesAuthenticatorValidateListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * AuthenticatorValidateStage Viewset
     */
    async stagesAuthenticatorValidatePartialUpdateRaw(requestParameters: StagesAuthenticatorValidatePartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticatorValidateStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesAuthenticatorValidatePartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/authenticator/validate/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedAuthenticatorValidateStageRequestToJSON(requestParameters.patchedAuthenticatorValidateStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticatorValidateStageFromJSON(jsonValue));
    }

    /**
     * AuthenticatorValidateStage Viewset
     */
    async stagesAuthenticatorValidatePartialUpdate(requestParameters: StagesAuthenticatorValidatePartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticatorValidateStage> {
        const response = await this.stagesAuthenticatorValidatePartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * AuthenticatorValidateStage Viewset
     */
    async stagesAuthenticatorValidateRetrieveRaw(requestParameters: StagesAuthenticatorValidateRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticatorValidateStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesAuthenticatorValidateRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/authenticator/validate/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticatorValidateStageFromJSON(jsonValue));
    }

    /**
     * AuthenticatorValidateStage Viewset
     */
    async stagesAuthenticatorValidateRetrieve(requestParameters: StagesAuthenticatorValidateRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticatorValidateStage> {
        const response = await this.stagesAuthenticatorValidateRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * AuthenticatorValidateStage Viewset
     */
    async stagesAuthenticatorValidateUpdateRaw(requestParameters: StagesAuthenticatorValidateUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticatorValidateStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesAuthenticatorValidateUpdate.');
        }

        if (requestParameters.authenticatorValidateStageRequest === null || requestParameters.authenticatorValidateStageRequest === undefined) {
            throw new runtime.RequiredError('authenticatorValidateStageRequest','Required parameter requestParameters.authenticatorValidateStageRequest was null or undefined when calling stagesAuthenticatorValidateUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/authenticator/validate/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticatorValidateStageRequestToJSON(requestParameters.authenticatorValidateStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticatorValidateStageFromJSON(jsonValue));
    }

    /**
     * AuthenticatorValidateStage Viewset
     */
    async stagesAuthenticatorValidateUpdate(requestParameters: StagesAuthenticatorValidateUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticatorValidateStage> {
        const response = await this.stagesAuthenticatorValidateUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all objects that use this object
     */
    async stagesAuthenticatorValidateUsedByListRaw(requestParameters: StagesAuthenticatorValidateUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UsedBy>>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesAuthenticatorValidateUsedByList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/authenticator/validate/{stage_uuid}/used_by/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
    }

    /**
     * Get a list of all objects that use this object
     */
    async stagesAuthenticatorValidateUsedByList(requestParameters: StagesAuthenticatorValidateUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UsedBy>> {
        const response = await this.stagesAuthenticatorValidateUsedByListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * AuthenticateWebAuthnStage Viewset
     */
    async stagesAuthenticatorWebauthnCreateRaw(requestParameters: StagesAuthenticatorWebauthnCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticateWebAuthnStage>> {
        if (requestParameters.authenticateWebAuthnStageRequest === null || requestParameters.authenticateWebAuthnStageRequest === undefined) {
            throw new runtime.RequiredError('authenticateWebAuthnStageRequest','Required parameter requestParameters.authenticateWebAuthnStageRequest was null or undefined when calling stagesAuthenticatorWebauthnCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/authenticator/webauthn/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticateWebAuthnStageRequestToJSON(requestParameters.authenticateWebAuthnStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticateWebAuthnStageFromJSON(jsonValue));
    }

    /**
     * AuthenticateWebAuthnStage Viewset
     */
    async stagesAuthenticatorWebauthnCreate(requestParameters: StagesAuthenticatorWebauthnCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticateWebAuthnStage> {
        const response = await this.stagesAuthenticatorWebauthnCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * AuthenticateWebAuthnStage Viewset
     */
    async stagesAuthenticatorWebauthnDestroyRaw(requestParameters: StagesAuthenticatorWebauthnDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesAuthenticatorWebauthnDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/authenticator/webauthn/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * AuthenticateWebAuthnStage Viewset
     */
    async stagesAuthenticatorWebauthnDestroy(requestParameters: StagesAuthenticatorWebauthnDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.stagesAuthenticatorWebauthnDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * AuthenticateWebAuthnStage Viewset
     */
    async stagesAuthenticatorWebauthnListRaw(requestParameters: StagesAuthenticatorWebauthnListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedAuthenticateWebAuthnStageList>> {
        const queryParameters: any = {};

        if (requestParameters.authenticatorAttachment !== undefined) {
            queryParameters['authenticator_attachment'] = requestParameters.authenticatorAttachment;
        }

        if (requestParameters.configureFlow !== undefined) {
            queryParameters['configure_flow'] = requestParameters.configureFlow;
        }

        if (requestParameters.friendlyName !== undefined) {
            queryParameters['friendly_name'] = requestParameters.friendlyName;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.residentKeyRequirement !== undefined) {
            queryParameters['resident_key_requirement'] = requestParameters.residentKeyRequirement;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.stageUuid !== undefined) {
            queryParameters['stage_uuid'] = requestParameters.stageUuid;
        }

        if (requestParameters.userVerification !== undefined) {
            queryParameters['user_verification'] = requestParameters.userVerification;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/authenticator/webauthn/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedAuthenticateWebAuthnStageListFromJSON(jsonValue));
    }

    /**
     * AuthenticateWebAuthnStage Viewset
     */
    async stagesAuthenticatorWebauthnList(requestParameters: StagesAuthenticatorWebauthnListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedAuthenticateWebAuthnStageList> {
        const response = await this.stagesAuthenticatorWebauthnListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * AuthenticateWebAuthnStage Viewset
     */
    async stagesAuthenticatorWebauthnPartialUpdateRaw(requestParameters: StagesAuthenticatorWebauthnPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticateWebAuthnStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesAuthenticatorWebauthnPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/authenticator/webauthn/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedAuthenticateWebAuthnStageRequestToJSON(requestParameters.patchedAuthenticateWebAuthnStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticateWebAuthnStageFromJSON(jsonValue));
    }

    /**
     * AuthenticateWebAuthnStage Viewset
     */
    async stagesAuthenticatorWebauthnPartialUpdate(requestParameters: StagesAuthenticatorWebauthnPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticateWebAuthnStage> {
        const response = await this.stagesAuthenticatorWebauthnPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * AuthenticateWebAuthnStage Viewset
     */
    async stagesAuthenticatorWebauthnRetrieveRaw(requestParameters: StagesAuthenticatorWebauthnRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticateWebAuthnStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesAuthenticatorWebauthnRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/authenticator/webauthn/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticateWebAuthnStageFromJSON(jsonValue));
    }

    /**
     * AuthenticateWebAuthnStage Viewset
     */
    async stagesAuthenticatorWebauthnRetrieve(requestParameters: StagesAuthenticatorWebauthnRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticateWebAuthnStage> {
        const response = await this.stagesAuthenticatorWebauthnRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * AuthenticateWebAuthnStage Viewset
     */
    async stagesAuthenticatorWebauthnUpdateRaw(requestParameters: StagesAuthenticatorWebauthnUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<AuthenticateWebAuthnStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesAuthenticatorWebauthnUpdate.');
        }

        if (requestParameters.authenticateWebAuthnStageRequest === null || requestParameters.authenticateWebAuthnStageRequest === undefined) {
            throw new runtime.RequiredError('authenticateWebAuthnStageRequest','Required parameter requestParameters.authenticateWebAuthnStageRequest was null or undefined when calling stagesAuthenticatorWebauthnUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/authenticator/webauthn/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: AuthenticateWebAuthnStageRequestToJSON(requestParameters.authenticateWebAuthnStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthenticateWebAuthnStageFromJSON(jsonValue));
    }

    /**
     * AuthenticateWebAuthnStage Viewset
     */
    async stagesAuthenticatorWebauthnUpdate(requestParameters: StagesAuthenticatorWebauthnUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<AuthenticateWebAuthnStage> {
        const response = await this.stagesAuthenticatorWebauthnUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all objects that use this object
     */
    async stagesAuthenticatorWebauthnUsedByListRaw(requestParameters: StagesAuthenticatorWebauthnUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UsedBy>>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesAuthenticatorWebauthnUsedByList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/authenticator/webauthn/{stage_uuid}/used_by/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
    }

    /**
     * Get a list of all objects that use this object
     */
    async stagesAuthenticatorWebauthnUsedByList(requestParameters: StagesAuthenticatorWebauthnUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UsedBy>> {
        const response = await this.stagesAuthenticatorWebauthnUsedByListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * CaptchaStage Viewset
     */
    async stagesCaptchaCreateRaw(requestParameters: StagesCaptchaCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CaptchaStage>> {
        if (requestParameters.captchaStageRequest === null || requestParameters.captchaStageRequest === undefined) {
            throw new runtime.RequiredError('captchaStageRequest','Required parameter requestParameters.captchaStageRequest was null or undefined when calling stagesCaptchaCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/captcha/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: CaptchaStageRequestToJSON(requestParameters.captchaStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CaptchaStageFromJSON(jsonValue));
    }

    /**
     * CaptchaStage Viewset
     */
    async stagesCaptchaCreate(requestParameters: StagesCaptchaCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CaptchaStage> {
        const response = await this.stagesCaptchaCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * CaptchaStage Viewset
     */
    async stagesCaptchaDestroyRaw(requestParameters: StagesCaptchaDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesCaptchaDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/captcha/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * CaptchaStage Viewset
     */
    async stagesCaptchaDestroy(requestParameters: StagesCaptchaDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.stagesCaptchaDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * CaptchaStage Viewset
     */
    async stagesCaptchaListRaw(requestParameters: StagesCaptchaListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedCaptchaStageList>> {
        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.publicKey !== undefined) {
            queryParameters['public_key'] = requestParameters.publicKey;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/captcha/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedCaptchaStageListFromJSON(jsonValue));
    }

    /**
     * CaptchaStage Viewset
     */
    async stagesCaptchaList(requestParameters: StagesCaptchaListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedCaptchaStageList> {
        const response = await this.stagesCaptchaListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * CaptchaStage Viewset
     */
    async stagesCaptchaPartialUpdateRaw(requestParameters: StagesCaptchaPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CaptchaStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesCaptchaPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/captcha/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedCaptchaStageRequestToJSON(requestParameters.patchedCaptchaStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CaptchaStageFromJSON(jsonValue));
    }

    /**
     * CaptchaStage Viewset
     */
    async stagesCaptchaPartialUpdate(requestParameters: StagesCaptchaPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CaptchaStage> {
        const response = await this.stagesCaptchaPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * CaptchaStage Viewset
     */
    async stagesCaptchaRetrieveRaw(requestParameters: StagesCaptchaRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CaptchaStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesCaptchaRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/captcha/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CaptchaStageFromJSON(jsonValue));
    }

    /**
     * CaptchaStage Viewset
     */
    async stagesCaptchaRetrieve(requestParameters: StagesCaptchaRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CaptchaStage> {
        const response = await this.stagesCaptchaRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * CaptchaStage Viewset
     */
    async stagesCaptchaUpdateRaw(requestParameters: StagesCaptchaUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<CaptchaStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesCaptchaUpdate.');
        }

        if (requestParameters.captchaStageRequest === null || requestParameters.captchaStageRequest === undefined) {
            throw new runtime.RequiredError('captchaStageRequest','Required parameter requestParameters.captchaStageRequest was null or undefined when calling stagesCaptchaUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/captcha/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: CaptchaStageRequestToJSON(requestParameters.captchaStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CaptchaStageFromJSON(jsonValue));
    }

    /**
     * CaptchaStage Viewset
     */
    async stagesCaptchaUpdate(requestParameters: StagesCaptchaUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<CaptchaStage> {
        const response = await this.stagesCaptchaUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all objects that use this object
     */
    async stagesCaptchaUsedByListRaw(requestParameters: StagesCaptchaUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UsedBy>>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesCaptchaUsedByList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/captcha/{stage_uuid}/used_by/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
    }

    /**
     * Get a list of all objects that use this object
     */
    async stagesCaptchaUsedByList(requestParameters: StagesCaptchaUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UsedBy>> {
        const response = await this.stagesCaptchaUsedByListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ConsentStage Viewset
     */
    async stagesConsentCreateRaw(requestParameters: StagesConsentCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConsentStage>> {
        if (requestParameters.consentStageRequest === null || requestParameters.consentStageRequest === undefined) {
            throw new runtime.RequiredError('consentStageRequest','Required parameter requestParameters.consentStageRequest was null or undefined when calling stagesConsentCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/consent/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ConsentStageRequestToJSON(requestParameters.consentStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConsentStageFromJSON(jsonValue));
    }

    /**
     * ConsentStage Viewset
     */
    async stagesConsentCreate(requestParameters: StagesConsentCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConsentStage> {
        const response = await this.stagesConsentCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ConsentStage Viewset
     */
    async stagesConsentDestroyRaw(requestParameters: StagesConsentDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesConsentDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/consent/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ConsentStage Viewset
     */
    async stagesConsentDestroy(requestParameters: StagesConsentDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.stagesConsentDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * ConsentStage Viewset
     */
    async stagesConsentListRaw(requestParameters: StagesConsentListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedConsentStageList>> {
        const queryParameters: any = {};

        if (requestParameters.consentExpireIn !== undefined) {
            queryParameters['consent_expire_in'] = requestParameters.consentExpireIn;
        }

        if (requestParameters.mode !== undefined) {
            queryParameters['mode'] = requestParameters.mode;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.stageUuid !== undefined) {
            queryParameters['stage_uuid'] = requestParameters.stageUuid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/consent/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedConsentStageListFromJSON(jsonValue));
    }

    /**
     * ConsentStage Viewset
     */
    async stagesConsentList(requestParameters: StagesConsentListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedConsentStageList> {
        const response = await this.stagesConsentListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ConsentStage Viewset
     */
    async stagesConsentPartialUpdateRaw(requestParameters: StagesConsentPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConsentStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesConsentPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/consent/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedConsentStageRequestToJSON(requestParameters.patchedConsentStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConsentStageFromJSON(jsonValue));
    }

    /**
     * ConsentStage Viewset
     */
    async stagesConsentPartialUpdate(requestParameters: StagesConsentPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConsentStage> {
        const response = await this.stagesConsentPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ConsentStage Viewset
     */
    async stagesConsentRetrieveRaw(requestParameters: StagesConsentRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConsentStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesConsentRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/consent/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConsentStageFromJSON(jsonValue));
    }

    /**
     * ConsentStage Viewset
     */
    async stagesConsentRetrieve(requestParameters: StagesConsentRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConsentStage> {
        const response = await this.stagesConsentRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ConsentStage Viewset
     */
    async stagesConsentUpdateRaw(requestParameters: StagesConsentUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ConsentStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesConsentUpdate.');
        }

        if (requestParameters.consentStageRequest === null || requestParameters.consentStageRequest === undefined) {
            throw new runtime.RequiredError('consentStageRequest','Required parameter requestParameters.consentStageRequest was null or undefined when calling stagesConsentUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/consent/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ConsentStageRequestToJSON(requestParameters.consentStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ConsentStageFromJSON(jsonValue));
    }

    /**
     * ConsentStage Viewset
     */
    async stagesConsentUpdate(requestParameters: StagesConsentUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ConsentStage> {
        const response = await this.stagesConsentUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all objects that use this object
     */
    async stagesConsentUsedByListRaw(requestParameters: StagesConsentUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UsedBy>>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesConsentUsedByList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/consent/{stage_uuid}/used_by/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
    }

    /**
     * Get a list of all objects that use this object
     */
    async stagesConsentUsedByList(requestParameters: StagesConsentUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UsedBy>> {
        const response = await this.stagesConsentUsedByListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * DenyStage Viewset
     */
    async stagesDenyCreateRaw(requestParameters: StagesDenyCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DenyStage>> {
        if (requestParameters.denyStageRequest === null || requestParameters.denyStageRequest === undefined) {
            throw new runtime.RequiredError('denyStageRequest','Required parameter requestParameters.denyStageRequest was null or undefined when calling stagesDenyCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/deny/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DenyStageRequestToJSON(requestParameters.denyStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DenyStageFromJSON(jsonValue));
    }

    /**
     * DenyStage Viewset
     */
    async stagesDenyCreate(requestParameters: StagesDenyCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DenyStage> {
        const response = await this.stagesDenyCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * DenyStage Viewset
     */
    async stagesDenyDestroyRaw(requestParameters: StagesDenyDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesDenyDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/deny/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * DenyStage Viewset
     */
    async stagesDenyDestroy(requestParameters: StagesDenyDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.stagesDenyDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * DenyStage Viewset
     */
    async stagesDenyListRaw(requestParameters: StagesDenyListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedDenyStageList>> {
        const queryParameters: any = {};

        if (requestParameters.denyMessage !== undefined) {
            queryParameters['deny_message'] = requestParameters.denyMessage;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.stageUuid !== undefined) {
            queryParameters['stage_uuid'] = requestParameters.stageUuid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/deny/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedDenyStageListFromJSON(jsonValue));
    }

    /**
     * DenyStage Viewset
     */
    async stagesDenyList(requestParameters: StagesDenyListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedDenyStageList> {
        const response = await this.stagesDenyListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * DenyStage Viewset
     */
    async stagesDenyPartialUpdateRaw(requestParameters: StagesDenyPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DenyStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesDenyPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/deny/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedDenyStageRequestToJSON(requestParameters.patchedDenyStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DenyStageFromJSON(jsonValue));
    }

    /**
     * DenyStage Viewset
     */
    async stagesDenyPartialUpdate(requestParameters: StagesDenyPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DenyStage> {
        const response = await this.stagesDenyPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * DenyStage Viewset
     */
    async stagesDenyRetrieveRaw(requestParameters: StagesDenyRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DenyStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesDenyRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/deny/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DenyStageFromJSON(jsonValue));
    }

    /**
     * DenyStage Viewset
     */
    async stagesDenyRetrieve(requestParameters: StagesDenyRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DenyStage> {
        const response = await this.stagesDenyRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * DenyStage Viewset
     */
    async stagesDenyUpdateRaw(requestParameters: StagesDenyUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DenyStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesDenyUpdate.');
        }

        if (requestParameters.denyStageRequest === null || requestParameters.denyStageRequest === undefined) {
            throw new runtime.RequiredError('denyStageRequest','Required parameter requestParameters.denyStageRequest was null or undefined when calling stagesDenyUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/deny/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DenyStageRequestToJSON(requestParameters.denyStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DenyStageFromJSON(jsonValue));
    }

    /**
     * DenyStage Viewset
     */
    async stagesDenyUpdate(requestParameters: StagesDenyUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DenyStage> {
        const response = await this.stagesDenyUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all objects that use this object
     */
    async stagesDenyUsedByListRaw(requestParameters: StagesDenyUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UsedBy>>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesDenyUsedByList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/deny/{stage_uuid}/used_by/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
    }

    /**
     * Get a list of all objects that use this object
     */
    async stagesDenyUsedByList(requestParameters: StagesDenyUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UsedBy>> {
        const response = await this.stagesDenyUsedByListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * DummyStage Viewset
     */
    async stagesDummyCreateRaw(requestParameters: StagesDummyCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DummyStage>> {
        if (requestParameters.dummyStageRequest === null || requestParameters.dummyStageRequest === undefined) {
            throw new runtime.RequiredError('dummyStageRequest','Required parameter requestParameters.dummyStageRequest was null or undefined when calling stagesDummyCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/dummy/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DummyStageRequestToJSON(requestParameters.dummyStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DummyStageFromJSON(jsonValue));
    }

    /**
     * DummyStage Viewset
     */
    async stagesDummyCreate(requestParameters: StagesDummyCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DummyStage> {
        const response = await this.stagesDummyCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * DummyStage Viewset
     */
    async stagesDummyDestroyRaw(requestParameters: StagesDummyDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesDummyDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/dummy/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * DummyStage Viewset
     */
    async stagesDummyDestroy(requestParameters: StagesDummyDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.stagesDummyDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * DummyStage Viewset
     */
    async stagesDummyListRaw(requestParameters: StagesDummyListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedDummyStageList>> {
        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.stageUuid !== undefined) {
            queryParameters['stage_uuid'] = requestParameters.stageUuid;
        }

        if (requestParameters.throwError !== undefined) {
            queryParameters['throw_error'] = requestParameters.throwError;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/dummy/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedDummyStageListFromJSON(jsonValue));
    }

    /**
     * DummyStage Viewset
     */
    async stagesDummyList(requestParameters: StagesDummyListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedDummyStageList> {
        const response = await this.stagesDummyListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * DummyStage Viewset
     */
    async stagesDummyPartialUpdateRaw(requestParameters: StagesDummyPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DummyStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesDummyPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/dummy/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedDummyStageRequestToJSON(requestParameters.patchedDummyStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DummyStageFromJSON(jsonValue));
    }

    /**
     * DummyStage Viewset
     */
    async stagesDummyPartialUpdate(requestParameters: StagesDummyPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DummyStage> {
        const response = await this.stagesDummyPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * DummyStage Viewset
     */
    async stagesDummyRetrieveRaw(requestParameters: StagesDummyRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DummyStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesDummyRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/dummy/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DummyStageFromJSON(jsonValue));
    }

    /**
     * DummyStage Viewset
     */
    async stagesDummyRetrieve(requestParameters: StagesDummyRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DummyStage> {
        const response = await this.stagesDummyRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * DummyStage Viewset
     */
    async stagesDummyUpdateRaw(requestParameters: StagesDummyUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DummyStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesDummyUpdate.');
        }

        if (requestParameters.dummyStageRequest === null || requestParameters.dummyStageRequest === undefined) {
            throw new runtime.RequiredError('dummyStageRequest','Required parameter requestParameters.dummyStageRequest was null or undefined when calling stagesDummyUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/dummy/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DummyStageRequestToJSON(requestParameters.dummyStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DummyStageFromJSON(jsonValue));
    }

    /**
     * DummyStage Viewset
     */
    async stagesDummyUpdate(requestParameters: StagesDummyUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DummyStage> {
        const response = await this.stagesDummyUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all objects that use this object
     */
    async stagesDummyUsedByListRaw(requestParameters: StagesDummyUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UsedBy>>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesDummyUsedByList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/dummy/{stage_uuid}/used_by/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
    }

    /**
     * Get a list of all objects that use this object
     */
    async stagesDummyUsedByList(requestParameters: StagesDummyUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UsedBy>> {
        const response = await this.stagesDummyUsedByListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * EmailStage Viewset
     */
    async stagesEmailCreateRaw(requestParameters: StagesEmailCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailStage>> {
        if (requestParameters.emailStageRequest === null || requestParameters.emailStageRequest === undefined) {
            throw new runtime.RequiredError('emailStageRequest','Required parameter requestParameters.emailStageRequest was null or undefined when calling stagesEmailCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/email/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailStageRequestToJSON(requestParameters.emailStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailStageFromJSON(jsonValue));
    }

    /**
     * EmailStage Viewset
     */
    async stagesEmailCreate(requestParameters: StagesEmailCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailStage> {
        const response = await this.stagesEmailCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * EmailStage Viewset
     */
    async stagesEmailDestroyRaw(requestParameters: StagesEmailDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesEmailDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/email/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * EmailStage Viewset
     */
    async stagesEmailDestroy(requestParameters: StagesEmailDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.stagesEmailDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * EmailStage Viewset
     */
    async stagesEmailListRaw(requestParameters: StagesEmailListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedEmailStageList>> {
        const queryParameters: any = {};

        if (requestParameters.activateUserOnSuccess !== undefined) {
            queryParameters['activate_user_on_success'] = requestParameters.activateUserOnSuccess;
        }

        if (requestParameters.fromAddress !== undefined) {
            queryParameters['from_address'] = requestParameters.fromAddress;
        }

        if (requestParameters.host !== undefined) {
            queryParameters['host'] = requestParameters.host;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.port !== undefined) {
            queryParameters['port'] = requestParameters.port;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.subject !== undefined) {
            queryParameters['subject'] = requestParameters.subject;
        }

        if (requestParameters.template !== undefined) {
            queryParameters['template'] = requestParameters.template;
        }

        if (requestParameters.timeout !== undefined) {
            queryParameters['timeout'] = requestParameters.timeout;
        }

        if (requestParameters.tokenExpiry !== undefined) {
            queryParameters['token_expiry'] = requestParameters.tokenExpiry;
        }

        if (requestParameters.useGlobalSettings !== undefined) {
            queryParameters['use_global_settings'] = requestParameters.useGlobalSettings;
        }

        if (requestParameters.useSsl !== undefined) {
            queryParameters['use_ssl'] = requestParameters.useSsl;
        }

        if (requestParameters.useTls !== undefined) {
            queryParameters['use_tls'] = requestParameters.useTls;
        }

        if (requestParameters.username !== undefined) {
            queryParameters['username'] = requestParameters.username;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/email/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedEmailStageListFromJSON(jsonValue));
    }

    /**
     * EmailStage Viewset
     */
    async stagesEmailList(requestParameters: StagesEmailListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedEmailStageList> {
        const response = await this.stagesEmailListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * EmailStage Viewset
     */
    async stagesEmailPartialUpdateRaw(requestParameters: StagesEmailPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesEmailPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/email/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedEmailStageRequestToJSON(requestParameters.patchedEmailStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailStageFromJSON(jsonValue));
    }

    /**
     * EmailStage Viewset
     */
    async stagesEmailPartialUpdate(requestParameters: StagesEmailPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailStage> {
        const response = await this.stagesEmailPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * EmailStage Viewset
     */
    async stagesEmailRetrieveRaw(requestParameters: StagesEmailRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesEmailRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/email/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailStageFromJSON(jsonValue));
    }

    /**
     * EmailStage Viewset
     */
    async stagesEmailRetrieve(requestParameters: StagesEmailRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailStage> {
        const response = await this.stagesEmailRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all available templates, including custom templates
     */
    async stagesEmailTemplatesListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TypeCreate>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/email/templates/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TypeCreateFromJSON));
    }

    /**
     * Get all available templates, including custom templates
     */
    async stagesEmailTemplatesList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TypeCreate>> {
        const response = await this.stagesEmailTemplatesListRaw(initOverrides);
        return await response.value();
    }

    /**
     * EmailStage Viewset
     */
    async stagesEmailUpdateRaw(requestParameters: StagesEmailUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EmailStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesEmailUpdate.');
        }

        if (requestParameters.emailStageRequest === null || requestParameters.emailStageRequest === undefined) {
            throw new runtime.RequiredError('emailStageRequest','Required parameter requestParameters.emailStageRequest was null or undefined when calling stagesEmailUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/email/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EmailStageRequestToJSON(requestParameters.emailStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailStageFromJSON(jsonValue));
    }

    /**
     * EmailStage Viewset
     */
    async stagesEmailUpdate(requestParameters: StagesEmailUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EmailStage> {
        const response = await this.stagesEmailUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all objects that use this object
     */
    async stagesEmailUsedByListRaw(requestParameters: StagesEmailUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UsedBy>>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesEmailUsedByList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/email/{stage_uuid}/used_by/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
    }

    /**
     * Get a list of all objects that use this object
     */
    async stagesEmailUsedByList(requestParameters: StagesEmailUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UsedBy>> {
        const response = await this.stagesEmailUsedByListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ExtAuthStage Viewset
     */
    async stagesExtAuthCreateRaw(requestParameters: StagesExtAuthCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExtAuthStage>> {
        if (requestParameters.extAuthStageRequest === null || requestParameters.extAuthStageRequest === undefined) {
            throw new runtime.RequiredError('extAuthStageRequest','Required parameter requestParameters.extAuthStageRequest was null or undefined when calling stagesExtAuthCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/ext_auth/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExtAuthStageRequestToJSON(requestParameters.extAuthStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExtAuthStageFromJSON(jsonValue));
    }

    /**
     * ExtAuthStage Viewset
     */
    async stagesExtAuthCreate(requestParameters: StagesExtAuthCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExtAuthStage> {
        const response = await this.stagesExtAuthCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ExtAuthStage Viewset
     */
    async stagesExtAuthDestroyRaw(requestParameters: StagesExtAuthDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesExtAuthDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/ext_auth/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ExtAuthStage Viewset
     */
    async stagesExtAuthDestroy(requestParameters: StagesExtAuthDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.stagesExtAuthDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * ExtAuthStage Viewset
     */
    async stagesExtAuthListRaw(requestParameters: StagesExtAuthListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedExtAuthStageList>> {
        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.stageUuid !== undefined) {
            queryParameters['stage_uuid'] = requestParameters.stageUuid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/ext_auth/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedExtAuthStageListFromJSON(jsonValue));
    }

    /**
     * ExtAuthStage Viewset
     */
    async stagesExtAuthList(requestParameters: StagesExtAuthListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedExtAuthStageList> {
        const response = await this.stagesExtAuthListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ExtAuthStage Viewset
     */
    async stagesExtAuthPartialUpdateRaw(requestParameters: StagesExtAuthPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExtAuthStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesExtAuthPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/ext_auth/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedExtAuthStageRequestToJSON(requestParameters.patchedExtAuthStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExtAuthStageFromJSON(jsonValue));
    }

    /**
     * ExtAuthStage Viewset
     */
    async stagesExtAuthPartialUpdate(requestParameters: StagesExtAuthPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExtAuthStage> {
        const response = await this.stagesExtAuthPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ExtAuthStage Viewset
     */
    async stagesExtAuthRetrieveRaw(requestParameters: StagesExtAuthRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExtAuthStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesExtAuthRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/ext_auth/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExtAuthStageFromJSON(jsonValue));
    }

    /**
     * ExtAuthStage Viewset
     */
    async stagesExtAuthRetrieve(requestParameters: StagesExtAuthRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExtAuthStage> {
        const response = await this.stagesExtAuthRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ExtAuthStage Viewset
     */
    async stagesExtAuthUpdateRaw(requestParameters: StagesExtAuthUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExtAuthStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesExtAuthUpdate.');
        }

        if (requestParameters.extAuthStageRequest === null || requestParameters.extAuthStageRequest === undefined) {
            throw new runtime.RequiredError('extAuthStageRequest','Required parameter requestParameters.extAuthStageRequest was null or undefined when calling stagesExtAuthUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/ext_auth/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ExtAuthStageRequestToJSON(requestParameters.extAuthStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExtAuthStageFromJSON(jsonValue));
    }

    /**
     * ExtAuthStage Viewset
     */
    async stagesExtAuthUpdate(requestParameters: StagesExtAuthUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExtAuthStage> {
        const response = await this.stagesExtAuthUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all objects that use this object
     */
    async stagesExtAuthUsedByListRaw(requestParameters: StagesExtAuthUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UsedBy>>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesExtAuthUsedByList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/ext_auth/{stage_uuid}/used_by/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
    }

    /**
     * Get a list of all objects that use this object
     */
    async stagesExtAuthUsedByList(requestParameters: StagesExtAuthUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UsedBy>> {
        const response = await this.stagesExtAuthUsedByListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * IdentificationStage Viewset
     */
    async stagesIdentificationCreateRaw(requestParameters: StagesIdentificationCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdentificationStage>> {
        if (requestParameters.identificationStageRequest === null || requestParameters.identificationStageRequest === undefined) {
            throw new runtime.RequiredError('identificationStageRequest','Required parameter requestParameters.identificationStageRequest was null or undefined when calling stagesIdentificationCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/identification/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IdentificationStageRequestToJSON(requestParameters.identificationStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdentificationStageFromJSON(jsonValue));
    }

    /**
     * IdentificationStage Viewset
     */
    async stagesIdentificationCreate(requestParameters: StagesIdentificationCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdentificationStage> {
        const response = await this.stagesIdentificationCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * IdentificationStage Viewset
     */
    async stagesIdentificationDestroyRaw(requestParameters: StagesIdentificationDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesIdentificationDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/identification/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * IdentificationStage Viewset
     */
    async stagesIdentificationDestroy(requestParameters: StagesIdentificationDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.stagesIdentificationDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * IdentificationStage Viewset
     */
    async stagesIdentificationListRaw(requestParameters: StagesIdentificationListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedIdentificationStageList>> {
        const queryParameters: any = {};

        if (requestParameters.caseInsensitiveMatching !== undefined) {
            queryParameters['case_insensitive_matching'] = requestParameters.caseInsensitiveMatching;
        }

        if (requestParameters.enrollmentFlow !== undefined) {
            queryParameters['enrollment_flow'] = requestParameters.enrollmentFlow;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.passwordStage !== undefined) {
            queryParameters['password_stage'] = requestParameters.passwordStage;
        }

        if (requestParameters.passwordlessFlow !== undefined) {
            queryParameters['passwordless_flow'] = requestParameters.passwordlessFlow;
        }

        if (requestParameters.recoveryFlow !== undefined) {
            queryParameters['recovery_flow'] = requestParameters.recoveryFlow;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.showMatchedUser !== undefined) {
            queryParameters['show_matched_user'] = requestParameters.showMatchedUser;
        }

        if (requestParameters.showSourceLabels !== undefined) {
            queryParameters['show_source_labels'] = requestParameters.showSourceLabels;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/identification/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedIdentificationStageListFromJSON(jsonValue));
    }

    /**
     * IdentificationStage Viewset
     */
    async stagesIdentificationList(requestParameters: StagesIdentificationListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedIdentificationStageList> {
        const response = await this.stagesIdentificationListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * IdentificationStage Viewset
     */
    async stagesIdentificationPartialUpdateRaw(requestParameters: StagesIdentificationPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdentificationStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesIdentificationPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/identification/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedIdentificationStageRequestToJSON(requestParameters.patchedIdentificationStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdentificationStageFromJSON(jsonValue));
    }

    /**
     * IdentificationStage Viewset
     */
    async stagesIdentificationPartialUpdate(requestParameters: StagesIdentificationPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdentificationStage> {
        const response = await this.stagesIdentificationPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * IdentificationStage Viewset
     */
    async stagesIdentificationRetrieveRaw(requestParameters: StagesIdentificationRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdentificationStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesIdentificationRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/identification/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdentificationStageFromJSON(jsonValue));
    }

    /**
     * IdentificationStage Viewset
     */
    async stagesIdentificationRetrieve(requestParameters: StagesIdentificationRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdentificationStage> {
        const response = await this.stagesIdentificationRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * IdentificationStage Viewset
     */
    async stagesIdentificationUpdateRaw(requestParameters: StagesIdentificationUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<IdentificationStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesIdentificationUpdate.');
        }

        if (requestParameters.identificationStageRequest === null || requestParameters.identificationStageRequest === undefined) {
            throw new runtime.RequiredError('identificationStageRequest','Required parameter requestParameters.identificationStageRequest was null or undefined when calling stagesIdentificationUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/identification/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: IdentificationStageRequestToJSON(requestParameters.identificationStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => IdentificationStageFromJSON(jsonValue));
    }

    /**
     * IdentificationStage Viewset
     */
    async stagesIdentificationUpdate(requestParameters: StagesIdentificationUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<IdentificationStage> {
        const response = await this.stagesIdentificationUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all objects that use this object
     */
    async stagesIdentificationUsedByListRaw(requestParameters: StagesIdentificationUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UsedBy>>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesIdentificationUsedByList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/identification/{stage_uuid}/used_by/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
    }

    /**
     * Get a list of all objects that use this object
     */
    async stagesIdentificationUsedByList(requestParameters: StagesIdentificationUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UsedBy>> {
        const response = await this.stagesIdentificationUsedByListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Invitation Viewset
     */
    async stagesInvitationInvitationsCreateRaw(requestParameters: StagesInvitationInvitationsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Invitation>> {
        if (requestParameters.invitationRequest === null || requestParameters.invitationRequest === undefined) {
            throw new runtime.RequiredError('invitationRequest','Required parameter requestParameters.invitationRequest was null or undefined when calling stagesInvitationInvitationsCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/invitation/invitations/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InvitationRequestToJSON(requestParameters.invitationRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvitationFromJSON(jsonValue));
    }

    /**
     * Invitation Viewset
     */
    async stagesInvitationInvitationsCreate(requestParameters: StagesInvitationInvitationsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Invitation> {
        const response = await this.stagesInvitationInvitationsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Invitation Viewset
     */
    async stagesInvitationInvitationsDestroyRaw(requestParameters: StagesInvitationInvitationsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.inviteUuid === null || requestParameters.inviteUuid === undefined) {
            throw new runtime.RequiredError('inviteUuid','Required parameter requestParameters.inviteUuid was null or undefined when calling stagesInvitationInvitationsDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/invitation/invitations/{invite_uuid}/`.replace(`{${"invite_uuid"}}`, encodeURIComponent(String(requestParameters.inviteUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Invitation Viewset
     */
    async stagesInvitationInvitationsDestroy(requestParameters: StagesInvitationInvitationsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.stagesInvitationInvitationsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Invitation Viewset
     */
    async stagesInvitationInvitationsListRaw(requestParameters: StagesInvitationInvitationsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedInvitationList>> {
        const queryParameters: any = {};

        if (requestParameters.createdByUsername !== undefined) {
            queryParameters['created_by__username'] = requestParameters.createdByUsername;
        }

        if (requestParameters.expires !== undefined) {
            queryParameters['expires'] = (requestParameters.expires as any).toISOString();
        }

        if (requestParameters.flowSlug !== undefined) {
            queryParameters['flow__slug'] = requestParameters.flowSlug;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/invitation/invitations/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedInvitationListFromJSON(jsonValue));
    }

    /**
     * Invitation Viewset
     */
    async stagesInvitationInvitationsList(requestParameters: StagesInvitationInvitationsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedInvitationList> {
        const response = await this.stagesInvitationInvitationsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Invitation Viewset
     */
    async stagesInvitationInvitationsPartialUpdateRaw(requestParameters: StagesInvitationInvitationsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Invitation>> {
        if (requestParameters.inviteUuid === null || requestParameters.inviteUuid === undefined) {
            throw new runtime.RequiredError('inviteUuid','Required parameter requestParameters.inviteUuid was null or undefined when calling stagesInvitationInvitationsPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/invitation/invitations/{invite_uuid}/`.replace(`{${"invite_uuid"}}`, encodeURIComponent(String(requestParameters.inviteUuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedInvitationRequestToJSON(requestParameters.patchedInvitationRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvitationFromJSON(jsonValue));
    }

    /**
     * Invitation Viewset
     */
    async stagesInvitationInvitationsPartialUpdate(requestParameters: StagesInvitationInvitationsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Invitation> {
        const response = await this.stagesInvitationInvitationsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Invitation Viewset
     */
    async stagesInvitationInvitationsRetrieveRaw(requestParameters: StagesInvitationInvitationsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Invitation>> {
        if (requestParameters.inviteUuid === null || requestParameters.inviteUuid === undefined) {
            throw new runtime.RequiredError('inviteUuid','Required parameter requestParameters.inviteUuid was null or undefined when calling stagesInvitationInvitationsRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/invitation/invitations/{invite_uuid}/`.replace(`{${"invite_uuid"}}`, encodeURIComponent(String(requestParameters.inviteUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvitationFromJSON(jsonValue));
    }

    /**
     * Invitation Viewset
     */
    async stagesInvitationInvitationsRetrieve(requestParameters: StagesInvitationInvitationsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Invitation> {
        const response = await this.stagesInvitationInvitationsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Invitation Viewset
     */
    async stagesInvitationInvitationsUpdateRaw(requestParameters: StagesInvitationInvitationsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Invitation>> {
        if (requestParameters.inviteUuid === null || requestParameters.inviteUuid === undefined) {
            throw new runtime.RequiredError('inviteUuid','Required parameter requestParameters.inviteUuid was null or undefined when calling stagesInvitationInvitationsUpdate.');
        }

        if (requestParameters.invitationRequest === null || requestParameters.invitationRequest === undefined) {
            throw new runtime.RequiredError('invitationRequest','Required parameter requestParameters.invitationRequest was null or undefined when calling stagesInvitationInvitationsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/invitation/invitations/{invite_uuid}/`.replace(`{${"invite_uuid"}}`, encodeURIComponent(String(requestParameters.inviteUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InvitationRequestToJSON(requestParameters.invitationRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvitationFromJSON(jsonValue));
    }

    /**
     * Invitation Viewset
     */
    async stagesInvitationInvitationsUpdate(requestParameters: StagesInvitationInvitationsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Invitation> {
        const response = await this.stagesInvitationInvitationsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all objects that use this object
     */
    async stagesInvitationInvitationsUsedByListRaw(requestParameters: StagesInvitationInvitationsUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UsedBy>>> {
        if (requestParameters.inviteUuid === null || requestParameters.inviteUuid === undefined) {
            throw new runtime.RequiredError('inviteUuid','Required parameter requestParameters.inviteUuid was null or undefined when calling stagesInvitationInvitationsUsedByList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/invitation/invitations/{invite_uuid}/used_by/`.replace(`{${"invite_uuid"}}`, encodeURIComponent(String(requestParameters.inviteUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
    }

    /**
     * Get a list of all objects that use this object
     */
    async stagesInvitationInvitationsUsedByList(requestParameters: StagesInvitationInvitationsUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UsedBy>> {
        const response = await this.stagesInvitationInvitationsUsedByListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * InvitationStage Viewset
     */
    async stagesInvitationStagesCreateRaw(requestParameters: StagesInvitationStagesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvitationStage>> {
        if (requestParameters.invitationStageRequest === null || requestParameters.invitationStageRequest === undefined) {
            throw new runtime.RequiredError('invitationStageRequest','Required parameter requestParameters.invitationStageRequest was null or undefined when calling stagesInvitationStagesCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/invitation/stages/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: InvitationStageRequestToJSON(requestParameters.invitationStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvitationStageFromJSON(jsonValue));
    }

    /**
     * InvitationStage Viewset
     */
    async stagesInvitationStagesCreate(requestParameters: StagesInvitationStagesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvitationStage> {
        const response = await this.stagesInvitationStagesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * InvitationStage Viewset
     */
    async stagesInvitationStagesDestroyRaw(requestParameters: StagesInvitationStagesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesInvitationStagesDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/invitation/stages/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * InvitationStage Viewset
     */
    async stagesInvitationStagesDestroy(requestParameters: StagesInvitationStagesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.stagesInvitationStagesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * InvitationStage Viewset
     */
    async stagesInvitationStagesListRaw(requestParameters: StagesInvitationStagesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedInvitationStageList>> {
        const queryParameters: any = {};

        if (requestParameters.continueFlowWithoutInvitation !== undefined) {
            queryParameters['continue_flow_without_invitation'] = requestParameters.continueFlowWithoutInvitation;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.noFlows !== undefined) {
            queryParameters['no_flows'] = requestParameters.noFlows;
        }

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.stageUuid !== undefined) {
            queryParameters['stage_uuid'] = requestParameters.stageUuid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/invitation/stages/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedInvitationStageListFromJSON(jsonValue));
    }

    /**
     * InvitationStage Viewset
     */
    async stagesInvitationStagesList(requestParameters: StagesInvitationStagesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedInvitationStageList> {
        const response = await this.stagesInvitationStagesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * InvitationStage Viewset
     */
    async stagesInvitationStagesPartialUpdateRaw(requestParameters: StagesInvitationStagesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvitationStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesInvitationStagesPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/invitation/stages/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedInvitationStageRequestToJSON(requestParameters.patchedInvitationStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvitationStageFromJSON(jsonValue));
    }

    /**
     * InvitationStage Viewset
     */
    async stagesInvitationStagesPartialUpdate(requestParameters: StagesInvitationStagesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvitationStage> {
        const response = await this.stagesInvitationStagesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * InvitationStage Viewset
     */
    async stagesInvitationStagesRetrieveRaw(requestParameters: StagesInvitationStagesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvitationStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesInvitationStagesRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/invitation/stages/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvitationStageFromJSON(jsonValue));
    }

    /**
     * InvitationStage Viewset
     */
    async stagesInvitationStagesRetrieve(requestParameters: StagesInvitationStagesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvitationStage> {
        const response = await this.stagesInvitationStagesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * InvitationStage Viewset
     */
    async stagesInvitationStagesUpdateRaw(requestParameters: StagesInvitationStagesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<InvitationStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesInvitationStagesUpdate.');
        }

        if (requestParameters.invitationStageRequest === null || requestParameters.invitationStageRequest === undefined) {
            throw new runtime.RequiredError('invitationStageRequest','Required parameter requestParameters.invitationStageRequest was null or undefined when calling stagesInvitationStagesUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/invitation/stages/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: InvitationStageRequestToJSON(requestParameters.invitationStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => InvitationStageFromJSON(jsonValue));
    }

    /**
     * InvitationStage Viewset
     */
    async stagesInvitationStagesUpdate(requestParameters: StagesInvitationStagesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<InvitationStage> {
        const response = await this.stagesInvitationStagesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all objects that use this object
     */
    async stagesInvitationStagesUsedByListRaw(requestParameters: StagesInvitationStagesUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UsedBy>>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesInvitationStagesUsedByList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/invitation/stages/{stage_uuid}/used_by/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
    }

    /**
     * Get a list of all objects that use this object
     */
    async stagesInvitationStagesUsedByList(requestParameters: StagesInvitationStagesUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UsedBy>> {
        const response = await this.stagesInvitationStagesUsedByListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * PasswordStage Viewset
     */
    async stagesPasswordCreateRaw(requestParameters: StagesPasswordCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PasswordStage>> {
        if (requestParameters.passwordStageRequest === null || requestParameters.passwordStageRequest === undefined) {
            throw new runtime.RequiredError('passwordStageRequest','Required parameter requestParameters.passwordStageRequest was null or undefined when calling stagesPasswordCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/password/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PasswordStageRequestToJSON(requestParameters.passwordStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PasswordStageFromJSON(jsonValue));
    }

    /**
     * PasswordStage Viewset
     */
    async stagesPasswordCreate(requestParameters: StagesPasswordCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PasswordStage> {
        const response = await this.stagesPasswordCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * PasswordStage Viewset
     */
    async stagesPasswordDestroyRaw(requestParameters: StagesPasswordDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesPasswordDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/password/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * PasswordStage Viewset
     */
    async stagesPasswordDestroy(requestParameters: StagesPasswordDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.stagesPasswordDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * PasswordStage Viewset
     */
    async stagesPasswordListRaw(requestParameters: StagesPasswordListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPasswordStageList>> {
        const queryParameters: any = {};

        if (requestParameters.configureFlow !== undefined) {
            queryParameters['configure_flow'] = requestParameters.configureFlow;
        }

        if (requestParameters.failedAttemptsBeforeCancel !== undefined) {
            queryParameters['failed_attempts_before_cancel'] = requestParameters.failedAttemptsBeforeCancel;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/password/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedPasswordStageListFromJSON(jsonValue));
    }

    /**
     * PasswordStage Viewset
     */
    async stagesPasswordList(requestParameters: StagesPasswordListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPasswordStageList> {
        const response = await this.stagesPasswordListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * PasswordStage Viewset
     */
    async stagesPasswordPartialUpdateRaw(requestParameters: StagesPasswordPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PasswordStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesPasswordPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/password/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedPasswordStageRequestToJSON(requestParameters.patchedPasswordStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PasswordStageFromJSON(jsonValue));
    }

    /**
     * PasswordStage Viewset
     */
    async stagesPasswordPartialUpdate(requestParameters: StagesPasswordPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PasswordStage> {
        const response = await this.stagesPasswordPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * PasswordStage Viewset
     */
    async stagesPasswordRetrieveRaw(requestParameters: StagesPasswordRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PasswordStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesPasswordRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/password/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PasswordStageFromJSON(jsonValue));
    }

    /**
     * PasswordStage Viewset
     */
    async stagesPasswordRetrieve(requestParameters: StagesPasswordRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PasswordStage> {
        const response = await this.stagesPasswordRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * PasswordStage Viewset
     */
    async stagesPasswordUpdateRaw(requestParameters: StagesPasswordUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PasswordStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesPasswordUpdate.');
        }

        if (requestParameters.passwordStageRequest === null || requestParameters.passwordStageRequest === undefined) {
            throw new runtime.RequiredError('passwordStageRequest','Required parameter requestParameters.passwordStageRequest was null or undefined when calling stagesPasswordUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/password/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PasswordStageRequestToJSON(requestParameters.passwordStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PasswordStageFromJSON(jsonValue));
    }

    /**
     * PasswordStage Viewset
     */
    async stagesPasswordUpdate(requestParameters: StagesPasswordUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PasswordStage> {
        const response = await this.stagesPasswordUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all objects that use this object
     */
    async stagesPasswordUsedByListRaw(requestParameters: StagesPasswordUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UsedBy>>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesPasswordUsedByList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/password/{stage_uuid}/used_by/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
    }

    /**
     * Get a list of all objects that use this object
     */
    async stagesPasswordUsedByList(requestParameters: StagesPasswordUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UsedBy>> {
        const response = await this.stagesPasswordUsedByListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Prompt Viewset
     */
    async stagesPromptPromptsCreateRaw(requestParameters: StagesPromptPromptsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Prompt>> {
        if (requestParameters.promptRequest === null || requestParameters.promptRequest === undefined) {
            throw new runtime.RequiredError('promptRequest','Required parameter requestParameters.promptRequest was null or undefined when calling stagesPromptPromptsCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/prompt/prompts/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PromptRequestToJSON(requestParameters.promptRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PromptFromJSON(jsonValue));
    }

    /**
     * Prompt Viewset
     */
    async stagesPromptPromptsCreate(requestParameters: StagesPromptPromptsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Prompt> {
        const response = await this.stagesPromptPromptsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Prompt Viewset
     */
    async stagesPromptPromptsDestroyRaw(requestParameters: StagesPromptPromptsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.promptUuid === null || requestParameters.promptUuid === undefined) {
            throw new runtime.RequiredError('promptUuid','Required parameter requestParameters.promptUuid was null or undefined when calling stagesPromptPromptsDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/prompt/prompts/{prompt_uuid}/`.replace(`{${"prompt_uuid"}}`, encodeURIComponent(String(requestParameters.promptUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Prompt Viewset
     */
    async stagesPromptPromptsDestroy(requestParameters: StagesPromptPromptsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.stagesPromptPromptsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Prompt Viewset
     */
    async stagesPromptPromptsListRaw(requestParameters: StagesPromptPromptsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPromptList>> {
        const queryParameters: any = {};

        if (requestParameters.fieldKey !== undefined) {
            queryParameters['field_key'] = requestParameters.fieldKey;
        }

        if (requestParameters.label !== undefined) {
            queryParameters['label'] = requestParameters.label;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.placeholder !== undefined) {
            queryParameters['placeholder'] = requestParameters.placeholder;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.type !== undefined) {
            queryParameters['type'] = requestParameters.type;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/prompt/prompts/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedPromptListFromJSON(jsonValue));
    }

    /**
     * Prompt Viewset
     */
    async stagesPromptPromptsList(requestParameters: StagesPromptPromptsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPromptList> {
        const response = await this.stagesPromptPromptsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Prompt Viewset
     */
    async stagesPromptPromptsPartialUpdateRaw(requestParameters: StagesPromptPromptsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Prompt>> {
        if (requestParameters.promptUuid === null || requestParameters.promptUuid === undefined) {
            throw new runtime.RequiredError('promptUuid','Required parameter requestParameters.promptUuid was null or undefined when calling stagesPromptPromptsPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/prompt/prompts/{prompt_uuid}/`.replace(`{${"prompt_uuid"}}`, encodeURIComponent(String(requestParameters.promptUuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedPromptRequestToJSON(requestParameters.patchedPromptRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PromptFromJSON(jsonValue));
    }

    /**
     * Prompt Viewset
     */
    async stagesPromptPromptsPartialUpdate(requestParameters: StagesPromptPromptsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Prompt> {
        const response = await this.stagesPromptPromptsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Preview a prompt as a challenge, just like a flow would receive
     */
    async stagesPromptPromptsPreviewCreateRaw(requestParameters: StagesPromptPromptsPreviewCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PromptChallenge>> {
        if (requestParameters.promptRequest === null || requestParameters.promptRequest === undefined) {
            throw new runtime.RequiredError('promptRequest','Required parameter requestParameters.promptRequest was null or undefined when calling stagesPromptPromptsPreviewCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/prompt/prompts/preview/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PromptRequestToJSON(requestParameters.promptRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PromptChallengeFromJSON(jsonValue));
    }

    /**
     * Preview a prompt as a challenge, just like a flow would receive
     */
    async stagesPromptPromptsPreviewCreate(requestParameters: StagesPromptPromptsPreviewCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PromptChallenge> {
        const response = await this.stagesPromptPromptsPreviewCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Prompt Viewset
     */
    async stagesPromptPromptsRetrieveRaw(requestParameters: StagesPromptPromptsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Prompt>> {
        if (requestParameters.promptUuid === null || requestParameters.promptUuid === undefined) {
            throw new runtime.RequiredError('promptUuid','Required parameter requestParameters.promptUuid was null or undefined when calling stagesPromptPromptsRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/prompt/prompts/{prompt_uuid}/`.replace(`{${"prompt_uuid"}}`, encodeURIComponent(String(requestParameters.promptUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PromptFromJSON(jsonValue));
    }

    /**
     * Prompt Viewset
     */
    async stagesPromptPromptsRetrieve(requestParameters: StagesPromptPromptsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Prompt> {
        const response = await this.stagesPromptPromptsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Prompt Viewset
     */
    async stagesPromptPromptsUpdateRaw(requestParameters: StagesPromptPromptsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Prompt>> {
        if (requestParameters.promptUuid === null || requestParameters.promptUuid === undefined) {
            throw new runtime.RequiredError('promptUuid','Required parameter requestParameters.promptUuid was null or undefined when calling stagesPromptPromptsUpdate.');
        }

        if (requestParameters.promptRequest === null || requestParameters.promptRequest === undefined) {
            throw new runtime.RequiredError('promptRequest','Required parameter requestParameters.promptRequest was null or undefined when calling stagesPromptPromptsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/prompt/prompts/{prompt_uuid}/`.replace(`{${"prompt_uuid"}}`, encodeURIComponent(String(requestParameters.promptUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PromptRequestToJSON(requestParameters.promptRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PromptFromJSON(jsonValue));
    }

    /**
     * Prompt Viewset
     */
    async stagesPromptPromptsUpdate(requestParameters: StagesPromptPromptsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Prompt> {
        const response = await this.stagesPromptPromptsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all objects that use this object
     */
    async stagesPromptPromptsUsedByListRaw(requestParameters: StagesPromptPromptsUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UsedBy>>> {
        if (requestParameters.promptUuid === null || requestParameters.promptUuid === undefined) {
            throw new runtime.RequiredError('promptUuid','Required parameter requestParameters.promptUuid was null or undefined when calling stagesPromptPromptsUsedByList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/prompt/prompts/{prompt_uuid}/used_by/`.replace(`{${"prompt_uuid"}}`, encodeURIComponent(String(requestParameters.promptUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
    }

    /**
     * Get a list of all objects that use this object
     */
    async stagesPromptPromptsUsedByList(requestParameters: StagesPromptPromptsUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UsedBy>> {
        const response = await this.stagesPromptPromptsUsedByListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * PromptStage Viewset
     */
    async stagesPromptStagesCreateRaw(requestParameters: StagesPromptStagesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PromptStage>> {
        if (requestParameters.promptStageRequest === null || requestParameters.promptStageRequest === undefined) {
            throw new runtime.RequiredError('promptStageRequest','Required parameter requestParameters.promptStageRequest was null or undefined when calling stagesPromptStagesCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/prompt/stages/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PromptStageRequestToJSON(requestParameters.promptStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PromptStageFromJSON(jsonValue));
    }

    /**
     * PromptStage Viewset
     */
    async stagesPromptStagesCreate(requestParameters: StagesPromptStagesCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PromptStage> {
        const response = await this.stagesPromptStagesCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * PromptStage Viewset
     */
    async stagesPromptStagesDestroyRaw(requestParameters: StagesPromptStagesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesPromptStagesDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/prompt/stages/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * PromptStage Viewset
     */
    async stagesPromptStagesDestroy(requestParameters: StagesPromptStagesDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.stagesPromptStagesDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * PromptStage Viewset
     */
    async stagesPromptStagesListRaw(requestParameters: StagesPromptStagesListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPromptStageList>> {
        const queryParameters: any = {};

        if (requestParameters.fields) {
            queryParameters['fields'] = requestParameters.fields;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.stageUuid !== undefined) {
            queryParameters['stage_uuid'] = requestParameters.stageUuid;
        }

        if (requestParameters.validationPolicies) {
            queryParameters['validation_policies'] = requestParameters.validationPolicies;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/prompt/stages/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedPromptStageListFromJSON(jsonValue));
    }

    /**
     * PromptStage Viewset
     */
    async stagesPromptStagesList(requestParameters: StagesPromptStagesListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPromptStageList> {
        const response = await this.stagesPromptStagesListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * PromptStage Viewset
     */
    async stagesPromptStagesPartialUpdateRaw(requestParameters: StagesPromptStagesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PromptStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesPromptStagesPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/prompt/stages/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedPromptStageRequestToJSON(requestParameters.patchedPromptStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PromptStageFromJSON(jsonValue));
    }

    /**
     * PromptStage Viewset
     */
    async stagesPromptStagesPartialUpdate(requestParameters: StagesPromptStagesPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PromptStage> {
        const response = await this.stagesPromptStagesPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * PromptStage Viewset
     */
    async stagesPromptStagesRetrieveRaw(requestParameters: StagesPromptStagesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PromptStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesPromptStagesRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/prompt/stages/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PromptStageFromJSON(jsonValue));
    }

    /**
     * PromptStage Viewset
     */
    async stagesPromptStagesRetrieve(requestParameters: StagesPromptStagesRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PromptStage> {
        const response = await this.stagesPromptStagesRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * PromptStage Viewset
     */
    async stagesPromptStagesUpdateRaw(requestParameters: StagesPromptStagesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PromptStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesPromptStagesUpdate.');
        }

        if (requestParameters.promptStageRequest === null || requestParameters.promptStageRequest === undefined) {
            throw new runtime.RequiredError('promptStageRequest','Required parameter requestParameters.promptStageRequest was null or undefined when calling stagesPromptStagesUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/prompt/stages/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PromptStageRequestToJSON(requestParameters.promptStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PromptStageFromJSON(jsonValue));
    }

    /**
     * PromptStage Viewset
     */
    async stagesPromptStagesUpdate(requestParameters: StagesPromptStagesUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PromptStage> {
        const response = await this.stagesPromptStagesUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all objects that use this object
     */
    async stagesPromptStagesUsedByListRaw(requestParameters: StagesPromptStagesUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UsedBy>>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesPromptStagesUsedByList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/prompt/stages/{stage_uuid}/used_by/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
    }

    /**
     * Get a list of all objects that use this object
     */
    async stagesPromptStagesUsedByList(requestParameters: StagesPromptStagesUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UsedBy>> {
        const response = await this.stagesPromptStagesUsedByListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * UserDeleteStage Viewset
     */
    async stagesUserDeleteCreateRaw(requestParameters: StagesUserDeleteCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDeleteStage>> {
        if (requestParameters.userDeleteStageRequest === null || requestParameters.userDeleteStageRequest === undefined) {
            throw new runtime.RequiredError('userDeleteStageRequest','Required parameter requestParameters.userDeleteStageRequest was null or undefined when calling stagesUserDeleteCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/user_delete/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserDeleteStageRequestToJSON(requestParameters.userDeleteStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDeleteStageFromJSON(jsonValue));
    }

    /**
     * UserDeleteStage Viewset
     */
    async stagesUserDeleteCreate(requestParameters: StagesUserDeleteCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDeleteStage> {
        const response = await this.stagesUserDeleteCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * UserDeleteStage Viewset
     */
    async stagesUserDeleteDestroyRaw(requestParameters: StagesUserDeleteDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesUserDeleteDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/user_delete/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * UserDeleteStage Viewset
     */
    async stagesUserDeleteDestroy(requestParameters: StagesUserDeleteDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.stagesUserDeleteDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * UserDeleteStage Viewset
     */
    async stagesUserDeleteListRaw(requestParameters: StagesUserDeleteListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedUserDeleteStageList>> {
        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.stageUuid !== undefined) {
            queryParameters['stage_uuid'] = requestParameters.stageUuid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/user_delete/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedUserDeleteStageListFromJSON(jsonValue));
    }

    /**
     * UserDeleteStage Viewset
     */
    async stagesUserDeleteList(requestParameters: StagesUserDeleteListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedUserDeleteStageList> {
        const response = await this.stagesUserDeleteListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * UserDeleteStage Viewset
     */
    async stagesUserDeletePartialUpdateRaw(requestParameters: StagesUserDeletePartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDeleteStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesUserDeletePartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/user_delete/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedUserDeleteStageRequestToJSON(requestParameters.patchedUserDeleteStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDeleteStageFromJSON(jsonValue));
    }

    /**
     * UserDeleteStage Viewset
     */
    async stagesUserDeletePartialUpdate(requestParameters: StagesUserDeletePartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDeleteStage> {
        const response = await this.stagesUserDeletePartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * UserDeleteStage Viewset
     */
    async stagesUserDeleteRetrieveRaw(requestParameters: StagesUserDeleteRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDeleteStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesUserDeleteRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/user_delete/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDeleteStageFromJSON(jsonValue));
    }

    /**
     * UserDeleteStage Viewset
     */
    async stagesUserDeleteRetrieve(requestParameters: StagesUserDeleteRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDeleteStage> {
        const response = await this.stagesUserDeleteRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * UserDeleteStage Viewset
     */
    async stagesUserDeleteUpdateRaw(requestParameters: StagesUserDeleteUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserDeleteStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesUserDeleteUpdate.');
        }

        if (requestParameters.userDeleteStageRequest === null || requestParameters.userDeleteStageRequest === undefined) {
            throw new runtime.RequiredError('userDeleteStageRequest','Required parameter requestParameters.userDeleteStageRequest was null or undefined when calling stagesUserDeleteUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/user_delete/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserDeleteStageRequestToJSON(requestParameters.userDeleteStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserDeleteStageFromJSON(jsonValue));
    }

    /**
     * UserDeleteStage Viewset
     */
    async stagesUserDeleteUpdate(requestParameters: StagesUserDeleteUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserDeleteStage> {
        const response = await this.stagesUserDeleteUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all objects that use this object
     */
    async stagesUserDeleteUsedByListRaw(requestParameters: StagesUserDeleteUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UsedBy>>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesUserDeleteUsedByList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/user_delete/{stage_uuid}/used_by/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
    }

    /**
     * Get a list of all objects that use this object
     */
    async stagesUserDeleteUsedByList(requestParameters: StagesUserDeleteUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UsedBy>> {
        const response = await this.stagesUserDeleteUsedByListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * UserLoginStage Viewset
     */
    async stagesUserLoginCreateRaw(requestParameters: StagesUserLoginCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserLoginStage>> {
        if (requestParameters.userLoginStageRequest === null || requestParameters.userLoginStageRequest === undefined) {
            throw new runtime.RequiredError('userLoginStageRequest','Required parameter requestParameters.userLoginStageRequest was null or undefined when calling stagesUserLoginCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/user_login/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserLoginStageRequestToJSON(requestParameters.userLoginStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserLoginStageFromJSON(jsonValue));
    }

    /**
     * UserLoginStage Viewset
     */
    async stagesUserLoginCreate(requestParameters: StagesUserLoginCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserLoginStage> {
        const response = await this.stagesUserLoginCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * UserLoginStage Viewset
     */
    async stagesUserLoginDestroyRaw(requestParameters: StagesUserLoginDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesUserLoginDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/user_login/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * UserLoginStage Viewset
     */
    async stagesUserLoginDestroy(requestParameters: StagesUserLoginDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.stagesUserLoginDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * UserLoginStage Viewset
     */
    async stagesUserLoginListRaw(requestParameters: StagesUserLoginListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedUserLoginStageList>> {
        const queryParameters: any = {};

        if (requestParameters.geoipBinding !== undefined) {
            queryParameters['geoip_binding'] = requestParameters.geoipBinding;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.networkBinding !== undefined) {
            queryParameters['network_binding'] = requestParameters.networkBinding;
        }

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.rememberMeOffset !== undefined) {
            queryParameters['remember_me_offset'] = requestParameters.rememberMeOffset;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.sessionDuration !== undefined) {
            queryParameters['session_duration'] = requestParameters.sessionDuration;
        }

        if (requestParameters.stageUuid !== undefined) {
            queryParameters['stage_uuid'] = requestParameters.stageUuid;
        }

        if (requestParameters.terminateOtherSessions !== undefined) {
            queryParameters['terminate_other_sessions'] = requestParameters.terminateOtherSessions;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/user_login/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedUserLoginStageListFromJSON(jsonValue));
    }

    /**
     * UserLoginStage Viewset
     */
    async stagesUserLoginList(requestParameters: StagesUserLoginListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedUserLoginStageList> {
        const response = await this.stagesUserLoginListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * UserLoginStage Viewset
     */
    async stagesUserLoginPartialUpdateRaw(requestParameters: StagesUserLoginPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserLoginStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesUserLoginPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/user_login/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedUserLoginStageRequestToJSON(requestParameters.patchedUserLoginStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserLoginStageFromJSON(jsonValue));
    }

    /**
     * UserLoginStage Viewset
     */
    async stagesUserLoginPartialUpdate(requestParameters: StagesUserLoginPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserLoginStage> {
        const response = await this.stagesUserLoginPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * UserLoginStage Viewset
     */
    async stagesUserLoginRetrieveRaw(requestParameters: StagesUserLoginRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserLoginStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesUserLoginRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/user_login/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserLoginStageFromJSON(jsonValue));
    }

    /**
     * UserLoginStage Viewset
     */
    async stagesUserLoginRetrieve(requestParameters: StagesUserLoginRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserLoginStage> {
        const response = await this.stagesUserLoginRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * UserLoginStage Viewset
     */
    async stagesUserLoginUpdateRaw(requestParameters: StagesUserLoginUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserLoginStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesUserLoginUpdate.');
        }

        if (requestParameters.userLoginStageRequest === null || requestParameters.userLoginStageRequest === undefined) {
            throw new runtime.RequiredError('userLoginStageRequest','Required parameter requestParameters.userLoginStageRequest was null or undefined when calling stagesUserLoginUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/user_login/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserLoginStageRequestToJSON(requestParameters.userLoginStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserLoginStageFromJSON(jsonValue));
    }

    /**
     * UserLoginStage Viewset
     */
    async stagesUserLoginUpdate(requestParameters: StagesUserLoginUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserLoginStage> {
        const response = await this.stagesUserLoginUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all objects that use this object
     */
    async stagesUserLoginUsedByListRaw(requestParameters: StagesUserLoginUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UsedBy>>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesUserLoginUsedByList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/user_login/{stage_uuid}/used_by/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
    }

    /**
     * Get a list of all objects that use this object
     */
    async stagesUserLoginUsedByList(requestParameters: StagesUserLoginUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UsedBy>> {
        const response = await this.stagesUserLoginUsedByListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * UserLogoutStage Viewset
     */
    async stagesUserLogoutCreateRaw(requestParameters: StagesUserLogoutCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserLogoutStage>> {
        if (requestParameters.userLogoutStageRequest === null || requestParameters.userLogoutStageRequest === undefined) {
            throw new runtime.RequiredError('userLogoutStageRequest','Required parameter requestParameters.userLogoutStageRequest was null or undefined when calling stagesUserLogoutCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/user_logout/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserLogoutStageRequestToJSON(requestParameters.userLogoutStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserLogoutStageFromJSON(jsonValue));
    }

    /**
     * UserLogoutStage Viewset
     */
    async stagesUserLogoutCreate(requestParameters: StagesUserLogoutCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserLogoutStage> {
        const response = await this.stagesUserLogoutCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * UserLogoutStage Viewset
     */
    async stagesUserLogoutDestroyRaw(requestParameters: StagesUserLogoutDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesUserLogoutDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/user_logout/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * UserLogoutStage Viewset
     */
    async stagesUserLogoutDestroy(requestParameters: StagesUserLogoutDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.stagesUserLogoutDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * UserLogoutStage Viewset
     */
    async stagesUserLogoutListRaw(requestParameters: StagesUserLogoutListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedUserLogoutStageList>> {
        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.stageUuid !== undefined) {
            queryParameters['stage_uuid'] = requestParameters.stageUuid;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/user_logout/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedUserLogoutStageListFromJSON(jsonValue));
    }

    /**
     * UserLogoutStage Viewset
     */
    async stagesUserLogoutList(requestParameters: StagesUserLogoutListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedUserLogoutStageList> {
        const response = await this.stagesUserLogoutListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * UserLogoutStage Viewset
     */
    async stagesUserLogoutPartialUpdateRaw(requestParameters: StagesUserLogoutPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserLogoutStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesUserLogoutPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/user_logout/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedUserLogoutStageRequestToJSON(requestParameters.patchedUserLogoutStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserLogoutStageFromJSON(jsonValue));
    }

    /**
     * UserLogoutStage Viewset
     */
    async stagesUserLogoutPartialUpdate(requestParameters: StagesUserLogoutPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserLogoutStage> {
        const response = await this.stagesUserLogoutPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * UserLogoutStage Viewset
     */
    async stagesUserLogoutRetrieveRaw(requestParameters: StagesUserLogoutRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserLogoutStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesUserLogoutRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/user_logout/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserLogoutStageFromJSON(jsonValue));
    }

    /**
     * UserLogoutStage Viewset
     */
    async stagesUserLogoutRetrieve(requestParameters: StagesUserLogoutRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserLogoutStage> {
        const response = await this.stagesUserLogoutRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * UserLogoutStage Viewset
     */
    async stagesUserLogoutUpdateRaw(requestParameters: StagesUserLogoutUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserLogoutStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesUserLogoutUpdate.');
        }

        if (requestParameters.userLogoutStageRequest === null || requestParameters.userLogoutStageRequest === undefined) {
            throw new runtime.RequiredError('userLogoutStageRequest','Required parameter requestParameters.userLogoutStageRequest was null or undefined when calling stagesUserLogoutUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/user_logout/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserLogoutStageRequestToJSON(requestParameters.userLogoutStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserLogoutStageFromJSON(jsonValue));
    }

    /**
     * UserLogoutStage Viewset
     */
    async stagesUserLogoutUpdate(requestParameters: StagesUserLogoutUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserLogoutStage> {
        const response = await this.stagesUserLogoutUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all objects that use this object
     */
    async stagesUserLogoutUsedByListRaw(requestParameters: StagesUserLogoutUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UsedBy>>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesUserLogoutUsedByList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/user_logout/{stage_uuid}/used_by/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
    }

    /**
     * Get a list of all objects that use this object
     */
    async stagesUserLogoutUsedByList(requestParameters: StagesUserLogoutUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UsedBy>> {
        const response = await this.stagesUserLogoutUsedByListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * UserWriteStage Viewset
     */
    async stagesUserWriteCreateRaw(requestParameters: StagesUserWriteCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserWriteStage>> {
        if (requestParameters.userWriteStageRequest === null || requestParameters.userWriteStageRequest === undefined) {
            throw new runtime.RequiredError('userWriteStageRequest','Required parameter requestParameters.userWriteStageRequest was null or undefined when calling stagesUserWriteCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/user_write/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: UserWriteStageRequestToJSON(requestParameters.userWriteStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserWriteStageFromJSON(jsonValue));
    }

    /**
     * UserWriteStage Viewset
     */
    async stagesUserWriteCreate(requestParameters: StagesUserWriteCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserWriteStage> {
        const response = await this.stagesUserWriteCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * UserWriteStage Viewset
     */
    async stagesUserWriteDestroyRaw(requestParameters: StagesUserWriteDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesUserWriteDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/user_write/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * UserWriteStage Viewset
     */
    async stagesUserWriteDestroy(requestParameters: StagesUserWriteDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.stagesUserWriteDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * UserWriteStage Viewset
     */
    async stagesUserWriteListRaw(requestParameters: StagesUserWriteListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedUserWriteStageList>> {
        const queryParameters: any = {};

        if (requestParameters.createUsersAsInactive !== undefined) {
            queryParameters['create_users_as_inactive'] = requestParameters.createUsersAsInactive;
        }

        if (requestParameters.createUsersGroup !== undefined) {
            queryParameters['create_users_group'] = requestParameters.createUsersGroup;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.stageUuid !== undefined) {
            queryParameters['stage_uuid'] = requestParameters.stageUuid;
        }

        if (requestParameters.userCreationMode !== undefined) {
            queryParameters['user_creation_mode'] = requestParameters.userCreationMode;
        }

        if (requestParameters.userPathTemplate !== undefined) {
            queryParameters['user_path_template'] = requestParameters.userPathTemplate;
        }

        if (requestParameters.userType !== undefined) {
            queryParameters['user_type'] = requestParameters.userType;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/user_write/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedUserWriteStageListFromJSON(jsonValue));
    }

    /**
     * UserWriteStage Viewset
     */
    async stagesUserWriteList(requestParameters: StagesUserWriteListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedUserWriteStageList> {
        const response = await this.stagesUserWriteListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * UserWriteStage Viewset
     */
    async stagesUserWritePartialUpdateRaw(requestParameters: StagesUserWritePartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserWriteStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesUserWritePartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/user_write/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedUserWriteStageRequestToJSON(requestParameters.patchedUserWriteStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserWriteStageFromJSON(jsonValue));
    }

    /**
     * UserWriteStage Viewset
     */
    async stagesUserWritePartialUpdate(requestParameters: StagesUserWritePartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserWriteStage> {
        const response = await this.stagesUserWritePartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * UserWriteStage Viewset
     */
    async stagesUserWriteRetrieveRaw(requestParameters: StagesUserWriteRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserWriteStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesUserWriteRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/user_write/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserWriteStageFromJSON(jsonValue));
    }

    /**
     * UserWriteStage Viewset
     */
    async stagesUserWriteRetrieve(requestParameters: StagesUserWriteRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserWriteStage> {
        const response = await this.stagesUserWriteRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * UserWriteStage Viewset
     */
    async stagesUserWriteUpdateRaw(requestParameters: StagesUserWriteUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<UserWriteStage>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesUserWriteUpdate.');
        }

        if (requestParameters.userWriteStageRequest === null || requestParameters.userWriteStageRequest === undefined) {
            throw new runtime.RequiredError('userWriteStageRequest','Required parameter requestParameters.userWriteStageRequest was null or undefined when calling stagesUserWriteUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/user_write/{stage_uuid}/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: UserWriteStageRequestToJSON(requestParameters.userWriteStageRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => UserWriteStageFromJSON(jsonValue));
    }

    /**
     * UserWriteStage Viewset
     */
    async stagesUserWriteUpdate(requestParameters: StagesUserWriteUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<UserWriteStage> {
        const response = await this.stagesUserWriteUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all objects that use this object
     */
    async stagesUserWriteUsedByListRaw(requestParameters: StagesUserWriteUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UsedBy>>> {
        if (requestParameters.stageUuid === null || requestParameters.stageUuid === undefined) {
            throw new runtime.RequiredError('stageUuid','Required parameter requestParameters.stageUuid was null or undefined when calling stagesUserWriteUsedByList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/stages/user_write/{stage_uuid}/used_by/`.replace(`{${"stage_uuid"}}`, encodeURIComponent(String(requestParameters.stageUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
    }

    /**
     * Get a list of all objects that use this object
     */
    async stagesUserWriteUsedByList(requestParameters: StagesUserWriteUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UsedBy>> {
        const response = await this.stagesUserWriteUsedByListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const StagesAuthenticatorSmsListAuthTypeEnum = {
    Basic: 'basic',
    Bearer: 'bearer',
    UnknownDefaultOpenApi: '11184809'
} as const;
export type StagesAuthenticatorSmsListAuthTypeEnum = typeof StagesAuthenticatorSmsListAuthTypeEnum[keyof typeof StagesAuthenticatorSmsListAuthTypeEnum];
/**
 * @export
 */
export const StagesAuthenticatorSmsListProviderEnum = {
    Generic: 'generic',
    Twilio: 'twilio',
    UnknownDefaultOpenApi: '11184809'
} as const;
export type StagesAuthenticatorSmsListProviderEnum = typeof StagesAuthenticatorSmsListProviderEnum[keyof typeof StagesAuthenticatorSmsListProviderEnum];
/**
 * @export
 */
export const StagesAuthenticatorTotpListDigitsEnum = {
    _6: '6',
    _8: '8',
    UnknownDefaultOpenApi: '11184809'
} as const;
export type StagesAuthenticatorTotpListDigitsEnum = typeof StagesAuthenticatorTotpListDigitsEnum[keyof typeof StagesAuthenticatorTotpListDigitsEnum];
/**
 * @export
 */
export const StagesAuthenticatorValidateListNotConfiguredActionEnum = {
    Configure: 'configure',
    Deny: 'deny',
    Skip: 'skip',
    UnknownDefaultOpenApi: '11184809'
} as const;
export type StagesAuthenticatorValidateListNotConfiguredActionEnum = typeof StagesAuthenticatorValidateListNotConfiguredActionEnum[keyof typeof StagesAuthenticatorValidateListNotConfiguredActionEnum];
/**
 * @export
 */
export const StagesAuthenticatorWebauthnListAuthenticatorAttachmentEnum = {
    CrossPlatform: 'cross-platform',
    Platform: 'platform',
    UnknownDefaultOpenApi: '11184809'
} as const;
export type StagesAuthenticatorWebauthnListAuthenticatorAttachmentEnum = typeof StagesAuthenticatorWebauthnListAuthenticatorAttachmentEnum[keyof typeof StagesAuthenticatorWebauthnListAuthenticatorAttachmentEnum];
/**
 * @export
 */
export const StagesAuthenticatorWebauthnListResidentKeyRequirementEnum = {
    Discouraged: 'discouraged',
    Preferred: 'preferred',
    Required: 'required',
    UnknownDefaultOpenApi: '11184809'
} as const;
export type StagesAuthenticatorWebauthnListResidentKeyRequirementEnum = typeof StagesAuthenticatorWebauthnListResidentKeyRequirementEnum[keyof typeof StagesAuthenticatorWebauthnListResidentKeyRequirementEnum];
/**
 * @export
 */
export const StagesAuthenticatorWebauthnListUserVerificationEnum = {
    Discouraged: 'discouraged',
    Preferred: 'preferred',
    Required: 'required',
    UnknownDefaultOpenApi: '11184809'
} as const;
export type StagesAuthenticatorWebauthnListUserVerificationEnum = typeof StagesAuthenticatorWebauthnListUserVerificationEnum[keyof typeof StagesAuthenticatorWebauthnListUserVerificationEnum];
/**
 * @export
 */
export const StagesConsentListModeEnum = {
    AlwaysRequire: 'always_require',
    Expiring: 'expiring',
    Permanent: 'permanent',
    UnknownDefaultOpenApi: '11184809'
} as const;
export type StagesConsentListModeEnum = typeof StagesConsentListModeEnum[keyof typeof StagesConsentListModeEnum];
/**
 * @export
 */
export const StagesPromptPromptsListTypeEnum = {
    AkLocale: 'ak-locale',
    Checkbox: 'checkbox',
    Date: 'date',
    DateTime: 'date-time',
    Dropdown: 'dropdown',
    Email: 'email',
    File: 'file',
    Hidden: 'hidden',
    Number: 'number',
    Password: 'password',
    RadioButtonGroup: 'radio-button-group',
    Separator: 'separator',
    Static: 'static',
    Text: 'text',
    TextArea: 'text_area',
    TextAreaReadOnly: 'text_area_read_only',
    TextReadOnly: 'text_read_only',
    Username: 'username',
    UnknownDefaultOpenApi: '11184809'
} as const;
export type StagesPromptPromptsListTypeEnum = typeof StagesPromptPromptsListTypeEnum[keyof typeof StagesPromptPromptsListTypeEnum];
/**
 * @export
 */
export const StagesUserLoginListGeoipBindingEnum = {
    BindContinent: 'bind_continent',
    BindContinentCountry: 'bind_continent_country',
    BindContinentCountryCity: 'bind_continent_country_city',
    NoBinding: 'no_binding',
    UnknownDefaultOpenApi: '11184809'
} as const;
export type StagesUserLoginListGeoipBindingEnum = typeof StagesUserLoginListGeoipBindingEnum[keyof typeof StagesUserLoginListGeoipBindingEnum];
/**
 * @export
 */
export const StagesUserLoginListNetworkBindingEnum = {
    BindAsn: 'bind_asn',
    BindAsnNetwork: 'bind_asn_network',
    BindAsnNetworkIp: 'bind_asn_network_ip',
    NoBinding: 'no_binding',
    UnknownDefaultOpenApi: '11184809'
} as const;
export type StagesUserLoginListNetworkBindingEnum = typeof StagesUserLoginListNetworkBindingEnum[keyof typeof StagesUserLoginListNetworkBindingEnum];
/**
 * @export
 */
export const StagesUserWriteListUserCreationModeEnum = {
    AlwaysCreate: 'always_create',
    CreateWhenRequired: 'create_when_required',
    NeverCreate: 'never_create',
    UnknownDefaultOpenApi: '11184809'
} as const;
export type StagesUserWriteListUserCreationModeEnum = typeof StagesUserWriteListUserCreationModeEnum[keyof typeof StagesUserWriteListUserCreationModeEnum];
/**
 * @export
 */
export const StagesUserWriteListUserTypeEnum = {
    External: 'external',
    Internal: 'internal',
    InternalServiceAccount: 'internal_service_account',
    ServiceAccount: 'service_account',
    UnknownDefaultOpenApi: '11184809'
} as const;
export type StagesUserWriteListUserTypeEnum = typeof StagesUserWriteListUserTypeEnum[keyof typeof StagesUserWriteListUserTypeEnum];
