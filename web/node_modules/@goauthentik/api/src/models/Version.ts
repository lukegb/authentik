/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Get running and latest version.
 * @export
 * @interface Version
 */
export interface Version {
    /**
     * Get current version
     * @type {string}
     * @memberof Version
     */
    readonly versionCurrent: string;
    /**
     * Get latest version from cache
     * @type {string}
     * @memberof Version
     */
    readonly versionLatest: string;
    /**
     * Get build hash, if version is not latest or released
     * @type {string}
     * @memberof Version
     */
    readonly buildHash: string;
    /**
     * Check if we're running the latest version
     * @type {boolean}
     * @memberof Version
     */
    readonly outdated: boolean;
}

/**
 * Check if a given object implements the Version interface.
 */
export function instanceOfVersion(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "versionCurrent" in value;
    isInstance = isInstance && "versionLatest" in value;
    isInstance = isInstance && "buildHash" in value;
    isInstance = isInstance && "outdated" in value;

    return isInstance;
}

export function VersionFromJSON(json: any): Version {
    return VersionFromJSONTyped(json, false);
}

export function VersionFromJSONTyped(json: any, ignoreDiscriminator: boolean): Version {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'versionCurrent': json['version_current'],
        'versionLatest': json['version_latest'],
        'buildHash': json['build_hash'],
        'outdated': json['outdated'],
    };
}

export function VersionToJSON(value?: Version | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
    };
}

