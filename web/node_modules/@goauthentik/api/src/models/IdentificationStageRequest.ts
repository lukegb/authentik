/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FlowSetRequest } from './FlowSetRequest';
import {
    FlowSetRequestFromJSON,
    FlowSetRequestFromJSONTyped,
    FlowSetRequestToJSON,
} from './FlowSetRequest';
import type { UserFieldsEnum } from './UserFieldsEnum';
import {
    UserFieldsEnumFromJSON,
    UserFieldsEnumFromJSONTyped,
    UserFieldsEnumToJSON,
} from './UserFieldsEnum';

/**
 * IdentificationStage Serializer
 * @export
 * @interface IdentificationStageRequest
 */
export interface IdentificationStageRequest {
    /**
     * 
     * @type {string}
     * @memberof IdentificationStageRequest
     */
    name: string;
    /**
     * 
     * @type {Array<FlowSetRequest>}
     * @memberof IdentificationStageRequest
     */
    flowSet?: Array<FlowSetRequest>;
    /**
     * Fields of the user object to match against. (Hold shift to select multiple options)
     * @type {Array<UserFieldsEnum>}
     * @memberof IdentificationStageRequest
     */
    userFields?: Array<UserFieldsEnum>;
    /**
     * When set, shows a password field, instead of showing the password field as seaprate step.
     * @type {string}
     * @memberof IdentificationStageRequest
     */
    passwordStage?: string | null;
    /**
     * When enabled, user fields are matched regardless of their casing.
     * @type {boolean}
     * @memberof IdentificationStageRequest
     */
    caseInsensitiveMatching?: boolean;
    /**
     * When a valid username/email has been entered, and this option is enabled, the user's username and avatar will be shown. Otherwise, the text that the user entered will be shown
     * @type {boolean}
     * @memberof IdentificationStageRequest
     */
    showMatchedUser?: boolean;
    /**
     * Optional enrollment flow, which is linked at the bottom of the page.
     * @type {string}
     * @memberof IdentificationStageRequest
     */
    enrollmentFlow?: string | null;
    /**
     * Optional recovery flow, which is linked at the bottom of the page.
     * @type {string}
     * @memberof IdentificationStageRequest
     */
    recoveryFlow?: string | null;
    /**
     * Optional passwordless flow, which is linked at the bottom of the page.
     * @type {string}
     * @memberof IdentificationStageRequest
     */
    passwordlessFlow?: string | null;
    /**
     * Specify which sources should be shown.
     * @type {Array<string>}
     * @memberof IdentificationStageRequest
     */
    sources?: Array<string>;
    /**
     * 
     * @type {boolean}
     * @memberof IdentificationStageRequest
     */
    showSourceLabels?: boolean;
    /**
     * When enabled, the stage will succeed and continue even when incorrect user info is entered.
     * @type {boolean}
     * @memberof IdentificationStageRequest
     */
    pretendUserExists?: boolean;
}

/**
 * Check if a given object implements the IdentificationStageRequest interface.
 */
export function instanceOfIdentificationStageRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;

    return isInstance;
}

export function IdentificationStageRequestFromJSON(json: any): IdentificationStageRequest {
    return IdentificationStageRequestFromJSONTyped(json, false);
}

export function IdentificationStageRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): IdentificationStageRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'flowSet': !exists(json, 'flow_set') ? undefined : ((json['flow_set'] as Array<any>).map(FlowSetRequestFromJSON)),
        'userFields': !exists(json, 'user_fields') ? undefined : ((json['user_fields'] as Array<any>).map(UserFieldsEnumFromJSON)),
        'passwordStage': !exists(json, 'password_stage') ? undefined : json['password_stage'],
        'caseInsensitiveMatching': !exists(json, 'case_insensitive_matching') ? undefined : json['case_insensitive_matching'],
        'showMatchedUser': !exists(json, 'show_matched_user') ? undefined : json['show_matched_user'],
        'enrollmentFlow': !exists(json, 'enrollment_flow') ? undefined : json['enrollment_flow'],
        'recoveryFlow': !exists(json, 'recovery_flow') ? undefined : json['recovery_flow'],
        'passwordlessFlow': !exists(json, 'passwordless_flow') ? undefined : json['passwordless_flow'],
        'sources': !exists(json, 'sources') ? undefined : json['sources'],
        'showSourceLabels': !exists(json, 'show_source_labels') ? undefined : json['show_source_labels'],
        'pretendUserExists': !exists(json, 'pretend_user_exists') ? undefined : json['pretend_user_exists'],
    };
}

export function IdentificationStageRequestToJSON(value?: IdentificationStageRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'flow_set': value.flowSet === undefined ? undefined : ((value.flowSet as Array<any>).map(FlowSetRequestToJSON)),
        'user_fields': value.userFields === undefined ? undefined : ((value.userFields as Array<any>).map(UserFieldsEnumToJSON)),
        'password_stage': value.passwordStage,
        'case_insensitive_matching': value.caseInsensitiveMatching,
        'show_matched_user': value.showMatchedUser,
        'enrollment_flow': value.enrollmentFlow,
        'recovery_flow': value.recoveryFlow,
        'passwordless_flow': value.passwordlessFlow,
        'sources': value.sources,
        'show_source_labels': value.showSourceLabels,
        'pretend_user_exists': value.pretendUserExists,
    };
}

