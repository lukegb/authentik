/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * ScopeMapping Serializer
 * @export
 * @interface PatchedScopeMappingRequest
 */
export interface PatchedScopeMappingRequest {
    /**
     * Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
     * @type {string}
     * @memberof PatchedScopeMappingRequest
     */
    managed?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedScopeMappingRequest
     */
    name?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedScopeMappingRequest
     */
    expression?: string;
    /**
     * Scope name requested by the client
     * @type {string}
     * @memberof PatchedScopeMappingRequest
     */
    scopeName?: string;
    /**
     * Description shown to the user when consenting. If left empty, the user won't be informed.
     * @type {string}
     * @memberof PatchedScopeMappingRequest
     */
    description?: string;
}

/**
 * Check if a given object implements the PatchedScopeMappingRequest interface.
 */
export function instanceOfPatchedScopeMappingRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PatchedScopeMappingRequestFromJSON(json: any): PatchedScopeMappingRequest {
    return PatchedScopeMappingRequestFromJSONTyped(json, false);
}

export function PatchedScopeMappingRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PatchedScopeMappingRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'managed': !exists(json, 'managed') ? undefined : json['managed'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'expression': !exists(json, 'expression') ? undefined : json['expression'],
        'scopeName': !exists(json, 'scope_name') ? undefined : json['scope_name'],
        'description': !exists(json, 'description') ? undefined : json['description'],
    };
}

export function PatchedScopeMappingRequestToJSON(value?: PatchedScopeMappingRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'managed': value.managed,
        'name': value.name,
        'expression': value.expression,
        'scope_name': value.scopeName,
        'description': value.description,
    };
}

