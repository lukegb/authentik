/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as runtime from '../runtime';
import { CoordinateFromJSON, EventFromJSON, EventRequestToJSON, EventTopPerUserFromJSON, NotificationFromJSON, NotificationRequestToJSON, NotificationRuleFromJSON, NotificationRuleRequestToJSON, NotificationTransportFromJSON, NotificationTransportRequestToJSON, NotificationTransportTestFromJSON, PaginatedEventListFromJSON, PaginatedNotificationListFromJSON, PaginatedNotificationRuleListFromJSON, PaginatedNotificationTransportListFromJSON, PaginatedSystemTaskListFromJSON, PatchedEventRequestToJSON, PatchedNotificationRequestToJSON, PatchedNotificationRuleRequestToJSON, PatchedNotificationTransportRequestToJSON, SystemTaskFromJSON, TypeCreateFromJSON, UsedByFromJSON, } from '../models';
/**
 *
 */
export class EventsApi extends runtime.BaseAPI {
    /**
     * Get all actions
     */
    eventsEventsActionsListRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/events/events/actions/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TypeCreateFromJSON));
        });
    }
    /**
     * Get all actions
     */
    eventsEventsActionsList(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.eventsEventsActionsListRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Event Read-Only Viewset
     */
    eventsEventsCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.eventRequest === null || requestParameters.eventRequest === undefined) {
                throw new runtime.RequiredError('eventRequest', 'Required parameter requestParameters.eventRequest was null or undefined when calling eventsEventsCreate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/events/events/`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: EventRequestToJSON(requestParameters.eventRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => EventFromJSON(jsonValue));
        });
    }
    /**
     * Event Read-Only Viewset
     */
    eventsEventsCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.eventsEventsCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Event Read-Only Viewset
     */
    eventsEventsDestroyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.eventUuid === null || requestParameters.eventUuid === undefined) {
                throw new runtime.RequiredError('eventUuid', 'Required parameter requestParameters.eventUuid was null or undefined when calling eventsEventsDestroy.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/events/events/{event_uuid}/`.replace(`{${"event_uuid"}}`, encodeURIComponent(String(requestParameters.eventUuid))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Event Read-Only Viewset
     */
    eventsEventsDestroy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.eventsEventsDestroyRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Event Read-Only Viewset
     */
    eventsEventsListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.action !== undefined) {
                queryParameters['action'] = requestParameters.action;
            }
            if (requestParameters.brandName !== undefined) {
                queryParameters['brand_name'] = requestParameters.brandName;
            }
            if (requestParameters.clientIp !== undefined) {
                queryParameters['client_ip'] = requestParameters.clientIp;
            }
            if (requestParameters.contextAuthorizedApp !== undefined) {
                queryParameters['context_authorized_app'] = requestParameters.contextAuthorizedApp;
            }
            if (requestParameters.contextModelApp !== undefined) {
                queryParameters['context_model_app'] = requestParameters.contextModelApp;
            }
            if (requestParameters.contextModelName !== undefined) {
                queryParameters['context_model_name'] = requestParameters.contextModelName;
            }
            if (requestParameters.contextModelPk !== undefined) {
                queryParameters['context_model_pk'] = requestParameters.contextModelPk;
            }
            if (requestParameters.ordering !== undefined) {
                queryParameters['ordering'] = requestParameters.ordering;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.pageSize !== undefined) {
                queryParameters['page_size'] = requestParameters.pageSize;
            }
            if (requestParameters.search !== undefined) {
                queryParameters['search'] = requestParameters.search;
            }
            if (requestParameters.username !== undefined) {
                queryParameters['username'] = requestParameters.username;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/events/events/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedEventListFromJSON(jsonValue));
        });
    }
    /**
     * Event Read-Only Viewset
     */
    eventsEventsList(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.eventsEventsListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Event Read-Only Viewset
     */
    eventsEventsPartialUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.eventUuid === null || requestParameters.eventUuid === undefined) {
                throw new runtime.RequiredError('eventUuid', 'Required parameter requestParameters.eventUuid was null or undefined when calling eventsEventsPartialUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/events/events/{event_uuid}/`.replace(`{${"event_uuid"}}`, encodeURIComponent(String(requestParameters.eventUuid))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: PatchedEventRequestToJSON(requestParameters.patchedEventRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => EventFromJSON(jsonValue));
        });
    }
    /**
     * Event Read-Only Viewset
     */
    eventsEventsPartialUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.eventsEventsPartialUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get the count of events per month
     */
    eventsEventsPerMonthListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.action !== undefined) {
                queryParameters['action'] = requestParameters.action;
            }
            if (requestParameters.query !== undefined) {
                queryParameters['query'] = requestParameters.query;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/events/events/per_month/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CoordinateFromJSON));
        });
    }
    /**
     * Get the count of events per month
     */
    eventsEventsPerMonthList(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.eventsEventsPerMonthListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Event Read-Only Viewset
     */
    eventsEventsRetrieveRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.eventUuid === null || requestParameters.eventUuid === undefined) {
                throw new runtime.RequiredError('eventUuid', 'Required parameter requestParameters.eventUuid was null or undefined when calling eventsEventsRetrieve.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/events/events/{event_uuid}/`.replace(`{${"event_uuid"}}`, encodeURIComponent(String(requestParameters.eventUuid))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => EventFromJSON(jsonValue));
        });
    }
    /**
     * Event Read-Only Viewset
     */
    eventsEventsRetrieve(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.eventsEventsRetrieveRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get the top_n events grouped by user count
     */
    eventsEventsTopPerUserListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.action !== undefined) {
                queryParameters['action'] = requestParameters.action;
            }
            if (requestParameters.topN !== undefined) {
                queryParameters['top_n'] = requestParameters.topN;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/events/events/top_per_user/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(EventTopPerUserFromJSON));
        });
    }
    /**
     * Get the top_n events grouped by user count
     */
    eventsEventsTopPerUserList(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.eventsEventsTopPerUserListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Event Read-Only Viewset
     */
    eventsEventsUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.eventUuid === null || requestParameters.eventUuid === undefined) {
                throw new runtime.RequiredError('eventUuid', 'Required parameter requestParameters.eventUuid was null or undefined when calling eventsEventsUpdate.');
            }
            if (requestParameters.eventRequest === null || requestParameters.eventRequest === undefined) {
                throw new runtime.RequiredError('eventRequest', 'Required parameter requestParameters.eventRequest was null or undefined when calling eventsEventsUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/events/events/{event_uuid}/`.replace(`{${"event_uuid"}}`, encodeURIComponent(String(requestParameters.eventUuid))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: EventRequestToJSON(requestParameters.eventRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => EventFromJSON(jsonValue));
        });
    }
    /**
     * Event Read-Only Viewset
     */
    eventsEventsUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.eventsEventsUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get event volume for specified filters and timeframe
     */
    eventsEventsVolumeListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.action !== undefined) {
                queryParameters['action'] = requestParameters.action;
            }
            if (requestParameters.brandName !== undefined) {
                queryParameters['brand_name'] = requestParameters.brandName;
            }
            if (requestParameters.clientIp !== undefined) {
                queryParameters['client_ip'] = requestParameters.clientIp;
            }
            if (requestParameters.contextAuthorizedApp !== undefined) {
                queryParameters['context_authorized_app'] = requestParameters.contextAuthorizedApp;
            }
            if (requestParameters.contextModelApp !== undefined) {
                queryParameters['context_model_app'] = requestParameters.contextModelApp;
            }
            if (requestParameters.contextModelName !== undefined) {
                queryParameters['context_model_name'] = requestParameters.contextModelName;
            }
            if (requestParameters.contextModelPk !== undefined) {
                queryParameters['context_model_pk'] = requestParameters.contextModelPk;
            }
            if (requestParameters.ordering !== undefined) {
                queryParameters['ordering'] = requestParameters.ordering;
            }
            if (requestParameters.search !== undefined) {
                queryParameters['search'] = requestParameters.search;
            }
            if (requestParameters.username !== undefined) {
                queryParameters['username'] = requestParameters.username;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/events/events/volume/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(CoordinateFromJSON));
        });
    }
    /**
     * Get event volume for specified filters and timeframe
     */
    eventsEventsVolumeList(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.eventsEventsVolumeListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Notification Viewset
     */
    eventsNotificationsDestroyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
                throw new runtime.RequiredError('uuid', 'Required parameter requestParameters.uuid was null or undefined when calling eventsNotificationsDestroy.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/events/notifications/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Notification Viewset
     */
    eventsNotificationsDestroy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.eventsNotificationsDestroyRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Notification Viewset
     */
    eventsNotificationsListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.body !== undefined) {
                queryParameters['body'] = requestParameters.body;
            }
            if (requestParameters.created !== undefined) {
                queryParameters['created'] = requestParameters.created.toISOString();
            }
            if (requestParameters.event !== undefined) {
                queryParameters['event'] = requestParameters.event;
            }
            if (requestParameters.ordering !== undefined) {
                queryParameters['ordering'] = requestParameters.ordering;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.pageSize !== undefined) {
                queryParameters['page_size'] = requestParameters.pageSize;
            }
            if (requestParameters.search !== undefined) {
                queryParameters['search'] = requestParameters.search;
            }
            if (requestParameters.seen !== undefined) {
                queryParameters['seen'] = requestParameters.seen;
            }
            if (requestParameters.severity !== undefined) {
                queryParameters['severity'] = requestParameters.severity;
            }
            if (requestParameters.user !== undefined) {
                queryParameters['user'] = requestParameters.user;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/events/notifications/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedNotificationListFromJSON(jsonValue));
        });
    }
    /**
     * Notification Viewset
     */
    eventsNotificationsList(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.eventsNotificationsListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Mark all the user\'s notifications as seen
     */
    eventsNotificationsMarkAllSeenCreateRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/events/notifications/mark_all_seen/`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Mark all the user\'s notifications as seen
     */
    eventsNotificationsMarkAllSeenCreate(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.eventsNotificationsMarkAllSeenCreateRaw(initOverrides);
        });
    }
    /**
     * Notification Viewset
     */
    eventsNotificationsPartialUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
                throw new runtime.RequiredError('uuid', 'Required parameter requestParameters.uuid was null or undefined when calling eventsNotificationsPartialUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/events/notifications/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: PatchedNotificationRequestToJSON(requestParameters.patchedNotificationRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => NotificationFromJSON(jsonValue));
        });
    }
    /**
     * Notification Viewset
     */
    eventsNotificationsPartialUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.eventsNotificationsPartialUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Notification Viewset
     */
    eventsNotificationsRetrieveRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
                throw new runtime.RequiredError('uuid', 'Required parameter requestParameters.uuid was null or undefined when calling eventsNotificationsRetrieve.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/events/notifications/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => NotificationFromJSON(jsonValue));
        });
    }
    /**
     * Notification Viewset
     */
    eventsNotificationsRetrieve(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.eventsNotificationsRetrieveRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Notification Viewset
     */
    eventsNotificationsUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
                throw new runtime.RequiredError('uuid', 'Required parameter requestParameters.uuid was null or undefined when calling eventsNotificationsUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/events/notifications/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: NotificationRequestToJSON(requestParameters.notificationRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => NotificationFromJSON(jsonValue));
        });
    }
    /**
     * Notification Viewset
     */
    eventsNotificationsUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.eventsNotificationsUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of all objects that use this object
     */
    eventsNotificationsUsedByListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
                throw new runtime.RequiredError('uuid', 'Required parameter requestParameters.uuid was null or undefined when calling eventsNotificationsUsedByList.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/events/notifications/{uuid}/used_by/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
        });
    }
    /**
     * Get a list of all objects that use this object
     */
    eventsNotificationsUsedByList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.eventsNotificationsUsedByListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * NotificationRule Viewset
     */
    eventsRulesCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.notificationRuleRequest === null || requestParameters.notificationRuleRequest === undefined) {
                throw new runtime.RequiredError('notificationRuleRequest', 'Required parameter requestParameters.notificationRuleRequest was null or undefined when calling eventsRulesCreate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/events/rules/`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: NotificationRuleRequestToJSON(requestParameters.notificationRuleRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => NotificationRuleFromJSON(jsonValue));
        });
    }
    /**
     * NotificationRule Viewset
     */
    eventsRulesCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.eventsRulesCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * NotificationRule Viewset
     */
    eventsRulesDestroyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.pbmUuid === null || requestParameters.pbmUuid === undefined) {
                throw new runtime.RequiredError('pbmUuid', 'Required parameter requestParameters.pbmUuid was null or undefined when calling eventsRulesDestroy.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/events/rules/{pbm_uuid}/`.replace(`{${"pbm_uuid"}}`, encodeURIComponent(String(requestParameters.pbmUuid))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * NotificationRule Viewset
     */
    eventsRulesDestroy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.eventsRulesDestroyRaw(requestParameters, initOverrides);
        });
    }
    /**
     * NotificationRule Viewset
     */
    eventsRulesListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.groupName !== undefined) {
                queryParameters['group__name'] = requestParameters.groupName;
            }
            if (requestParameters.name !== undefined) {
                queryParameters['name'] = requestParameters.name;
            }
            if (requestParameters.ordering !== undefined) {
                queryParameters['ordering'] = requestParameters.ordering;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.pageSize !== undefined) {
                queryParameters['page_size'] = requestParameters.pageSize;
            }
            if (requestParameters.search !== undefined) {
                queryParameters['search'] = requestParameters.search;
            }
            if (requestParameters.severity !== undefined) {
                queryParameters['severity'] = requestParameters.severity;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/events/rules/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedNotificationRuleListFromJSON(jsonValue));
        });
    }
    /**
     * NotificationRule Viewset
     */
    eventsRulesList(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.eventsRulesListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * NotificationRule Viewset
     */
    eventsRulesPartialUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.pbmUuid === null || requestParameters.pbmUuid === undefined) {
                throw new runtime.RequiredError('pbmUuid', 'Required parameter requestParameters.pbmUuid was null or undefined when calling eventsRulesPartialUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/events/rules/{pbm_uuid}/`.replace(`{${"pbm_uuid"}}`, encodeURIComponent(String(requestParameters.pbmUuid))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: PatchedNotificationRuleRequestToJSON(requestParameters.patchedNotificationRuleRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => NotificationRuleFromJSON(jsonValue));
        });
    }
    /**
     * NotificationRule Viewset
     */
    eventsRulesPartialUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.eventsRulesPartialUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * NotificationRule Viewset
     */
    eventsRulesRetrieveRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.pbmUuid === null || requestParameters.pbmUuid === undefined) {
                throw new runtime.RequiredError('pbmUuid', 'Required parameter requestParameters.pbmUuid was null or undefined when calling eventsRulesRetrieve.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/events/rules/{pbm_uuid}/`.replace(`{${"pbm_uuid"}}`, encodeURIComponent(String(requestParameters.pbmUuid))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => NotificationRuleFromJSON(jsonValue));
        });
    }
    /**
     * NotificationRule Viewset
     */
    eventsRulesRetrieve(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.eventsRulesRetrieveRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * NotificationRule Viewset
     */
    eventsRulesUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.pbmUuid === null || requestParameters.pbmUuid === undefined) {
                throw new runtime.RequiredError('pbmUuid', 'Required parameter requestParameters.pbmUuid was null or undefined when calling eventsRulesUpdate.');
            }
            if (requestParameters.notificationRuleRequest === null || requestParameters.notificationRuleRequest === undefined) {
                throw new runtime.RequiredError('notificationRuleRequest', 'Required parameter requestParameters.notificationRuleRequest was null or undefined when calling eventsRulesUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/events/rules/{pbm_uuid}/`.replace(`{${"pbm_uuid"}}`, encodeURIComponent(String(requestParameters.pbmUuid))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: NotificationRuleRequestToJSON(requestParameters.notificationRuleRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => NotificationRuleFromJSON(jsonValue));
        });
    }
    /**
     * NotificationRule Viewset
     */
    eventsRulesUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.eventsRulesUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of all objects that use this object
     */
    eventsRulesUsedByListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.pbmUuid === null || requestParameters.pbmUuid === undefined) {
                throw new runtime.RequiredError('pbmUuid', 'Required parameter requestParameters.pbmUuid was null or undefined when calling eventsRulesUsedByList.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/events/rules/{pbm_uuid}/used_by/`.replace(`{${"pbm_uuid"}}`, encodeURIComponent(String(requestParameters.pbmUuid))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
        });
    }
    /**
     * Get a list of all objects that use this object
     */
    eventsRulesUsedByList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.eventsRulesUsedByListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Read-only view set that returns all background tasks
     */
    eventsSystemTasksListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.name !== undefined) {
                queryParameters['name'] = requestParameters.name;
            }
            if (requestParameters.ordering !== undefined) {
                queryParameters['ordering'] = requestParameters.ordering;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.pageSize !== undefined) {
                queryParameters['page_size'] = requestParameters.pageSize;
            }
            if (requestParameters.search !== undefined) {
                queryParameters['search'] = requestParameters.search;
            }
            if (requestParameters.status !== undefined) {
                queryParameters['status'] = requestParameters.status;
            }
            if (requestParameters.uid !== undefined) {
                queryParameters['uid'] = requestParameters.uid;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/events/system_tasks/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedSystemTaskListFromJSON(jsonValue));
        });
    }
    /**
     * Read-only view set that returns all background tasks
     */
    eventsSystemTasksList(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.eventsSystemTasksListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Read-only view set that returns all background tasks
     */
    eventsSystemTasksRetrieveRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
                throw new runtime.RequiredError('uuid', 'Required parameter requestParameters.uuid was null or undefined when calling eventsSystemTasksRetrieve.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/events/system_tasks/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => SystemTaskFromJSON(jsonValue));
        });
    }
    /**
     * Read-only view set that returns all background tasks
     */
    eventsSystemTasksRetrieve(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.eventsSystemTasksRetrieveRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Run task
     */
    eventsSystemTasksRunCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
                throw new runtime.RequiredError('uuid', 'Required parameter requestParameters.uuid was null or undefined when calling eventsSystemTasksRunCreate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/events/system_tasks/{uuid}/run/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Run task
     */
    eventsSystemTasksRunCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.eventsSystemTasksRunCreateRaw(requestParameters, initOverrides);
        });
    }
    /**
     * NotificationTransport Viewset
     */
    eventsTransportsCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.notificationTransportRequest === null || requestParameters.notificationTransportRequest === undefined) {
                throw new runtime.RequiredError('notificationTransportRequest', 'Required parameter requestParameters.notificationTransportRequest was null or undefined when calling eventsTransportsCreate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/events/transports/`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: NotificationTransportRequestToJSON(requestParameters.notificationTransportRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => NotificationTransportFromJSON(jsonValue));
        });
    }
    /**
     * NotificationTransport Viewset
     */
    eventsTransportsCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.eventsTransportsCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * NotificationTransport Viewset
     */
    eventsTransportsDestroyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
                throw new runtime.RequiredError('uuid', 'Required parameter requestParameters.uuid was null or undefined when calling eventsTransportsDestroy.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/events/transports/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * NotificationTransport Viewset
     */
    eventsTransportsDestroy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.eventsTransportsDestroyRaw(requestParameters, initOverrides);
        });
    }
    /**
     * NotificationTransport Viewset
     */
    eventsTransportsListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.mode !== undefined) {
                queryParameters['mode'] = requestParameters.mode;
            }
            if (requestParameters.name !== undefined) {
                queryParameters['name'] = requestParameters.name;
            }
            if (requestParameters.ordering !== undefined) {
                queryParameters['ordering'] = requestParameters.ordering;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.pageSize !== undefined) {
                queryParameters['page_size'] = requestParameters.pageSize;
            }
            if (requestParameters.search !== undefined) {
                queryParameters['search'] = requestParameters.search;
            }
            if (requestParameters.sendOnce !== undefined) {
                queryParameters['send_once'] = requestParameters.sendOnce;
            }
            if (requestParameters.webhookUrl !== undefined) {
                queryParameters['webhook_url'] = requestParameters.webhookUrl;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/events/transports/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedNotificationTransportListFromJSON(jsonValue));
        });
    }
    /**
     * NotificationTransport Viewset
     */
    eventsTransportsList(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.eventsTransportsListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * NotificationTransport Viewset
     */
    eventsTransportsPartialUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
                throw new runtime.RequiredError('uuid', 'Required parameter requestParameters.uuid was null or undefined when calling eventsTransportsPartialUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/events/transports/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: PatchedNotificationTransportRequestToJSON(requestParameters.patchedNotificationTransportRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => NotificationTransportFromJSON(jsonValue));
        });
    }
    /**
     * NotificationTransport Viewset
     */
    eventsTransportsPartialUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.eventsTransportsPartialUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * NotificationTransport Viewset
     */
    eventsTransportsRetrieveRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
                throw new runtime.RequiredError('uuid', 'Required parameter requestParameters.uuid was null or undefined when calling eventsTransportsRetrieve.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/events/transports/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => NotificationTransportFromJSON(jsonValue));
        });
    }
    /**
     * NotificationTransport Viewset
     */
    eventsTransportsRetrieve(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.eventsTransportsRetrieveRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Send example notification using selected transport. Requires Modify permissions.
     */
    eventsTransportsTestCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
                throw new runtime.RequiredError('uuid', 'Required parameter requestParameters.uuid was null or undefined when calling eventsTransportsTestCreate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/events/transports/{uuid}/test/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => NotificationTransportTestFromJSON(jsonValue));
        });
    }
    /**
     * Send example notification using selected transport. Requires Modify permissions.
     */
    eventsTransportsTestCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.eventsTransportsTestCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * NotificationTransport Viewset
     */
    eventsTransportsUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
                throw new runtime.RequiredError('uuid', 'Required parameter requestParameters.uuid was null or undefined when calling eventsTransportsUpdate.');
            }
            if (requestParameters.notificationTransportRequest === null || requestParameters.notificationTransportRequest === undefined) {
                throw new runtime.RequiredError('notificationTransportRequest', 'Required parameter requestParameters.notificationTransportRequest was null or undefined when calling eventsTransportsUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/events/transports/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: NotificationTransportRequestToJSON(requestParameters.notificationTransportRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => NotificationTransportFromJSON(jsonValue));
        });
    }
    /**
     * NotificationTransport Viewset
     */
    eventsTransportsUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.eventsTransportsUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of all objects that use this object
     */
    eventsTransportsUsedByListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
                throw new runtime.RequiredError('uuid', 'Required parameter requestParameters.uuid was null or undefined when calling eventsTransportsUsedByList.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/events/transports/{uuid}/used_by/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
        });
    }
    /**
     * Get a list of all objects that use this object
     */
    eventsTransportsUsedByList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.eventsTransportsUsedByListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
/**
 * @export
 */
export const EventsNotificationsListSeverityEnum = {
    Alert: 'alert',
    Notice: 'notice',
    Warning: 'warning',
    UnknownDefaultOpenApi: '11184809'
};
/**
 * @export
 */
export const EventsRulesListSeverityEnum = {
    Alert: 'alert',
    Notice: 'notice',
    Warning: 'warning',
    UnknownDefaultOpenApi: '11184809'
};
/**
 * @export
 */
export const EventsSystemTasksListStatusEnum = {
    Error: 'error',
    Successful: 'successful',
    Unknown: 'unknown',
    Warning: 'warning',
    UnknownDefaultOpenApi: '11184809'
};
/**
 * @export
 */
export const EventsTransportsListModeEnum = {
    Email: 'email',
    Local: 'local',
    Webhook: 'webhook',
    WebhookSlack: 'webhook_slack',
    UnknownDefaultOpenApi: '11184809'
};
