/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SystemInfoRuntime } from './SystemInfoRuntime';
import {
    SystemInfoRuntimeFromJSON,
    SystemInfoRuntimeFromJSONTyped,
    SystemInfoRuntimeToJSON,
} from './SystemInfoRuntime';

/**
 * Get system information.
 * @export
 * @interface SystemInfo
 */
export interface SystemInfo {
    /**
     * Get HTTP Request headers
     * @type {{ [key: string]: string; }}
     * @memberof SystemInfo
     */
    readonly httpHeaders: { [key: string]: string; };
    /**
     * Get HTTP host
     * @type {string}
     * @memberof SystemInfo
     */
    readonly httpHost: string;
    /**
     * Get HTTP Secure flag
     * @type {boolean}
     * @memberof SystemInfo
     */
    readonly httpIsSecure: boolean;
    /**
     * 
     * @type {SystemInfoRuntime}
     * @memberof SystemInfo
     */
    runtime: SystemInfoRuntime;
    /**
     * Currently active brand
     * @type {string}
     * @memberof SystemInfo
     */
    readonly brand: string;
    /**
     * Current server time
     * @type {Date}
     * @memberof SystemInfo
     */
    readonly serverTime: Date;
    /**
     * Whether the embedded outpost is disabled
     * @type {boolean}
     * @memberof SystemInfo
     */
    readonly embeddedOutpostDisabled: boolean;
    /**
     * Get the FQDN configured on the embedded outpost
     * @type {string}
     * @memberof SystemInfo
     */
    readonly embeddedOutpostHost: string;
}

/**
 * Check if a given object implements the SystemInfo interface.
 */
export function instanceOfSystemInfo(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "httpHeaders" in value;
    isInstance = isInstance && "httpHost" in value;
    isInstance = isInstance && "httpIsSecure" in value;
    isInstance = isInstance && "runtime" in value;
    isInstance = isInstance && "brand" in value;
    isInstance = isInstance && "serverTime" in value;
    isInstance = isInstance && "embeddedOutpostDisabled" in value;
    isInstance = isInstance && "embeddedOutpostHost" in value;

    return isInstance;
}

export function SystemInfoFromJSON(json: any): SystemInfo {
    return SystemInfoFromJSONTyped(json, false);
}

export function SystemInfoFromJSONTyped(json: any, ignoreDiscriminator: boolean): SystemInfo {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'httpHeaders': json['http_headers'],
        'httpHost': json['http_host'],
        'httpIsSecure': json['http_is_secure'],
        'runtime': SystemInfoRuntimeFromJSON(json['runtime']),
        'brand': json['brand'],
        'serverTime': (new Date(json['server_time'])),
        'embeddedOutpostDisabled': json['embedded_outpost_disabled'],
        'embeddedOutpostHost': json['embedded_outpost_host'],
    };
}

export function SystemInfoToJSON(value?: SystemInfo | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'runtime': SystemInfoRuntimeToJSON(value.runtime),
    };
}

