/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AuthTypeEnum } from './AuthTypeEnum';
import {
    AuthTypeEnumFromJSON,
    AuthTypeEnumFromJSONTyped,
    AuthTypeEnumToJSON,
} from './AuthTypeEnum';
import type { FlowSetRequest } from './FlowSetRequest';
import {
    FlowSetRequestFromJSON,
    FlowSetRequestFromJSONTyped,
    FlowSetRequestToJSON,
} from './FlowSetRequest';
import type { ProviderEnum } from './ProviderEnum';
import {
    ProviderEnumFromJSON,
    ProviderEnumFromJSONTyped,
    ProviderEnumToJSON,
} from './ProviderEnum';

/**
 * AuthenticatorSMSStage Serializer
 * @export
 * @interface AuthenticatorSMSStageRequest
 */
export interface AuthenticatorSMSStageRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthenticatorSMSStageRequest
     */
    name: string;
    /**
     * 
     * @type {Array<FlowSetRequest>}
     * @memberof AuthenticatorSMSStageRequest
     */
    flowSet?: Array<FlowSetRequest>;
    /**
     * Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.
     * @type {string}
     * @memberof AuthenticatorSMSStageRequest
     */
    configureFlow?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AuthenticatorSMSStageRequest
     */
    friendlyName?: string | null;
    /**
     * 
     * @type {ProviderEnum}
     * @memberof AuthenticatorSMSStageRequest
     */
    provider: ProviderEnum;
    /**
     * 
     * @type {string}
     * @memberof AuthenticatorSMSStageRequest
     */
    fromNumber: string;
    /**
     * 
     * @type {string}
     * @memberof AuthenticatorSMSStageRequest
     */
    accountSid: string;
    /**
     * 
     * @type {string}
     * @memberof AuthenticatorSMSStageRequest
     */
    auth: string;
    /**
     * 
     * @type {string}
     * @memberof AuthenticatorSMSStageRequest
     */
    authPassword?: string;
    /**
     * 
     * @type {AuthTypeEnum}
     * @memberof AuthenticatorSMSStageRequest
     */
    authType?: AuthTypeEnum;
    /**
     * When enabled, the Phone number is only used during enrollment to verify the users authenticity. Only a hash of the phone number is saved to ensure it is not reused in the future.
     * @type {boolean}
     * @memberof AuthenticatorSMSStageRequest
     */
    verifyOnly?: boolean;
    /**
     * Optionally modify the payload being sent to custom providers.
     * @type {string}
     * @memberof AuthenticatorSMSStageRequest
     */
    mapping?: string | null;
}

/**
 * Check if a given object implements the AuthenticatorSMSStageRequest interface.
 */
export function instanceOfAuthenticatorSMSStageRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "provider" in value;
    isInstance = isInstance && "fromNumber" in value;
    isInstance = isInstance && "accountSid" in value;
    isInstance = isInstance && "auth" in value;

    return isInstance;
}

export function AuthenticatorSMSStageRequestFromJSON(json: any): AuthenticatorSMSStageRequest {
    return AuthenticatorSMSStageRequestFromJSONTyped(json, false);
}

export function AuthenticatorSMSStageRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuthenticatorSMSStageRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'flowSet': !exists(json, 'flow_set') ? undefined : ((json['flow_set'] as Array<any>).map(FlowSetRequestFromJSON)),
        'configureFlow': !exists(json, 'configure_flow') ? undefined : json['configure_flow'],
        'friendlyName': !exists(json, 'friendly_name') ? undefined : json['friendly_name'],
        'provider': ProviderEnumFromJSON(json['provider']),
        'fromNumber': json['from_number'],
        'accountSid': json['account_sid'],
        'auth': json['auth'],
        'authPassword': !exists(json, 'auth_password') ? undefined : json['auth_password'],
        'authType': !exists(json, 'auth_type') ? undefined : AuthTypeEnumFromJSON(json['auth_type']),
        'verifyOnly': !exists(json, 'verify_only') ? undefined : json['verify_only'],
        'mapping': !exists(json, 'mapping') ? undefined : json['mapping'],
    };
}

export function AuthenticatorSMSStageRequestToJSON(value?: AuthenticatorSMSStageRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'flow_set': value.flowSet === undefined ? undefined : ((value.flowSet as Array<any>).map(FlowSetRequestToJSON)),
        'configure_flow': value.configureFlow,
        'friendly_name': value.friendlyName,
        'provider': ProviderEnumToJSON(value.provider),
        'from_number': value.fromNumber,
        'account_sid': value.accountSid,
        'auth': value.auth,
        'auth_password': value.authPassword,
        'auth_type': AuthTypeEnumToJSON(value.authType),
        'verify_only': value.verifyOnly,
        'mapping': value.mapping,
    };
}

