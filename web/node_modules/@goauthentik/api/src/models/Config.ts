/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { CapabilitiesEnum } from './CapabilitiesEnum';
import {
    CapabilitiesEnumFromJSON,
    CapabilitiesEnumFromJSONTyped,
    CapabilitiesEnumToJSON,
} from './CapabilitiesEnum';
import type { ErrorReportingConfig } from './ErrorReportingConfig';
import {
    ErrorReportingConfigFromJSON,
    ErrorReportingConfigFromJSONTyped,
    ErrorReportingConfigToJSON,
} from './ErrorReportingConfig';

/**
 * Serialize authentik Config into DRF Object
 * @export
 * @interface Config
 */
export interface Config {
    /**
     * 
     * @type {ErrorReportingConfig}
     * @memberof Config
     */
    errorReporting: ErrorReportingConfig;
    /**
     * 
     * @type {Array<CapabilitiesEnum>}
     * @memberof Config
     */
    capabilities: Array<CapabilitiesEnum>;
    /**
     * 
     * @type {number}
     * @memberof Config
     */
    cacheTimeout: number;
    /**
     * 
     * @type {number}
     * @memberof Config
     */
    cacheTimeoutFlows: number;
    /**
     * 
     * @type {number}
     * @memberof Config
     */
    cacheTimeoutPolicies: number;
    /**
     * 
     * @type {number}
     * @memberof Config
     */
    cacheTimeoutReputation: number;
}

/**
 * Check if a given object implements the Config interface.
 */
export function instanceOfConfig(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "errorReporting" in value;
    isInstance = isInstance && "capabilities" in value;
    isInstance = isInstance && "cacheTimeout" in value;
    isInstance = isInstance && "cacheTimeoutFlows" in value;
    isInstance = isInstance && "cacheTimeoutPolicies" in value;
    isInstance = isInstance && "cacheTimeoutReputation" in value;

    return isInstance;
}

export function ConfigFromJSON(json: any): Config {
    return ConfigFromJSONTyped(json, false);
}

export function ConfigFromJSONTyped(json: any, ignoreDiscriminator: boolean): Config {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'errorReporting': ErrorReportingConfigFromJSON(json['error_reporting']),
        'capabilities': ((json['capabilities'] as Array<any>).map(CapabilitiesEnumFromJSON)),
        'cacheTimeout': json['cache_timeout'],
        'cacheTimeoutFlows': json['cache_timeout_flows'],
        'cacheTimeoutPolicies': json['cache_timeout_policies'],
        'cacheTimeoutReputation': json['cache_timeout_reputation'],
    };
}

export function ConfigToJSON(value?: Config | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'error_reporting': ErrorReportingConfigToJSON(value.errorReporting),
        'capabilities': ((value.capabilities as Array<any>).map(CapabilitiesEnumToJSON)),
        'cache_timeout': value.cacheTimeout,
        'cache_timeout_flows': value.cacheTimeoutFlows,
        'cache_timeout_policies': value.cacheTimeoutPolicies,
        'cache_timeout_reputation': value.cacheTimeoutReputation,
    };
}

