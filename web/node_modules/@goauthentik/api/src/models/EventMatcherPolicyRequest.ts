/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AppEnum } from './AppEnum';
import {
    AppEnumFromJSON,
    AppEnumFromJSONTyped,
    AppEnumToJSON,
} from './AppEnum';
import type { EventActions } from './EventActions';
import {
    EventActionsFromJSON,
    EventActionsFromJSONTyped,
    EventActionsToJSON,
} from './EventActions';
import type { ModelEnum } from './ModelEnum';
import {
    ModelEnumFromJSON,
    ModelEnumFromJSONTyped,
    ModelEnumToJSON,
} from './ModelEnum';

/**
 * Event Matcher Policy Serializer
 * @export
 * @interface EventMatcherPolicyRequest
 */
export interface EventMatcherPolicyRequest {
    /**
     * 
     * @type {string}
     * @memberof EventMatcherPolicyRequest
     */
    name: string;
    /**
     * When this option is enabled, all executions of this policy will be logged. By default, only execution errors are logged.
     * @type {boolean}
     * @memberof EventMatcherPolicyRequest
     */
    executionLogging?: boolean;
    /**
     * 
     * @type {EventActions}
     * @memberof EventMatcherPolicyRequest
     */
    action?: EventActions | null;
    /**
     * Matches Event's Client IP (strict matching, for network matching use an Expression Policy)
     * @type {string}
     * @memberof EventMatcherPolicyRequest
     */
    clientIp?: string | null;
    /**
     * 
     * @type {AppEnum}
     * @memberof EventMatcherPolicyRequest
     */
    app?: AppEnum | null;
    /**
     * 
     * @type {ModelEnum}
     * @memberof EventMatcherPolicyRequest
     */
    model?: ModelEnum | null;
}

/**
 * Check if a given object implements the EventMatcherPolicyRequest interface.
 */
export function instanceOfEventMatcherPolicyRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;

    return isInstance;
}

export function EventMatcherPolicyRequestFromJSON(json: any): EventMatcherPolicyRequest {
    return EventMatcherPolicyRequestFromJSONTyped(json, false);
}

export function EventMatcherPolicyRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): EventMatcherPolicyRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'executionLogging': !exists(json, 'execution_logging') ? undefined : json['execution_logging'],
        'action': !exists(json, 'action') ? undefined : EventActionsFromJSON(json['action']),
        'clientIp': !exists(json, 'client_ip') ? undefined : json['client_ip'],
        'app': !exists(json, 'app') ? undefined : AppEnumFromJSON(json['app']),
        'model': !exists(json, 'model') ? undefined : ModelEnumFromJSON(json['model']),
    };
}

export function EventMatcherPolicyRequestToJSON(value?: EventMatcherPolicyRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'execution_logging': value.executionLogging,
        'action': EventActionsToJSON(value.action),
        'client_ip': value.clientIp,
        'app': AppEnumToJSON(value.app),
        'model': ModelEnumToJSON(value.model),
    };
}

