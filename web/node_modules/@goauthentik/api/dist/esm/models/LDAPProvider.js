/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { exists } from '../runtime';
import { LDAPAPIAccessModeFromJSON, LDAPAPIAccessModeToJSON, } from './LDAPAPIAccessMode';
/**
 * Check if a given object implements the LDAPProvider interface.
 */
export function instanceOfLDAPProvider(value) {
    let isInstance = true;
    isInstance = isInstance && "pk" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "authorizationFlow" in value;
    isInstance = isInstance && "component" in value;
    isInstance = isInstance && "assignedApplicationSlug" in value;
    isInstance = isInstance && "assignedApplicationName" in value;
    isInstance = isInstance && "assignedBackchannelApplicationSlug" in value;
    isInstance = isInstance && "assignedBackchannelApplicationName" in value;
    isInstance = isInstance && "verboseName" in value;
    isInstance = isInstance && "verboseNamePlural" in value;
    isInstance = isInstance && "metaModelName" in value;
    isInstance = isInstance && "outpostSet" in value;
    return isInstance;
}
export function LDAPProviderFromJSON(json) {
    return LDAPProviderFromJSONTyped(json, false);
}
export function LDAPProviderFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'pk': json['pk'],
        'name': json['name'],
        'authenticationFlow': !exists(json, 'authentication_flow') ? undefined : json['authentication_flow'],
        'authorizationFlow': json['authorization_flow'],
        'propertyMappings': !exists(json, 'property_mappings') ? undefined : json['property_mappings'],
        'component': json['component'],
        'assignedApplicationSlug': json['assigned_application_slug'],
        'assignedApplicationName': json['assigned_application_name'],
        'assignedBackchannelApplicationSlug': json['assigned_backchannel_application_slug'],
        'assignedBackchannelApplicationName': json['assigned_backchannel_application_name'],
        'verboseName': json['verbose_name'],
        'verboseNamePlural': json['verbose_name_plural'],
        'metaModelName': json['meta_model_name'],
        'baseDn': !exists(json, 'base_dn') ? undefined : json['base_dn'],
        'searchGroup': !exists(json, 'search_group') ? undefined : json['search_group'],
        'certificate': !exists(json, 'certificate') ? undefined : json['certificate'],
        'tlsServerName': !exists(json, 'tls_server_name') ? undefined : json['tls_server_name'],
        'uidStartNumber': !exists(json, 'uid_start_number') ? undefined : json['uid_start_number'],
        'gidStartNumber': !exists(json, 'gid_start_number') ? undefined : json['gid_start_number'],
        'outpostSet': json['outpost_set'],
        'searchMode': !exists(json, 'search_mode') ? undefined : LDAPAPIAccessModeFromJSON(json['search_mode']),
        'bindMode': !exists(json, 'bind_mode') ? undefined : LDAPAPIAccessModeFromJSON(json['bind_mode']),
        'mfaSupport': !exists(json, 'mfa_support') ? undefined : json['mfa_support'],
    };
}
export function LDAPProviderToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'name': value.name,
        'authentication_flow': value.authenticationFlow,
        'authorization_flow': value.authorizationFlow,
        'property_mappings': value.propertyMappings,
        'base_dn': value.baseDn,
        'search_group': value.searchGroup,
        'certificate': value.certificate,
        'tls_server_name': value.tlsServerName,
        'uid_start_number': value.uidStartNumber,
        'gid_start_number': value.gidStartNumber,
        'search_mode': LDAPAPIAccessModeToJSON(value.searchMode),
        'bind_mode': LDAPAPIAccessModeToJSON(value.bindMode),
        'mfa_support': value.mfaSupport,
    };
}
