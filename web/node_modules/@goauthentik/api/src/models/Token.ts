/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { IntentEnum } from './IntentEnum';
import {
    IntentEnumFromJSON,
    IntentEnumFromJSONTyped,
    IntentEnumToJSON,
} from './IntentEnum';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './User';

/**
 * Token Serializer
 * @export
 * @interface Token
 */
export interface Token {
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    readonly pk: string;
    /**
     * Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
     * @type {string}
     * @memberof Token
     */
    managed?: string | null;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    identifier: string;
    /**
     * 
     * @type {IntentEnum}
     * @memberof Token
     */
    intent?: IntentEnum;
    /**
     * 
     * @type {number}
     * @memberof Token
     */
    user?: number;
    /**
     * 
     * @type {User}
     * @memberof Token
     */
    readonly userObj: User;
    /**
     * 
     * @type {string}
     * @memberof Token
     */
    description?: string;
    /**
     * 
     * @type {Date}
     * @memberof Token
     */
    expires?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof Token
     */
    expiring?: boolean;
}

/**
 * Check if a given object implements the Token interface.
 */
export function instanceOfToken(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "pk" in value;
    isInstance = isInstance && "identifier" in value;
    isInstance = isInstance && "userObj" in value;

    return isInstance;
}

export function TokenFromJSON(json: any): Token {
    return TokenFromJSONTyped(json, false);
}

export function TokenFromJSONTyped(json: any, ignoreDiscriminator: boolean): Token {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'pk': json['pk'],
        'managed': !exists(json, 'managed') ? undefined : json['managed'],
        'identifier': json['identifier'],
        'intent': !exists(json, 'intent') ? undefined : IntentEnumFromJSON(json['intent']),
        'user': !exists(json, 'user') ? undefined : json['user'],
        'userObj': UserFromJSON(json['user_obj']),
        'description': !exists(json, 'description') ? undefined : json['description'],
        'expires': !exists(json, 'expires') ? undefined : (new Date(json['expires'])),
        'expiring': !exists(json, 'expiring') ? undefined : json['expiring'],
    };
}

export function TokenToJSON(value?: Token | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'managed': value.managed,
        'identifier': value.identifier,
        'intent': IntentEnumToJSON(value.intent),
        'user': value.user,
        'description': value.description,
        'expires': value.expires === undefined ? undefined : (value.expires.toISOString()),
        'expiring': value.expiring,
    };
}

