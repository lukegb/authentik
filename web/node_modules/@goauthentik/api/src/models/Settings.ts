/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Settings Serializer
 * @export
 * @interface Settings
 */
export interface Settings {
    /**
     * Configure how authentik should show avatars for users.
     * @type {string}
     * @memberof Settings
     */
    avatars?: string;
    /**
     * Enable the ability for users to change their name.
     * @type {boolean}
     * @memberof Settings
     */
    defaultUserChangeName?: boolean;
    /**
     * Enable the ability for users to change their email address.
     * @type {boolean}
     * @memberof Settings
     */
    defaultUserChangeEmail?: boolean;
    /**
     * Enable the ability for users to change their username.
     * @type {boolean}
     * @memberof Settings
     */
    defaultUserChangeUsername?: boolean;
    /**
     * Events will be deleted after this duration.(Format: weeks=3;days=2;hours=3,seconds=2).
     * @type {string}
     * @memberof Settings
     */
    eventRetention?: string;
    /**
     * The option configures the footer links on the flow executor pages.
     * @type {any}
     * @memberof Settings
     */
    footerLinks?: any | null;
    /**
     * When enabled, all the events caused by a user will be deleted upon the user's deletion.
     * @type {boolean}
     * @memberof Settings
     */
    gdprCompliance?: boolean;
    /**
     * Globally enable/disable impersonation.
     * @type {boolean}
     * @memberof Settings
     */
    impersonation?: boolean;
}

/**
 * Check if a given object implements the Settings interface.
 */
export function instanceOfSettings(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function SettingsFromJSON(json: any): Settings {
    return SettingsFromJSONTyped(json, false);
}

export function SettingsFromJSONTyped(json: any, ignoreDiscriminator: boolean): Settings {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'avatars': !exists(json, 'avatars') ? undefined : json['avatars'],
        'defaultUserChangeName': !exists(json, 'default_user_change_name') ? undefined : json['default_user_change_name'],
        'defaultUserChangeEmail': !exists(json, 'default_user_change_email') ? undefined : json['default_user_change_email'],
        'defaultUserChangeUsername': !exists(json, 'default_user_change_username') ? undefined : json['default_user_change_username'],
        'eventRetention': !exists(json, 'event_retention') ? undefined : json['event_retention'],
        'footerLinks': !exists(json, 'footer_links') ? undefined : json['footer_links'],
        'gdprCompliance': !exists(json, 'gdpr_compliance') ? undefined : json['gdpr_compliance'],
        'impersonation': !exists(json, 'impersonation') ? undefined : json['impersonation'],
    };
}

export function SettingsToJSON(value?: Settings | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'avatars': value.avatars,
        'default_user_change_name': value.defaultUserChangeName,
        'default_user_change_email': value.defaultUserChangeEmail,
        'default_user_change_username': value.defaultUserChangeUsername,
        'event_retention': value.eventRetention,
        'footer_links': value.footerLinks,
        'gdpr_compliance': value.gdprCompliance,
        'impersonation': value.impersonation,
    };
}

