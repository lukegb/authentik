"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.RadiusProviderToJSON = exports.RadiusProviderFromJSONTyped = exports.RadiusProviderFromJSON = exports.instanceOfRadiusProvider = void 0;
const runtime_1 = require("../runtime");
/**
 * Check if a given object implements the RadiusProvider interface.
 */
function instanceOfRadiusProvider(value) {
    let isInstance = true;
    isInstance = isInstance && "pk" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "authorizationFlow" in value;
    isInstance = isInstance && "component" in value;
    isInstance = isInstance && "assignedApplicationSlug" in value;
    isInstance = isInstance && "assignedApplicationName" in value;
    isInstance = isInstance && "assignedBackchannelApplicationSlug" in value;
    isInstance = isInstance && "assignedBackchannelApplicationName" in value;
    isInstance = isInstance && "verboseName" in value;
    isInstance = isInstance && "verboseNamePlural" in value;
    isInstance = isInstance && "metaModelName" in value;
    isInstance = isInstance && "outpostSet" in value;
    return isInstance;
}
exports.instanceOfRadiusProvider = instanceOfRadiusProvider;
function RadiusProviderFromJSON(json) {
    return RadiusProviderFromJSONTyped(json, false);
}
exports.RadiusProviderFromJSON = RadiusProviderFromJSON;
function RadiusProviderFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'pk': json['pk'],
        'name': json['name'],
        'authenticationFlow': !(0, runtime_1.exists)(json, 'authentication_flow') ? undefined : json['authentication_flow'],
        'authorizationFlow': json['authorization_flow'],
        'propertyMappings': !(0, runtime_1.exists)(json, 'property_mappings') ? undefined : json['property_mappings'],
        'component': json['component'],
        'assignedApplicationSlug': json['assigned_application_slug'],
        'assignedApplicationName': json['assigned_application_name'],
        'assignedBackchannelApplicationSlug': json['assigned_backchannel_application_slug'],
        'assignedBackchannelApplicationName': json['assigned_backchannel_application_name'],
        'verboseName': json['verbose_name'],
        'verboseNamePlural': json['verbose_name_plural'],
        'metaModelName': json['meta_model_name'],
        'clientNetworks': !(0, runtime_1.exists)(json, 'client_networks') ? undefined : json['client_networks'],
        'sharedSecret': !(0, runtime_1.exists)(json, 'shared_secret') ? undefined : json['shared_secret'],
        'outpostSet': json['outpost_set'],
        'mfaSupport': !(0, runtime_1.exists)(json, 'mfa_support') ? undefined : json['mfa_support'],
    };
}
exports.RadiusProviderFromJSONTyped = RadiusProviderFromJSONTyped;
function RadiusProviderToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'name': value.name,
        'authentication_flow': value.authenticationFlow,
        'authorization_flow': value.authorizationFlow,
        'property_mappings': value.propertyMappings,
        'client_networks': value.clientNetworks,
        'shared_secret': value.sharedSecret,
        'mfa_support': value.mfaSupport,
    };
}
exports.RadiusProviderToJSON = RadiusProviderToJSON;
