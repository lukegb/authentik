/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Application } from './Application';
import {
    ApplicationFromJSON,
    ApplicationFromJSONTyped,
    ApplicationToJSON,
} from './Application';
import type { User } from './User';
import {
    UserFromJSON,
    UserFromJSONTyped,
    UserToJSON,
} from './User';

/**
 * UserConsent Serializer
 * @export
 * @interface UserConsent
 */
export interface UserConsent {
    /**
     * 
     * @type {number}
     * @memberof UserConsent
     */
    readonly pk: number;
    /**
     * 
     * @type {Date}
     * @memberof UserConsent
     */
    expires?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof UserConsent
     */
    expiring?: boolean;
    /**
     * 
     * @type {User}
     * @memberof UserConsent
     */
    user: User;
    /**
     * 
     * @type {Application}
     * @memberof UserConsent
     */
    application: Application;
    /**
     * 
     * @type {string}
     * @memberof UserConsent
     */
    permissions?: string;
}

/**
 * Check if a given object implements the UserConsent interface.
 */
export function instanceOfUserConsent(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "pk" in value;
    isInstance = isInstance && "user" in value;
    isInstance = isInstance && "application" in value;

    return isInstance;
}

export function UserConsentFromJSON(json: any): UserConsent {
    return UserConsentFromJSONTyped(json, false);
}

export function UserConsentFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserConsent {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'pk': json['pk'],
        'expires': !exists(json, 'expires') ? undefined : (new Date(json['expires'])),
        'expiring': !exists(json, 'expiring') ? undefined : json['expiring'],
        'user': UserFromJSON(json['user']),
        'application': ApplicationFromJSON(json['application']),
        'permissions': !exists(json, 'permissions') ? undefined : json['permissions'],
    };
}

export function UserConsentToJSON(value?: UserConsent | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'expires': value.expires === undefined ? undefined : (value.expires.toISOString()),
        'expiring': value.expiring,
        'user': UserToJSON(value.user),
        'application': ApplicationToJSON(value.application),
        'permissions': value.permissions,
    };
}

