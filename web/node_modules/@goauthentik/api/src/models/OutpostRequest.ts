/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { OutpostTypeEnum } from './OutpostTypeEnum';
import {
    OutpostTypeEnumFromJSON,
    OutpostTypeEnumFromJSONTyped,
    OutpostTypeEnumToJSON,
} from './OutpostTypeEnum';

/**
 * Outpost Serializer
 * @export
 * @interface OutpostRequest
 */
export interface OutpostRequest {
    /**
     * 
     * @type {string}
     * @memberof OutpostRequest
     */
    name: string;
    /**
     * 
     * @type {OutpostTypeEnum}
     * @memberof OutpostRequest
     */
    type: OutpostTypeEnum;
    /**
     * 
     * @type {Array<number>}
     * @memberof OutpostRequest
     */
    providers: Array<number>;
    /**
     * Select Service-Connection authentik should use to manage this outpost. Leave empty if authentik should not handle the deployment.
     * @type {string}
     * @memberof OutpostRequest
     */
    serviceConnection?: string | null;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof OutpostRequest
     */
    config: { [key: string]: any; };
    /**
     * Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
     * @type {string}
     * @memberof OutpostRequest
     */
    managed?: string | null;
}

/**
 * Check if a given object implements the OutpostRequest interface.
 */
export function instanceOfOutpostRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "providers" in value;
    isInstance = isInstance && "config" in value;

    return isInstance;
}

export function OutpostRequestFromJSON(json: any): OutpostRequest {
    return OutpostRequestFromJSONTyped(json, false);
}

export function OutpostRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): OutpostRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'type': OutpostTypeEnumFromJSON(json['type']),
        'providers': json['providers'],
        'serviceConnection': !exists(json, 'service_connection') ? undefined : json['service_connection'],
        'config': json['config'],
        'managed': !exists(json, 'managed') ? undefined : json['managed'],
    };
}

export function OutpostRequestToJSON(value?: OutpostRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'type': OutpostTypeEnumToJSON(value.type),
        'providers': value.providers,
        'service_connection': value.serviceConnection,
        'config': value.config,
        'managed': value.managed,
    };
}

