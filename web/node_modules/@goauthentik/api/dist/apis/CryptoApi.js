"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.CryptoApi = void 0;
const runtime = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class CryptoApi extends runtime.BaseAPI {
    /**
     * CertificateKeyPair Viewset
     */
    cryptoCertificatekeypairsCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.certificateKeyPairRequest === null || requestParameters.certificateKeyPairRequest === undefined) {
                throw new runtime.RequiredError('certificateKeyPairRequest', 'Required parameter requestParameters.certificateKeyPairRequest was null or undefined when calling cryptoCertificatekeypairsCreate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/crypto/certificatekeypairs/`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.CertificateKeyPairRequestToJSON)(requestParameters.certificateKeyPairRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CertificateKeyPairFromJSON)(jsonValue));
        });
    }
    /**
     * CertificateKeyPair Viewset
     */
    cryptoCertificatekeypairsCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.cryptoCertificatekeypairsCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * CertificateKeyPair Viewset
     */
    cryptoCertificatekeypairsDestroyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.kpUuid === null || requestParameters.kpUuid === undefined) {
                throw new runtime.RequiredError('kpUuid', 'Required parameter requestParameters.kpUuid was null or undefined when calling cryptoCertificatekeypairsDestroy.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/crypto/certificatekeypairs/{kp_uuid}/`.replace(`{${"kp_uuid"}}`, encodeURIComponent(String(requestParameters.kpUuid))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * CertificateKeyPair Viewset
     */
    cryptoCertificatekeypairsDestroy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.cryptoCertificatekeypairsDestroyRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Generate a new, self-signed certificate-key pair
     */
    cryptoCertificatekeypairsGenerateCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.certificateGenerationRequest === null || requestParameters.certificateGenerationRequest === undefined) {
                throw new runtime.RequiredError('certificateGenerationRequest', 'Required parameter requestParameters.certificateGenerationRequest was null or undefined when calling cryptoCertificatekeypairsGenerateCreate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/crypto/certificatekeypairs/generate/`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.CertificateGenerationRequestToJSON)(requestParameters.certificateGenerationRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CertificateKeyPairFromJSON)(jsonValue));
        });
    }
    /**
     * Generate a new, self-signed certificate-key pair
     */
    cryptoCertificatekeypairsGenerateCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.cryptoCertificatekeypairsGenerateCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * CertificateKeyPair Viewset
     */
    cryptoCertificatekeypairsListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.hasKey !== undefined) {
                queryParameters['has_key'] = requestParameters.hasKey;
            }
            if (requestParameters.includeDetails !== undefined) {
                queryParameters['include_details'] = requestParameters.includeDetails;
            }
            if (requestParameters.managed !== undefined) {
                queryParameters['managed'] = requestParameters.managed;
            }
            if (requestParameters.name !== undefined) {
                queryParameters['name'] = requestParameters.name;
            }
            if (requestParameters.ordering !== undefined) {
                queryParameters['ordering'] = requestParameters.ordering;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.pageSize !== undefined) {
                queryParameters['page_size'] = requestParameters.pageSize;
            }
            if (requestParameters.search !== undefined) {
                queryParameters['search'] = requestParameters.search;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/crypto/certificatekeypairs/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PaginatedCertificateKeyPairListFromJSON)(jsonValue));
        });
    }
    /**
     * CertificateKeyPair Viewset
     */
    cryptoCertificatekeypairsList(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.cryptoCertificatekeypairsListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * CertificateKeyPair Viewset
     */
    cryptoCertificatekeypairsPartialUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.kpUuid === null || requestParameters.kpUuid === undefined) {
                throw new runtime.RequiredError('kpUuid', 'Required parameter requestParameters.kpUuid was null or undefined when calling cryptoCertificatekeypairsPartialUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/crypto/certificatekeypairs/{kp_uuid}/`.replace(`{${"kp_uuid"}}`, encodeURIComponent(String(requestParameters.kpUuid))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PatchedCertificateKeyPairRequestToJSON)(requestParameters.patchedCertificateKeyPairRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CertificateKeyPairFromJSON)(jsonValue));
        });
    }
    /**
     * CertificateKeyPair Viewset
     */
    cryptoCertificatekeypairsPartialUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.cryptoCertificatekeypairsPartialUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * CertificateKeyPair Viewset
     */
    cryptoCertificatekeypairsRetrieveRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.kpUuid === null || requestParameters.kpUuid === undefined) {
                throw new runtime.RequiredError('kpUuid', 'Required parameter requestParameters.kpUuid was null or undefined when calling cryptoCertificatekeypairsRetrieve.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/crypto/certificatekeypairs/{kp_uuid}/`.replace(`{${"kp_uuid"}}`, encodeURIComponent(String(requestParameters.kpUuid))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CertificateKeyPairFromJSON)(jsonValue));
        });
    }
    /**
     * CertificateKeyPair Viewset
     */
    cryptoCertificatekeypairsRetrieve(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.cryptoCertificatekeypairsRetrieveRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * CertificateKeyPair Viewset
     */
    cryptoCertificatekeypairsUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.kpUuid === null || requestParameters.kpUuid === undefined) {
                throw new runtime.RequiredError('kpUuid', 'Required parameter requestParameters.kpUuid was null or undefined when calling cryptoCertificatekeypairsUpdate.');
            }
            if (requestParameters.certificateKeyPairRequest === null || requestParameters.certificateKeyPairRequest === undefined) {
                throw new runtime.RequiredError('certificateKeyPairRequest', 'Required parameter requestParameters.certificateKeyPairRequest was null or undefined when calling cryptoCertificatekeypairsUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/crypto/certificatekeypairs/{kp_uuid}/`.replace(`{${"kp_uuid"}}`, encodeURIComponent(String(requestParameters.kpUuid))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.CertificateKeyPairRequestToJSON)(requestParameters.certificateKeyPairRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CertificateKeyPairFromJSON)(jsonValue));
        });
    }
    /**
     * CertificateKeyPair Viewset
     */
    cryptoCertificatekeypairsUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.cryptoCertificatekeypairsUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of all objects that use this object
     */
    cryptoCertificatekeypairsUsedByListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.kpUuid === null || requestParameters.kpUuid === undefined) {
                throw new runtime.RequiredError('kpUuid', 'Required parameter requestParameters.kpUuid was null or undefined when calling cryptoCertificatekeypairsUsedByList.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/crypto/certificatekeypairs/{kp_uuid}/used_by/`.replace(`{${"kp_uuid"}}`, encodeURIComponent(String(requestParameters.kpUuid))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(models_1.UsedByFromJSON));
        });
    }
    /**
     * Get a list of all objects that use this object
     */
    cryptoCertificatekeypairsUsedByList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.cryptoCertificatekeypairsUsedByListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Return certificate-key pairs certificate and log access
     */
    cryptoCertificatekeypairsViewCertificateRetrieveRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.kpUuid === null || requestParameters.kpUuid === undefined) {
                throw new runtime.RequiredError('kpUuid', 'Required parameter requestParameters.kpUuid was null or undefined when calling cryptoCertificatekeypairsViewCertificateRetrieve.');
            }
            const queryParameters = {};
            if (requestParameters.download !== undefined) {
                queryParameters['download'] = requestParameters.download;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/crypto/certificatekeypairs/{kp_uuid}/view_certificate/`.replace(`{${"kp_uuid"}}`, encodeURIComponent(String(requestParameters.kpUuid))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CertificateDataFromJSON)(jsonValue));
        });
    }
    /**
     * Return certificate-key pairs certificate and log access
     */
    cryptoCertificatekeypairsViewCertificateRetrieve(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.cryptoCertificatekeypairsViewCertificateRetrieveRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Return certificate-key pairs private key and log access
     */
    cryptoCertificatekeypairsViewPrivateKeyRetrieveRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.kpUuid === null || requestParameters.kpUuid === undefined) {
                throw new runtime.RequiredError('kpUuid', 'Required parameter requestParameters.kpUuid was null or undefined when calling cryptoCertificatekeypairsViewPrivateKeyRetrieve.');
            }
            const queryParameters = {};
            if (requestParameters.download !== undefined) {
                queryParameters['download'] = requestParameters.download;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/crypto/certificatekeypairs/{kp_uuid}/view_private_key/`.replace(`{${"kp_uuid"}}`, encodeURIComponent(String(requestParameters.kpUuid))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.CertificateDataFromJSON)(jsonValue));
        });
    }
    /**
     * Return certificate-key pairs private key and log access
     */
    cryptoCertificatekeypairsViewPrivateKeyRetrieve(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.cryptoCertificatekeypairsViewPrivateKeyRetrieveRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.CryptoApi = CryptoApi;
