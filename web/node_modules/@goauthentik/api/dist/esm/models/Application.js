/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { exists } from '../runtime';
import { PolicyEngineModeFromJSON, PolicyEngineModeToJSON, } from './PolicyEngineMode';
import { ProviderFromJSON, } from './Provider';
/**
 * Check if a given object implements the Application interface.
 */
export function instanceOfApplication(value) {
    let isInstance = true;
    isInstance = isInstance && "pk" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "slug" in value;
    isInstance = isInstance && "providerObj" in value;
    isInstance = isInstance && "backchannelProvidersObj" in value;
    isInstance = isInstance && "launchUrl" in value;
    isInstance = isInstance && "metaIcon" in value;
    return isInstance;
}
export function ApplicationFromJSON(json) {
    return ApplicationFromJSONTyped(json, false);
}
export function ApplicationFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'pk': json['pk'],
        'name': json['name'],
        'slug': json['slug'],
        'provider': !exists(json, 'provider') ? undefined : json['provider'],
        'providerObj': ProviderFromJSON(json['provider_obj']),
        'backchannelProviders': !exists(json, 'backchannel_providers') ? undefined : json['backchannel_providers'],
        'backchannelProvidersObj': (json['backchannel_providers_obj'].map(ProviderFromJSON)),
        'launchUrl': json['launch_url'],
        'openInNewTab': !exists(json, 'open_in_new_tab') ? undefined : json['open_in_new_tab'],
        'metaLaunchUrl': !exists(json, 'meta_launch_url') ? undefined : json['meta_launch_url'],
        'metaIcon': json['meta_icon'],
        'metaDescription': !exists(json, 'meta_description') ? undefined : json['meta_description'],
        'metaPublisher': !exists(json, 'meta_publisher') ? undefined : json['meta_publisher'],
        'policyEngineMode': !exists(json, 'policy_engine_mode') ? undefined : PolicyEngineModeFromJSON(json['policy_engine_mode']),
        'group': !exists(json, 'group') ? undefined : json['group'],
    };
}
export function ApplicationToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'name': value.name,
        'slug': value.slug,
        'provider': value.provider,
        'backchannel_providers': value.backchannelProviders,
        'open_in_new_tab': value.openInNewTab,
        'meta_launch_url': value.metaLaunchUrl,
        'meta_description': value.metaDescription,
        'meta_publisher': value.metaPublisher,
        'policy_engine_mode': PolicyEngineModeToJSON(value.policyEngineMode),
        'group': value.group,
    };
}
