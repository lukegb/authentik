/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FlowSetRequest } from './FlowSetRequest';
import {
    FlowSetRequestFromJSON,
    FlowSetRequestFromJSONTyped,
    FlowSetRequestToJSON,
} from './FlowSetRequest';

/**
 * AuthenticatorDuoStage Serializer
 * @export
 * @interface AuthenticatorDuoStageRequest
 */
export interface AuthenticatorDuoStageRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthenticatorDuoStageRequest
     */
    name: string;
    /**
     * 
     * @type {Array<FlowSetRequest>}
     * @memberof AuthenticatorDuoStageRequest
     */
    flowSet?: Array<FlowSetRequest>;
    /**
     * Flow used by an authenticated user to configure this Stage. If empty, user will not be able to configure this stage.
     * @type {string}
     * @memberof AuthenticatorDuoStageRequest
     */
    configureFlow?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AuthenticatorDuoStageRequest
     */
    friendlyName?: string | null;
    /**
     * 
     * @type {string}
     * @memberof AuthenticatorDuoStageRequest
     */
    clientId: string;
    /**
     * 
     * @type {string}
     * @memberof AuthenticatorDuoStageRequest
     */
    clientSecret: string;
    /**
     * 
     * @type {string}
     * @memberof AuthenticatorDuoStageRequest
     */
    apiHostname: string;
    /**
     * 
     * @type {string}
     * @memberof AuthenticatorDuoStageRequest
     */
    adminIntegrationKey?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthenticatorDuoStageRequest
     */
    adminSecretKey?: string;
}

/**
 * Check if a given object implements the AuthenticatorDuoStageRequest interface.
 */
export function instanceOfAuthenticatorDuoStageRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "clientId" in value;
    isInstance = isInstance && "clientSecret" in value;
    isInstance = isInstance && "apiHostname" in value;

    return isInstance;
}

export function AuthenticatorDuoStageRequestFromJSON(json: any): AuthenticatorDuoStageRequest {
    return AuthenticatorDuoStageRequestFromJSONTyped(json, false);
}

export function AuthenticatorDuoStageRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuthenticatorDuoStageRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'flowSet': !exists(json, 'flow_set') ? undefined : ((json['flow_set'] as Array<any>).map(FlowSetRequestFromJSON)),
        'configureFlow': !exists(json, 'configure_flow') ? undefined : json['configure_flow'],
        'friendlyName': !exists(json, 'friendly_name') ? undefined : json['friendly_name'],
        'clientId': json['client_id'],
        'clientSecret': json['client_secret'],
        'apiHostname': json['api_hostname'],
        'adminIntegrationKey': !exists(json, 'admin_integration_key') ? undefined : json['admin_integration_key'],
        'adminSecretKey': !exists(json, 'admin_secret_key') ? undefined : json['admin_secret_key'],
    };
}

export function AuthenticatorDuoStageRequestToJSON(value?: AuthenticatorDuoStageRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'flow_set': value.flowSet === undefined ? undefined : ((value.flowSet as Array<any>).map(FlowSetRequestToJSON)),
        'configure_flow': value.configureFlow,
        'friendly_name': value.friendlyName,
        'client_id': value.clientId,
        'client_secret': value.clientSecret,
        'api_hostname': value.apiHostname,
        'admin_integration_key': value.adminIntegrationKey,
        'admin_secret_key': value.adminSecretKey,
    };
}

