/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { Endpoint } from './Endpoint';
import {
    EndpointFromJSON,
    EndpointFromJSONTyped,
    EndpointToJSON,
} from './Endpoint';
import type { GroupMember } from './GroupMember';
import {
    GroupMemberFromJSON,
    GroupMemberFromJSONTyped,
    GroupMemberToJSON,
} from './GroupMember';
import type { RACProvider } from './RACProvider';
import {
    RACProviderFromJSON,
    RACProviderFromJSONTyped,
    RACProviderToJSON,
} from './RACProvider';

/**
 * ConnectionToken Serializer
 * @export
 * @interface ConnectionToken
 */
export interface ConnectionToken {
    /**
     * 
     * @type {string}
     * @memberof ConnectionToken
     */
    readonly pk: string;
    /**
     * 
     * @type {number}
     * @memberof ConnectionToken
     */
    provider: number;
    /**
     * 
     * @type {RACProvider}
     * @memberof ConnectionToken
     */
    readonly providerObj: RACProvider;
    /**
     * 
     * @type {string}
     * @memberof ConnectionToken
     */
    readonly endpoint: string;
    /**
     * 
     * @type {Endpoint}
     * @memberof ConnectionToken
     */
    readonly endpointObj: Endpoint;
    /**
     * 
     * @type {GroupMember}
     * @memberof ConnectionToken
     */
    readonly user: GroupMember;
}

/**
 * Check if a given object implements the ConnectionToken interface.
 */
export function instanceOfConnectionToken(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "pk" in value;
    isInstance = isInstance && "provider" in value;
    isInstance = isInstance && "providerObj" in value;
    isInstance = isInstance && "endpoint" in value;
    isInstance = isInstance && "endpointObj" in value;
    isInstance = isInstance && "user" in value;

    return isInstance;
}

export function ConnectionTokenFromJSON(json: any): ConnectionToken {
    return ConnectionTokenFromJSONTyped(json, false);
}

export function ConnectionTokenFromJSONTyped(json: any, ignoreDiscriminator: boolean): ConnectionToken {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'pk': json['pk'],
        'provider': json['provider'],
        'providerObj': RACProviderFromJSON(json['provider_obj']),
        'endpoint': json['endpoint'],
        'endpointObj': EndpointFromJSON(json['endpoint_obj']),
        'user': GroupMemberFromJSON(json['user']),
    };
}

export function ConnectionTokenToJSON(value?: ConnectionToken | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'provider': value.provider,
    };
}

