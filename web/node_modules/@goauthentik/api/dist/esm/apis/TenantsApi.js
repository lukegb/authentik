/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as runtime from '../runtime';
import { DomainFromJSON, DomainRequestToJSON, PaginatedDomainListFromJSON, PaginatedTenantListFromJSON, PatchedDomainRequestToJSON, PatchedTenantRequestToJSON, TenantFromJSON, TenantAdminGroupRequestRequestToJSON, TenantRecoveryKeyRequestRequestToJSON, TenantRecoveryKeyResponseFromJSON, TenantRequestToJSON, } from '../models';
/**
 *
 */
export class TenantsApi extends runtime.BaseAPI {
    /**
     * Domain ViewSet
     */
    tenantsDomainsCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.domainRequest === null || requestParameters.domainRequest === undefined) {
                throw new runtime.RequiredError('domainRequest', 'Required parameter requestParameters.domainRequest was null or undefined when calling tenantsDomainsCreate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/tenants/domains/`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: DomainRequestToJSON(requestParameters.domainRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => DomainFromJSON(jsonValue));
        });
    }
    /**
     * Domain ViewSet
     */
    tenantsDomainsCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.tenantsDomainsCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Domain ViewSet
     */
    tenantsDomainsDestroyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling tenantsDomainsDestroy.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/tenants/domains/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Domain ViewSet
     */
    tenantsDomainsDestroy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.tenantsDomainsDestroyRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Domain ViewSet
     */
    tenantsDomainsListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.ordering !== undefined) {
                queryParameters['ordering'] = requestParameters.ordering;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.pageSize !== undefined) {
                queryParameters['page_size'] = requestParameters.pageSize;
            }
            if (requestParameters.search !== undefined) {
                queryParameters['search'] = requestParameters.search;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/tenants/domains/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedDomainListFromJSON(jsonValue));
        });
    }
    /**
     * Domain ViewSet
     */
    tenantsDomainsList(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.tenantsDomainsListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Domain ViewSet
     */
    tenantsDomainsPartialUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling tenantsDomainsPartialUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/tenants/domains/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: PatchedDomainRequestToJSON(requestParameters.patchedDomainRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => DomainFromJSON(jsonValue));
        });
    }
    /**
     * Domain ViewSet
     */
    tenantsDomainsPartialUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.tenantsDomainsPartialUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Domain ViewSet
     */
    tenantsDomainsRetrieveRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling tenantsDomainsRetrieve.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/tenants/domains/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => DomainFromJSON(jsonValue));
        });
    }
    /**
     * Domain ViewSet
     */
    tenantsDomainsRetrieve(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.tenantsDomainsRetrieveRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Domain ViewSet
     */
    tenantsDomainsUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling tenantsDomainsUpdate.');
            }
            if (requestParameters.domainRequest === null || requestParameters.domainRequest === undefined) {
                throw new runtime.RequiredError('domainRequest', 'Required parameter requestParameters.domainRequest was null or undefined when calling tenantsDomainsUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/tenants/domains/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: DomainRequestToJSON(requestParameters.domainRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => DomainFromJSON(jsonValue));
        });
    }
    /**
     * Domain ViewSet
     */
    tenantsDomainsUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.tenantsDomainsUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Tenant Viewset
     */
    tenantsTenantsCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.tenantRequest === null || requestParameters.tenantRequest === undefined) {
                throw new runtime.RequiredError('tenantRequest', 'Required parameter requestParameters.tenantRequest was null or undefined when calling tenantsTenantsCreate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/tenants/tenants/`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: TenantRequestToJSON(requestParameters.tenantRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => TenantFromJSON(jsonValue));
        });
    }
    /**
     * Tenant Viewset
     */
    tenantsTenantsCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.tenantsTenantsCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Create admin group and add user to it.
     */
    tenantsTenantsCreateAdminGroupCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.tenantUuid === null || requestParameters.tenantUuid === undefined) {
                throw new runtime.RequiredError('tenantUuid', 'Required parameter requestParameters.tenantUuid was null or undefined when calling tenantsTenantsCreateAdminGroupCreate.');
            }
            if (requestParameters.tenantAdminGroupRequestRequest === null || requestParameters.tenantAdminGroupRequestRequest === undefined) {
                throw new runtime.RequiredError('tenantAdminGroupRequestRequest', 'Required parameter requestParameters.tenantAdminGroupRequestRequest was null or undefined when calling tenantsTenantsCreateAdminGroupCreate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/tenants/tenants/{tenant_uuid}/create_admin_group/`.replace(`{${"tenant_uuid"}}`, encodeURIComponent(String(requestParameters.tenantUuid))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: TenantAdminGroupRequestRequestToJSON(requestParameters.tenantAdminGroupRequestRequest),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Create admin group and add user to it.
     */
    tenantsTenantsCreateAdminGroupCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.tenantsTenantsCreateAdminGroupCreateRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Create recovery key for user.
     */
    tenantsTenantsCreateRecoveryKeyCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.tenantUuid === null || requestParameters.tenantUuid === undefined) {
                throw new runtime.RequiredError('tenantUuid', 'Required parameter requestParameters.tenantUuid was null or undefined when calling tenantsTenantsCreateRecoveryKeyCreate.');
            }
            if (requestParameters.tenantRecoveryKeyRequestRequest === null || requestParameters.tenantRecoveryKeyRequestRequest === undefined) {
                throw new runtime.RequiredError('tenantRecoveryKeyRequestRequest', 'Required parameter requestParameters.tenantRecoveryKeyRequestRequest was null or undefined when calling tenantsTenantsCreateRecoveryKeyCreate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/tenants/tenants/{tenant_uuid}/create_recovery_key/`.replace(`{${"tenant_uuid"}}`, encodeURIComponent(String(requestParameters.tenantUuid))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: TenantRecoveryKeyRequestRequestToJSON(requestParameters.tenantRecoveryKeyRequestRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => TenantRecoveryKeyResponseFromJSON(jsonValue));
        });
    }
    /**
     * Create recovery key for user.
     */
    tenantsTenantsCreateRecoveryKeyCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.tenantsTenantsCreateRecoveryKeyCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Tenant Viewset
     */
    tenantsTenantsDestroyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.tenantUuid === null || requestParameters.tenantUuid === undefined) {
                throw new runtime.RequiredError('tenantUuid', 'Required parameter requestParameters.tenantUuid was null or undefined when calling tenantsTenantsDestroy.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/tenants/tenants/{tenant_uuid}/`.replace(`{${"tenant_uuid"}}`, encodeURIComponent(String(requestParameters.tenantUuid))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Tenant Viewset
     */
    tenantsTenantsDestroy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.tenantsTenantsDestroyRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Tenant Viewset
     */
    tenantsTenantsListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.ordering !== undefined) {
                queryParameters['ordering'] = requestParameters.ordering;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.pageSize !== undefined) {
                queryParameters['page_size'] = requestParameters.pageSize;
            }
            if (requestParameters.search !== undefined) {
                queryParameters['search'] = requestParameters.search;
            }
            const headerParameters = {};
            const response = yield this.request({
                path: `/tenants/tenants/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedTenantListFromJSON(jsonValue));
        });
    }
    /**
     * Tenant Viewset
     */
    tenantsTenantsList(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.tenantsTenantsListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Tenant Viewset
     */
    tenantsTenantsPartialUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.tenantUuid === null || requestParameters.tenantUuid === undefined) {
                throw new runtime.RequiredError('tenantUuid', 'Required parameter requestParameters.tenantUuid was null or undefined when calling tenantsTenantsPartialUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/tenants/tenants/{tenant_uuid}/`.replace(`{${"tenant_uuid"}}`, encodeURIComponent(String(requestParameters.tenantUuid))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: PatchedTenantRequestToJSON(requestParameters.patchedTenantRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => TenantFromJSON(jsonValue));
        });
    }
    /**
     * Tenant Viewset
     */
    tenantsTenantsPartialUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.tenantsTenantsPartialUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Tenant Viewset
     */
    tenantsTenantsRetrieveRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.tenantUuid === null || requestParameters.tenantUuid === undefined) {
                throw new runtime.RequiredError('tenantUuid', 'Required parameter requestParameters.tenantUuid was null or undefined when calling tenantsTenantsRetrieve.');
            }
            const queryParameters = {};
            const headerParameters = {};
            const response = yield this.request({
                path: `/tenants/tenants/{tenant_uuid}/`.replace(`{${"tenant_uuid"}}`, encodeURIComponent(String(requestParameters.tenantUuid))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => TenantFromJSON(jsonValue));
        });
    }
    /**
     * Tenant Viewset
     */
    tenantsTenantsRetrieve(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.tenantsTenantsRetrieveRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Tenant Viewset
     */
    tenantsTenantsUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.tenantUuid === null || requestParameters.tenantUuid === undefined) {
                throw new runtime.RequiredError('tenantUuid', 'Required parameter requestParameters.tenantUuid was null or undefined when calling tenantsTenantsUpdate.');
            }
            if (requestParameters.tenantRequest === null || requestParameters.tenantRequest === undefined) {
                throw new runtime.RequiredError('tenantRequest', 'Required parameter requestParameters.tenantRequest was null or undefined when calling tenantsTenantsUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            const response = yield this.request({
                path: `/tenants/tenants/{tenant_uuid}/`.replace(`{${"tenant_uuid"}}`, encodeURIComponent(String(requestParameters.tenantUuid))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: TenantRequestToJSON(requestParameters.tenantRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => TenantFromJSON(jsonValue));
        });
    }
    /**
     * Tenant Viewset
     */
    tenantsTenantsUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.tenantsTenantsUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
