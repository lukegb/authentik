/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { StaticDeviceToken } from './StaticDeviceToken';
import {
    StaticDeviceTokenFromJSON,
    StaticDeviceTokenFromJSONTyped,
    StaticDeviceTokenToJSON,
} from './StaticDeviceToken';

/**
 * Serializer for static authenticator devices
 * @export
 * @interface StaticDevice
 */
export interface StaticDevice {
    /**
     * The human-readable name of this device.
     * @type {string}
     * @memberof StaticDevice
     */
    name: string;
    /**
     * 
     * @type {Array<StaticDeviceToken>}
     * @memberof StaticDevice
     */
    readonly tokenSet: Array<StaticDeviceToken>;
    /**
     * 
     * @type {number}
     * @memberof StaticDevice
     */
    readonly pk: number;
}

/**
 * Check if a given object implements the StaticDevice interface.
 */
export function instanceOfStaticDevice(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "tokenSet" in value;
    isInstance = isInstance && "pk" in value;

    return isInstance;
}

export function StaticDeviceFromJSON(json: any): StaticDevice {
    return StaticDeviceFromJSONTyped(json, false);
}

export function StaticDeviceFromJSONTyped(json: any, ignoreDiscriminator: boolean): StaticDevice {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'tokenSet': ((json['token_set'] as Array<any>).map(StaticDeviceTokenFromJSON)),
        'pk': json['pk'],
    };
}

export function StaticDeviceToJSON(value?: StaticDevice | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
    };
}

