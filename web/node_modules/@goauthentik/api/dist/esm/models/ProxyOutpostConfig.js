/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { exists } from '../runtime';
import { OpenIDConnectConfigurationFromJSON, } from './OpenIDConnectConfiguration';
import { ProxyModeFromJSON, ProxyModeToJSON, } from './ProxyMode';
/**
 * Check if a given object implements the ProxyOutpostConfig interface.
 */
export function instanceOfProxyOutpostConfig(value) {
    let isInstance = true;
    isInstance = isInstance && "pk" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "externalHost" in value;
    isInstance = isInstance && "oidcConfiguration" in value;
    isInstance = isInstance && "accessTokenValidity" in value;
    isInstance = isInstance && "scopesToRequest" in value;
    isInstance = isInstance && "assignedApplicationSlug" in value;
    isInstance = isInstance && "assignedApplicationName" in value;
    return isInstance;
}
export function ProxyOutpostConfigFromJSON(json) {
    return ProxyOutpostConfigFromJSONTyped(json, false);
}
export function ProxyOutpostConfigFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'pk': json['pk'],
        'name': json['name'],
        'internalHost': !exists(json, 'internal_host') ? undefined : json['internal_host'],
        'externalHost': json['external_host'],
        'internalHostSslValidation': !exists(json, 'internal_host_ssl_validation') ? undefined : json['internal_host_ssl_validation'],
        'clientId': !exists(json, 'client_id') ? undefined : json['client_id'],
        'clientSecret': !exists(json, 'client_secret') ? undefined : json['client_secret'],
        'oidcConfiguration': OpenIDConnectConfigurationFromJSON(json['oidc_configuration']),
        'cookieSecret': !exists(json, 'cookie_secret') ? undefined : json['cookie_secret'],
        'certificate': !exists(json, 'certificate') ? undefined : json['certificate'],
        'skipPathRegex': !exists(json, 'skip_path_regex') ? undefined : json['skip_path_regex'],
        'basicAuthEnabled': !exists(json, 'basic_auth_enabled') ? undefined : json['basic_auth_enabled'],
        'basicAuthPasswordAttribute': !exists(json, 'basic_auth_password_attribute') ? undefined : json['basic_auth_password_attribute'],
        'basicAuthUserAttribute': !exists(json, 'basic_auth_user_attribute') ? undefined : json['basic_auth_user_attribute'],
        'mode': !exists(json, 'mode') ? undefined : ProxyModeFromJSON(json['mode']),
        'cookieDomain': !exists(json, 'cookie_domain') ? undefined : json['cookie_domain'],
        'accessTokenValidity': json['access_token_validity'],
        'interceptHeaderAuth': !exists(json, 'intercept_header_auth') ? undefined : json['intercept_header_auth'],
        'scopesToRequest': json['scopes_to_request'],
        'assignedApplicationSlug': json['assigned_application_slug'],
        'assignedApplicationName': json['assigned_application_name'],
    };
}
export function ProxyOutpostConfigToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'name': value.name,
        'internal_host': value.internalHost,
        'external_host': value.externalHost,
        'internal_host_ssl_validation': value.internalHostSslValidation,
        'client_id': value.clientId,
        'client_secret': value.clientSecret,
        'cookie_secret': value.cookieSecret,
        'certificate': value.certificate,
        'skip_path_regex': value.skipPathRegex,
        'basic_auth_enabled': value.basicAuthEnabled,
        'basic_auth_password_attribute': value.basicAuthPasswordAttribute,
        'basic_auth_user_attribute': value.basicAuthUserAttribute,
        'mode': ProxyModeToJSON(value.mode),
        'cookie_domain': value.cookieDomain,
        'intercept_header_auth': value.interceptHeaderAuth,
    };
}
