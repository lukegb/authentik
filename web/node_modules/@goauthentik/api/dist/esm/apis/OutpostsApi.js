/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as runtime from '../runtime';
import { DockerServiceConnectionFromJSON, DockerServiceConnectionRequestToJSON, KubernetesServiceConnectionFromJSON, KubernetesServiceConnectionRequestToJSON, LDAPOutpostConfigFromJSON, OutpostFromJSON, OutpostDefaultConfigFromJSON, OutpostHealthFromJSON, OutpostRequestToJSON, PaginatedDockerServiceConnectionListFromJSON, PaginatedKubernetesServiceConnectionListFromJSON, PaginatedLDAPOutpostConfigListFromJSON, PaginatedOutpostListFromJSON, PaginatedProxyOutpostConfigListFromJSON, PaginatedRadiusOutpostConfigListFromJSON, PaginatedServiceConnectionListFromJSON, PatchedDockerServiceConnectionRequestToJSON, PatchedKubernetesServiceConnectionRequestToJSON, PatchedOutpostRequestToJSON, ProxyOutpostConfigFromJSON, RadiusOutpostConfigFromJSON, ServiceConnectionFromJSON, ServiceConnectionStateFromJSON, TypeCreateFromJSON, UsedByFromJSON, } from '../models';
/**
 *
 */
export class OutpostsApi extends runtime.BaseAPI {
    /**
     * Outpost Viewset
     */
    outpostsInstancesCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.outpostRequest === null || requestParameters.outpostRequest === undefined) {
                throw new runtime.RequiredError('outpostRequest', 'Required parameter requestParameters.outpostRequest was null or undefined when calling outpostsInstancesCreate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/outposts/instances/`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: OutpostRequestToJSON(requestParameters.outpostRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => OutpostFromJSON(jsonValue));
        });
    }
    /**
     * Outpost Viewset
     */
    outpostsInstancesCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.outpostsInstancesCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Global default outpost config
     */
    outpostsInstancesDefaultSettingsRetrieveRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/outposts/instances/default_settings/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => OutpostDefaultConfigFromJSON(jsonValue));
        });
    }
    /**
     * Global default outpost config
     */
    outpostsInstancesDefaultSettingsRetrieve(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.outpostsInstancesDefaultSettingsRetrieveRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Outpost Viewset
     */
    outpostsInstancesDestroyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
                throw new runtime.RequiredError('uuid', 'Required parameter requestParameters.uuid was null or undefined when calling outpostsInstancesDestroy.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/outposts/instances/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Outpost Viewset
     */
    outpostsInstancesDestroy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.outpostsInstancesDestroyRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Get outposts current health
     */
    outpostsInstancesHealthListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
                throw new runtime.RequiredError('uuid', 'Required parameter requestParameters.uuid was null or undefined when calling outpostsInstancesHealthList.');
            }
            const queryParameters = {};
            if (requestParameters.managedIcontains !== undefined) {
                queryParameters['managed__icontains'] = requestParameters.managedIcontains;
            }
            if (requestParameters.managedIexact !== undefined) {
                queryParameters['managed__iexact'] = requestParameters.managedIexact;
            }
            if (requestParameters.nameIcontains !== undefined) {
                queryParameters['name__icontains'] = requestParameters.nameIcontains;
            }
            if (requestParameters.nameIexact !== undefined) {
                queryParameters['name__iexact'] = requestParameters.nameIexact;
            }
            if (requestParameters.ordering !== undefined) {
                queryParameters['ordering'] = requestParameters.ordering;
            }
            if (requestParameters.providersIsnull !== undefined) {
                queryParameters['providers__isnull'] = requestParameters.providersIsnull;
            }
            if (requestParameters.providersByPk) {
                queryParameters['providers_by_pk'] = requestParameters.providersByPk;
            }
            if (requestParameters.search !== undefined) {
                queryParameters['search'] = requestParameters.search;
            }
            if (requestParameters.serviceConnectionNameIcontains !== undefined) {
                queryParameters['service_connection__name__icontains'] = requestParameters.serviceConnectionNameIcontains;
            }
            if (requestParameters.serviceConnectionNameIexact !== undefined) {
                queryParameters['service_connection__name__iexact'] = requestParameters.serviceConnectionNameIexact;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/outposts/instances/{uuid}/health/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(OutpostHealthFromJSON));
        });
    }
    /**
     * Get outposts current health
     */
    outpostsInstancesHealthList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.outpostsInstancesHealthListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Outpost Viewset
     */
    outpostsInstancesListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.managedIcontains !== undefined) {
                queryParameters['managed__icontains'] = requestParameters.managedIcontains;
            }
            if (requestParameters.managedIexact !== undefined) {
                queryParameters['managed__iexact'] = requestParameters.managedIexact;
            }
            if (requestParameters.nameIcontains !== undefined) {
                queryParameters['name__icontains'] = requestParameters.nameIcontains;
            }
            if (requestParameters.nameIexact !== undefined) {
                queryParameters['name__iexact'] = requestParameters.nameIexact;
            }
            if (requestParameters.ordering !== undefined) {
                queryParameters['ordering'] = requestParameters.ordering;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.pageSize !== undefined) {
                queryParameters['page_size'] = requestParameters.pageSize;
            }
            if (requestParameters.providersIsnull !== undefined) {
                queryParameters['providers__isnull'] = requestParameters.providersIsnull;
            }
            if (requestParameters.providersByPk) {
                queryParameters['providers_by_pk'] = requestParameters.providersByPk;
            }
            if (requestParameters.search !== undefined) {
                queryParameters['search'] = requestParameters.search;
            }
            if (requestParameters.serviceConnectionNameIcontains !== undefined) {
                queryParameters['service_connection__name__icontains'] = requestParameters.serviceConnectionNameIcontains;
            }
            if (requestParameters.serviceConnectionNameIexact !== undefined) {
                queryParameters['service_connection__name__iexact'] = requestParameters.serviceConnectionNameIexact;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/outposts/instances/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedOutpostListFromJSON(jsonValue));
        });
    }
    /**
     * Outpost Viewset
     */
    outpostsInstancesList(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.outpostsInstancesListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Outpost Viewset
     */
    outpostsInstancesPartialUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
                throw new runtime.RequiredError('uuid', 'Required parameter requestParameters.uuid was null or undefined when calling outpostsInstancesPartialUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/outposts/instances/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: PatchedOutpostRequestToJSON(requestParameters.patchedOutpostRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => OutpostFromJSON(jsonValue));
        });
    }
    /**
     * Outpost Viewset
     */
    outpostsInstancesPartialUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.outpostsInstancesPartialUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Outpost Viewset
     */
    outpostsInstancesRetrieveRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
                throw new runtime.RequiredError('uuid', 'Required parameter requestParameters.uuid was null or undefined when calling outpostsInstancesRetrieve.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/outposts/instances/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => OutpostFromJSON(jsonValue));
        });
    }
    /**
     * Outpost Viewset
     */
    outpostsInstancesRetrieve(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.outpostsInstancesRetrieveRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Outpost Viewset
     */
    outpostsInstancesUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
                throw new runtime.RequiredError('uuid', 'Required parameter requestParameters.uuid was null or undefined when calling outpostsInstancesUpdate.');
            }
            if (requestParameters.outpostRequest === null || requestParameters.outpostRequest === undefined) {
                throw new runtime.RequiredError('outpostRequest', 'Required parameter requestParameters.outpostRequest was null or undefined when calling outpostsInstancesUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/outposts/instances/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: OutpostRequestToJSON(requestParameters.outpostRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => OutpostFromJSON(jsonValue));
        });
    }
    /**
     * Outpost Viewset
     */
    outpostsInstancesUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.outpostsInstancesUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of all objects that use this object
     */
    outpostsInstancesUsedByListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
                throw new runtime.RequiredError('uuid', 'Required parameter requestParameters.uuid was null or undefined when calling outpostsInstancesUsedByList.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/outposts/instances/{uuid}/used_by/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
        });
    }
    /**
     * Get a list of all objects that use this object
     */
    outpostsInstancesUsedByList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.outpostsInstancesUsedByListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * LDAPProvider Viewset
     */
    outpostsLdapListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.name !== undefined) {
                queryParameters['name'] = requestParameters.name;
            }
            if (requestParameters.ordering !== undefined) {
                queryParameters['ordering'] = requestParameters.ordering;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.pageSize !== undefined) {
                queryParameters['page_size'] = requestParameters.pageSize;
            }
            if (requestParameters.search !== undefined) {
                queryParameters['search'] = requestParameters.search;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/outposts/ldap/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedLDAPOutpostConfigListFromJSON(jsonValue));
        });
    }
    /**
     * LDAPProvider Viewset
     */
    outpostsLdapList(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.outpostsLdapListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * LDAPProvider Viewset
     */
    outpostsLdapRetrieveRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling outpostsLdapRetrieve.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/outposts/ldap/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => LDAPOutpostConfigFromJSON(jsonValue));
        });
    }
    /**
     * LDAPProvider Viewset
     */
    outpostsLdapRetrieve(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.outpostsLdapRetrieveRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * ProxyProvider Viewset
     */
    outpostsProxyListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.name !== undefined) {
                queryParameters['name'] = requestParameters.name;
            }
            if (requestParameters.ordering !== undefined) {
                queryParameters['ordering'] = requestParameters.ordering;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.pageSize !== undefined) {
                queryParameters['page_size'] = requestParameters.pageSize;
            }
            if (requestParameters.search !== undefined) {
                queryParameters['search'] = requestParameters.search;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/outposts/proxy/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedProxyOutpostConfigListFromJSON(jsonValue));
        });
    }
    /**
     * ProxyProvider Viewset
     */
    outpostsProxyList(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.outpostsProxyListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * ProxyProvider Viewset
     */
    outpostsProxyRetrieveRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling outpostsProxyRetrieve.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/outposts/proxy/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => ProxyOutpostConfigFromJSON(jsonValue));
        });
    }
    /**
     * ProxyProvider Viewset
     */
    outpostsProxyRetrieve(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.outpostsProxyRetrieveRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * RadiusProvider Viewset
     */
    outpostsRadiusListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.name !== undefined) {
                queryParameters['name'] = requestParameters.name;
            }
            if (requestParameters.ordering !== undefined) {
                queryParameters['ordering'] = requestParameters.ordering;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.pageSize !== undefined) {
                queryParameters['page_size'] = requestParameters.pageSize;
            }
            if (requestParameters.search !== undefined) {
                queryParameters['search'] = requestParameters.search;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/outposts/radius/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedRadiusOutpostConfigListFromJSON(jsonValue));
        });
    }
    /**
     * RadiusProvider Viewset
     */
    outpostsRadiusList(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.outpostsRadiusListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * RadiusProvider Viewset
     */
    outpostsRadiusRetrieveRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling outpostsRadiusRetrieve.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/outposts/radius/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => RadiusOutpostConfigFromJSON(jsonValue));
        });
    }
    /**
     * RadiusProvider Viewset
     */
    outpostsRadiusRetrieve(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.outpostsRadiusRetrieveRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * ServiceConnection Viewset
     */
    outpostsServiceConnectionsAllDestroyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
                throw new runtime.RequiredError('uuid', 'Required parameter requestParameters.uuid was null or undefined when calling outpostsServiceConnectionsAllDestroy.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/outposts/service_connections/all/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * ServiceConnection Viewset
     */
    outpostsServiceConnectionsAllDestroy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.outpostsServiceConnectionsAllDestroyRaw(requestParameters, initOverrides);
        });
    }
    /**
     * ServiceConnection Viewset
     */
    outpostsServiceConnectionsAllListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.name !== undefined) {
                queryParameters['name'] = requestParameters.name;
            }
            if (requestParameters.ordering !== undefined) {
                queryParameters['ordering'] = requestParameters.ordering;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.pageSize !== undefined) {
                queryParameters['page_size'] = requestParameters.pageSize;
            }
            if (requestParameters.search !== undefined) {
                queryParameters['search'] = requestParameters.search;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/outposts/service_connections/all/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedServiceConnectionListFromJSON(jsonValue));
        });
    }
    /**
     * ServiceConnection Viewset
     */
    outpostsServiceConnectionsAllList(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.outpostsServiceConnectionsAllListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * ServiceConnection Viewset
     */
    outpostsServiceConnectionsAllRetrieveRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
                throw new runtime.RequiredError('uuid', 'Required parameter requestParameters.uuid was null or undefined when calling outpostsServiceConnectionsAllRetrieve.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/outposts/service_connections/all/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => ServiceConnectionFromJSON(jsonValue));
        });
    }
    /**
     * ServiceConnection Viewset
     */
    outpostsServiceConnectionsAllRetrieve(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.outpostsServiceConnectionsAllRetrieveRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get the service connection\'s state
     */
    outpostsServiceConnectionsAllStateRetrieveRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
                throw new runtime.RequiredError('uuid', 'Required parameter requestParameters.uuid was null or undefined when calling outpostsServiceConnectionsAllStateRetrieve.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/outposts/service_connections/all/{uuid}/state/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => ServiceConnectionStateFromJSON(jsonValue));
        });
    }
    /**
     * Get the service connection\'s state
     */
    outpostsServiceConnectionsAllStateRetrieve(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.outpostsServiceConnectionsAllStateRetrieveRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get all creatable service connection types
     */
    outpostsServiceConnectionsAllTypesListRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/outposts/service_connections/all/types/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TypeCreateFromJSON));
        });
    }
    /**
     * Get all creatable service connection types
     */
    outpostsServiceConnectionsAllTypesList(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.outpostsServiceConnectionsAllTypesListRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of all objects that use this object
     */
    outpostsServiceConnectionsAllUsedByListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
                throw new runtime.RequiredError('uuid', 'Required parameter requestParameters.uuid was null or undefined when calling outpostsServiceConnectionsAllUsedByList.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/outposts/service_connections/all/{uuid}/used_by/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
        });
    }
    /**
     * Get a list of all objects that use this object
     */
    outpostsServiceConnectionsAllUsedByList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.outpostsServiceConnectionsAllUsedByListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * DockerServiceConnection Viewset
     */
    outpostsServiceConnectionsDockerCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.dockerServiceConnectionRequest === null || requestParameters.dockerServiceConnectionRequest === undefined) {
                throw new runtime.RequiredError('dockerServiceConnectionRequest', 'Required parameter requestParameters.dockerServiceConnectionRequest was null or undefined when calling outpostsServiceConnectionsDockerCreate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/outposts/service_connections/docker/`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: DockerServiceConnectionRequestToJSON(requestParameters.dockerServiceConnectionRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => DockerServiceConnectionFromJSON(jsonValue));
        });
    }
    /**
     * DockerServiceConnection Viewset
     */
    outpostsServiceConnectionsDockerCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.outpostsServiceConnectionsDockerCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * DockerServiceConnection Viewset
     */
    outpostsServiceConnectionsDockerDestroyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
                throw new runtime.RequiredError('uuid', 'Required parameter requestParameters.uuid was null or undefined when calling outpostsServiceConnectionsDockerDestroy.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/outposts/service_connections/docker/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * DockerServiceConnection Viewset
     */
    outpostsServiceConnectionsDockerDestroy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.outpostsServiceConnectionsDockerDestroyRaw(requestParameters, initOverrides);
        });
    }
    /**
     * DockerServiceConnection Viewset
     */
    outpostsServiceConnectionsDockerListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.local !== undefined) {
                queryParameters['local'] = requestParameters.local;
            }
            if (requestParameters.name !== undefined) {
                queryParameters['name'] = requestParameters.name;
            }
            if (requestParameters.ordering !== undefined) {
                queryParameters['ordering'] = requestParameters.ordering;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.pageSize !== undefined) {
                queryParameters['page_size'] = requestParameters.pageSize;
            }
            if (requestParameters.search !== undefined) {
                queryParameters['search'] = requestParameters.search;
            }
            if (requestParameters.tlsAuthentication !== undefined) {
                queryParameters['tls_authentication'] = requestParameters.tlsAuthentication;
            }
            if (requestParameters.tlsVerification !== undefined) {
                queryParameters['tls_verification'] = requestParameters.tlsVerification;
            }
            if (requestParameters.url !== undefined) {
                queryParameters['url'] = requestParameters.url;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/outposts/service_connections/docker/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedDockerServiceConnectionListFromJSON(jsonValue));
        });
    }
    /**
     * DockerServiceConnection Viewset
     */
    outpostsServiceConnectionsDockerList(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.outpostsServiceConnectionsDockerListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * DockerServiceConnection Viewset
     */
    outpostsServiceConnectionsDockerPartialUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
                throw new runtime.RequiredError('uuid', 'Required parameter requestParameters.uuid was null or undefined when calling outpostsServiceConnectionsDockerPartialUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/outposts/service_connections/docker/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: PatchedDockerServiceConnectionRequestToJSON(requestParameters.patchedDockerServiceConnectionRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => DockerServiceConnectionFromJSON(jsonValue));
        });
    }
    /**
     * DockerServiceConnection Viewset
     */
    outpostsServiceConnectionsDockerPartialUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.outpostsServiceConnectionsDockerPartialUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * DockerServiceConnection Viewset
     */
    outpostsServiceConnectionsDockerRetrieveRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
                throw new runtime.RequiredError('uuid', 'Required parameter requestParameters.uuid was null or undefined when calling outpostsServiceConnectionsDockerRetrieve.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/outposts/service_connections/docker/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => DockerServiceConnectionFromJSON(jsonValue));
        });
    }
    /**
     * DockerServiceConnection Viewset
     */
    outpostsServiceConnectionsDockerRetrieve(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.outpostsServiceConnectionsDockerRetrieveRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * DockerServiceConnection Viewset
     */
    outpostsServiceConnectionsDockerUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
                throw new runtime.RequiredError('uuid', 'Required parameter requestParameters.uuid was null or undefined when calling outpostsServiceConnectionsDockerUpdate.');
            }
            if (requestParameters.dockerServiceConnectionRequest === null || requestParameters.dockerServiceConnectionRequest === undefined) {
                throw new runtime.RequiredError('dockerServiceConnectionRequest', 'Required parameter requestParameters.dockerServiceConnectionRequest was null or undefined when calling outpostsServiceConnectionsDockerUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/outposts/service_connections/docker/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: DockerServiceConnectionRequestToJSON(requestParameters.dockerServiceConnectionRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => DockerServiceConnectionFromJSON(jsonValue));
        });
    }
    /**
     * DockerServiceConnection Viewset
     */
    outpostsServiceConnectionsDockerUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.outpostsServiceConnectionsDockerUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of all objects that use this object
     */
    outpostsServiceConnectionsDockerUsedByListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
                throw new runtime.RequiredError('uuid', 'Required parameter requestParameters.uuid was null or undefined when calling outpostsServiceConnectionsDockerUsedByList.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/outposts/service_connections/docker/{uuid}/used_by/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
        });
    }
    /**
     * Get a list of all objects that use this object
     */
    outpostsServiceConnectionsDockerUsedByList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.outpostsServiceConnectionsDockerUsedByListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * KubernetesServiceConnection Viewset
     */
    outpostsServiceConnectionsKubernetesCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.kubernetesServiceConnectionRequest === null || requestParameters.kubernetesServiceConnectionRequest === undefined) {
                throw new runtime.RequiredError('kubernetesServiceConnectionRequest', 'Required parameter requestParameters.kubernetesServiceConnectionRequest was null or undefined when calling outpostsServiceConnectionsKubernetesCreate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/outposts/service_connections/kubernetes/`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: KubernetesServiceConnectionRequestToJSON(requestParameters.kubernetesServiceConnectionRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => KubernetesServiceConnectionFromJSON(jsonValue));
        });
    }
    /**
     * KubernetesServiceConnection Viewset
     */
    outpostsServiceConnectionsKubernetesCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.outpostsServiceConnectionsKubernetesCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * KubernetesServiceConnection Viewset
     */
    outpostsServiceConnectionsKubernetesDestroyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
                throw new runtime.RequiredError('uuid', 'Required parameter requestParameters.uuid was null or undefined when calling outpostsServiceConnectionsKubernetesDestroy.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/outposts/service_connections/kubernetes/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * KubernetesServiceConnection Viewset
     */
    outpostsServiceConnectionsKubernetesDestroy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.outpostsServiceConnectionsKubernetesDestroyRaw(requestParameters, initOverrides);
        });
    }
    /**
     * KubernetesServiceConnection Viewset
     */
    outpostsServiceConnectionsKubernetesListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.local !== undefined) {
                queryParameters['local'] = requestParameters.local;
            }
            if (requestParameters.name !== undefined) {
                queryParameters['name'] = requestParameters.name;
            }
            if (requestParameters.ordering !== undefined) {
                queryParameters['ordering'] = requestParameters.ordering;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.pageSize !== undefined) {
                queryParameters['page_size'] = requestParameters.pageSize;
            }
            if (requestParameters.search !== undefined) {
                queryParameters['search'] = requestParameters.search;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/outposts/service_connections/kubernetes/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedKubernetesServiceConnectionListFromJSON(jsonValue));
        });
    }
    /**
     * KubernetesServiceConnection Viewset
     */
    outpostsServiceConnectionsKubernetesList(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.outpostsServiceConnectionsKubernetesListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * KubernetesServiceConnection Viewset
     */
    outpostsServiceConnectionsKubernetesPartialUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
                throw new runtime.RequiredError('uuid', 'Required parameter requestParameters.uuid was null or undefined when calling outpostsServiceConnectionsKubernetesPartialUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/outposts/service_connections/kubernetes/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: PatchedKubernetesServiceConnectionRequestToJSON(requestParameters.patchedKubernetesServiceConnectionRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => KubernetesServiceConnectionFromJSON(jsonValue));
        });
    }
    /**
     * KubernetesServiceConnection Viewset
     */
    outpostsServiceConnectionsKubernetesPartialUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.outpostsServiceConnectionsKubernetesPartialUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * KubernetesServiceConnection Viewset
     */
    outpostsServiceConnectionsKubernetesRetrieveRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
                throw new runtime.RequiredError('uuid', 'Required parameter requestParameters.uuid was null or undefined when calling outpostsServiceConnectionsKubernetesRetrieve.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/outposts/service_connections/kubernetes/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => KubernetesServiceConnectionFromJSON(jsonValue));
        });
    }
    /**
     * KubernetesServiceConnection Viewset
     */
    outpostsServiceConnectionsKubernetesRetrieve(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.outpostsServiceConnectionsKubernetesRetrieveRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * KubernetesServiceConnection Viewset
     */
    outpostsServiceConnectionsKubernetesUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
                throw new runtime.RequiredError('uuid', 'Required parameter requestParameters.uuid was null or undefined when calling outpostsServiceConnectionsKubernetesUpdate.');
            }
            if (requestParameters.kubernetesServiceConnectionRequest === null || requestParameters.kubernetesServiceConnectionRequest === undefined) {
                throw new runtime.RequiredError('kubernetesServiceConnectionRequest', 'Required parameter requestParameters.kubernetesServiceConnectionRequest was null or undefined when calling outpostsServiceConnectionsKubernetesUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/outposts/service_connections/kubernetes/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: KubernetesServiceConnectionRequestToJSON(requestParameters.kubernetesServiceConnectionRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => KubernetesServiceConnectionFromJSON(jsonValue));
        });
    }
    /**
     * KubernetesServiceConnection Viewset
     */
    outpostsServiceConnectionsKubernetesUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.outpostsServiceConnectionsKubernetesUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of all objects that use this object
     */
    outpostsServiceConnectionsKubernetesUsedByListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
                throw new runtime.RequiredError('uuid', 'Required parameter requestParameters.uuid was null or undefined when calling outpostsServiceConnectionsKubernetesUsedByList.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/outposts/service_connections/kubernetes/{uuid}/used_by/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
        });
    }
    /**
     * Get a list of all objects that use this object
     */
    outpostsServiceConnectionsKubernetesUsedByList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.outpostsServiceConnectionsKubernetesUsedByListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
