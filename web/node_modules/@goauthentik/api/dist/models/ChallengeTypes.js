"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ChallengeTypesToJSON = exports.ChallengeTypesFromJSONTyped = exports.ChallengeTypesFromJSON = void 0;
const AccessDeniedChallenge_1 = require("./AccessDeniedChallenge");
const AppleLoginChallenge_1 = require("./AppleLoginChallenge");
const AuthenticatorDuoChallenge_1 = require("./AuthenticatorDuoChallenge");
const AuthenticatorSMSChallenge_1 = require("./AuthenticatorSMSChallenge");
const AuthenticatorStaticChallenge_1 = require("./AuthenticatorStaticChallenge");
const AuthenticatorTOTPChallenge_1 = require("./AuthenticatorTOTPChallenge");
const AuthenticatorValidationChallenge_1 = require("./AuthenticatorValidationChallenge");
const AuthenticatorWebAuthnChallenge_1 = require("./AuthenticatorWebAuthnChallenge");
const AutosubmitChallenge_1 = require("./AutosubmitChallenge");
const CaptchaChallenge_1 = require("./CaptchaChallenge");
const ConsentChallenge_1 = require("./ConsentChallenge");
const DummyChallenge_1 = require("./DummyChallenge");
const EmailChallenge_1 = require("./EmailChallenge");
const FlowErrorChallenge_1 = require("./FlowErrorChallenge");
const IdentificationChallenge_1 = require("./IdentificationChallenge");
const OAuthDeviceCodeChallenge_1 = require("./OAuthDeviceCodeChallenge");
const OAuthDeviceCodeFinishChallenge_1 = require("./OAuthDeviceCodeFinishChallenge");
const PasswordChallenge_1 = require("./PasswordChallenge");
const PlexAuthenticationChallenge_1 = require("./PlexAuthenticationChallenge");
const PromptChallenge_1 = require("./PromptChallenge");
const RedirectChallenge_1 = require("./RedirectChallenge");
const ShellChallenge_1 = require("./ShellChallenge");
const UserLoginChallenge_1 = require("./UserLoginChallenge");
function ChallengeTypesFromJSON(json) {
    return ChallengeTypesFromJSONTyped(json, false);
}
exports.ChallengeTypesFromJSON = ChallengeTypesFromJSON;
function ChallengeTypesFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['component']) {
        case 'ak-provider-oauth2-device-code':
            return Object.assign(Object.assign({}, (0, OAuthDeviceCodeChallenge_1.OAuthDeviceCodeChallengeFromJSONTyped)(json, true)), { component: 'ak-provider-oauth2-device-code' });
        case 'ak-provider-oauth2-device-code-finish':
            return Object.assign(Object.assign({}, (0, OAuthDeviceCodeFinishChallenge_1.OAuthDeviceCodeFinishChallengeFromJSONTyped)(json, true)), { component: 'ak-provider-oauth2-device-code-finish' });
        case 'ak-source-oauth-apple':
            return Object.assign(Object.assign({}, (0, AppleLoginChallenge_1.AppleLoginChallengeFromJSONTyped)(json, true)), { component: 'ak-source-oauth-apple' });
        case 'ak-source-plex':
            return Object.assign(Object.assign({}, (0, PlexAuthenticationChallenge_1.PlexAuthenticationChallengeFromJSONTyped)(json, true)), { component: 'ak-source-plex' });
        case 'ak-stage-access-denied':
            return Object.assign(Object.assign({}, (0, AccessDeniedChallenge_1.AccessDeniedChallengeFromJSONTyped)(json, true)), { component: 'ak-stage-access-denied' });
        case 'ak-stage-authenticator-duo':
            return Object.assign(Object.assign({}, (0, AuthenticatorDuoChallenge_1.AuthenticatorDuoChallengeFromJSONTyped)(json, true)), { component: 'ak-stage-authenticator-duo' });
        case 'ak-stage-authenticator-sms':
            return Object.assign(Object.assign({}, (0, AuthenticatorSMSChallenge_1.AuthenticatorSMSChallengeFromJSONTyped)(json, true)), { component: 'ak-stage-authenticator-sms' });
        case 'ak-stage-authenticator-static':
            return Object.assign(Object.assign({}, (0, AuthenticatorStaticChallenge_1.AuthenticatorStaticChallengeFromJSONTyped)(json, true)), { component: 'ak-stage-authenticator-static' });
        case 'ak-stage-authenticator-totp':
            return Object.assign(Object.assign({}, (0, AuthenticatorTOTPChallenge_1.AuthenticatorTOTPChallengeFromJSONTyped)(json, true)), { component: 'ak-stage-authenticator-totp' });
        case 'ak-stage-authenticator-validate':
            return Object.assign(Object.assign({}, (0, AuthenticatorValidationChallenge_1.AuthenticatorValidationChallengeFromJSONTyped)(json, true)), { component: 'ak-stage-authenticator-validate' });
        case 'ak-stage-authenticator-webauthn':
            return Object.assign(Object.assign({}, (0, AuthenticatorWebAuthnChallenge_1.AuthenticatorWebAuthnChallengeFromJSONTyped)(json, true)), { component: 'ak-stage-authenticator-webauthn' });
        case 'ak-stage-autosubmit':
            return Object.assign(Object.assign({}, (0, AutosubmitChallenge_1.AutosubmitChallengeFromJSONTyped)(json, true)), { component: 'ak-stage-autosubmit' });
        case 'ak-stage-captcha':
            return Object.assign(Object.assign({}, (0, CaptchaChallenge_1.CaptchaChallengeFromJSONTyped)(json, true)), { component: 'ak-stage-captcha' });
        case 'ak-stage-consent':
            return Object.assign(Object.assign({}, (0, ConsentChallenge_1.ConsentChallengeFromJSONTyped)(json, true)), { component: 'ak-stage-consent' });
        case 'ak-stage-dummy':
            return Object.assign(Object.assign({}, (0, DummyChallenge_1.DummyChallengeFromJSONTyped)(json, true)), { component: 'ak-stage-dummy' });
        case 'ak-stage-email':
            return Object.assign(Object.assign({}, (0, EmailChallenge_1.EmailChallengeFromJSONTyped)(json, true)), { component: 'ak-stage-email' });
        case 'ak-stage-flow-error':
            return Object.assign(Object.assign({}, (0, FlowErrorChallenge_1.FlowErrorChallengeFromJSONTyped)(json, true)), { component: 'ak-stage-flow-error' });
        case 'ak-stage-identification':
            return Object.assign(Object.assign({}, (0, IdentificationChallenge_1.IdentificationChallengeFromJSONTyped)(json, true)), { component: 'ak-stage-identification' });
        case 'ak-stage-password':
            return Object.assign(Object.assign({}, (0, PasswordChallenge_1.PasswordChallengeFromJSONTyped)(json, true)), { component: 'ak-stage-password' });
        case 'ak-stage-prompt':
            return Object.assign(Object.assign({}, (0, PromptChallenge_1.PromptChallengeFromJSONTyped)(json, true)), { component: 'ak-stage-prompt' });
        case 'ak-stage-user-login':
            return Object.assign(Object.assign({}, (0, UserLoginChallenge_1.UserLoginChallengeFromJSONTyped)(json, true)), { component: 'ak-stage-user-login' });
        case 'xak-flow-redirect':
            return Object.assign(Object.assign({}, (0, RedirectChallenge_1.RedirectChallengeFromJSONTyped)(json, true)), { component: 'xak-flow-redirect' });
        case 'xak-flow-shell':
            return Object.assign(Object.assign({}, (0, ShellChallenge_1.ShellChallengeFromJSONTyped)(json, true)), { component: 'xak-flow-shell' });
        default:
            throw new Error(`No variant of ChallengeTypes exists with 'component=${json['component']}'`);
    }
}
exports.ChallengeTypesFromJSONTyped = ChallengeTypesFromJSONTyped;
function ChallengeTypesToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['component']) {
        case 'ak-provider-oauth2-device-code':
            return (0, OAuthDeviceCodeChallenge_1.OAuthDeviceCodeChallengeToJSON)(value);
        case 'ak-provider-oauth2-device-code-finish':
            return (0, OAuthDeviceCodeFinishChallenge_1.OAuthDeviceCodeFinishChallengeToJSON)(value);
        case 'ak-source-oauth-apple':
            return (0, AppleLoginChallenge_1.AppleLoginChallengeToJSON)(value);
        case 'ak-source-plex':
            return (0, PlexAuthenticationChallenge_1.PlexAuthenticationChallengeToJSON)(value);
        case 'ak-stage-access-denied':
            return (0, AccessDeniedChallenge_1.AccessDeniedChallengeToJSON)(value);
        case 'ak-stage-authenticator-duo':
            return (0, AuthenticatorDuoChallenge_1.AuthenticatorDuoChallengeToJSON)(value);
        case 'ak-stage-authenticator-sms':
            return (0, AuthenticatorSMSChallenge_1.AuthenticatorSMSChallengeToJSON)(value);
        case 'ak-stage-authenticator-static':
            return (0, AuthenticatorStaticChallenge_1.AuthenticatorStaticChallengeToJSON)(value);
        case 'ak-stage-authenticator-totp':
            return (0, AuthenticatorTOTPChallenge_1.AuthenticatorTOTPChallengeToJSON)(value);
        case 'ak-stage-authenticator-validate':
            return (0, AuthenticatorValidationChallenge_1.AuthenticatorValidationChallengeToJSON)(value);
        case 'ak-stage-authenticator-webauthn':
            return (0, AuthenticatorWebAuthnChallenge_1.AuthenticatorWebAuthnChallengeToJSON)(value);
        case 'ak-stage-autosubmit':
            return (0, AutosubmitChallenge_1.AutosubmitChallengeToJSON)(value);
        case 'ak-stage-captcha':
            return (0, CaptchaChallenge_1.CaptchaChallengeToJSON)(value);
        case 'ak-stage-consent':
            return (0, ConsentChallenge_1.ConsentChallengeToJSON)(value);
        case 'ak-stage-dummy':
            return (0, DummyChallenge_1.DummyChallengeToJSON)(value);
        case 'ak-stage-email':
            return (0, EmailChallenge_1.EmailChallengeToJSON)(value);
        case 'ak-stage-flow-error':
            return (0, FlowErrorChallenge_1.FlowErrorChallengeToJSON)(value);
        case 'ak-stage-identification':
            return (0, IdentificationChallenge_1.IdentificationChallengeToJSON)(value);
        case 'ak-stage-password':
            return (0, PasswordChallenge_1.PasswordChallengeToJSON)(value);
        case 'ak-stage-prompt':
            return (0, PromptChallenge_1.PromptChallengeToJSON)(value);
        case 'ak-stage-user-login':
            return (0, UserLoginChallenge_1.UserLoginChallengeToJSON)(value);
        case 'xak-flow-redirect':
            return (0, RedirectChallenge_1.RedirectChallengeToJSON)(value);
        case 'xak-flow-shell':
            return (0, ShellChallenge_1.ShellChallengeToJSON)(value);
        default:
            throw new Error(`No variant of ChallengeTypes exists with 'component=${value['component']}'`);
    }
}
exports.ChallengeTypesToJSON = ChallengeTypesToJSON;
