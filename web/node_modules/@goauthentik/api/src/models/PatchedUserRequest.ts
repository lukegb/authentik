/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { UserTypeEnum } from './UserTypeEnum';
import {
    UserTypeEnumFromJSON,
    UserTypeEnumFromJSONTyped,
    UserTypeEnumToJSON,
} from './UserTypeEnum';

/**
 * User Serializer
 * @export
 * @interface PatchedUserRequest
 */
export interface PatchedUserRequest {
    /**
     * 
     * @type {string}
     * @memberof PatchedUserRequest
     */
    username?: string;
    /**
     * User's display name.
     * @type {string}
     * @memberof PatchedUserRequest
     */
    name?: string;
    /**
     * Designates whether this user should be treated as active. Unselect this instead of deleting accounts.
     * @type {boolean}
     * @memberof PatchedUserRequest
     */
    isActive?: boolean;
    /**
     * 
     * @type {Date}
     * @memberof PatchedUserRequest
     */
    lastLogin?: Date | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof PatchedUserRequest
     */
    groups?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof PatchedUserRequest
     */
    email?: string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof PatchedUserRequest
     */
    attributes?: { [key: string]: any; };
    /**
     * 
     * @type {string}
     * @memberof PatchedUserRequest
     */
    path?: string;
    /**
     * 
     * @type {UserTypeEnum}
     * @memberof PatchedUserRequest
     */
    type?: UserTypeEnum;
}

/**
 * Check if a given object implements the PatchedUserRequest interface.
 */
export function instanceOfPatchedUserRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PatchedUserRequestFromJSON(json: any): PatchedUserRequest {
    return PatchedUserRequestFromJSONTyped(json, false);
}

export function PatchedUserRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PatchedUserRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'username': !exists(json, 'username') ? undefined : json['username'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'isActive': !exists(json, 'is_active') ? undefined : json['is_active'],
        'lastLogin': !exists(json, 'last_login') ? undefined : (json['last_login'] === null ? null : new Date(json['last_login'])),
        'groups': !exists(json, 'groups') ? undefined : json['groups'],
        'email': !exists(json, 'email') ? undefined : json['email'],
        'attributes': !exists(json, 'attributes') ? undefined : json['attributes'],
        'path': !exists(json, 'path') ? undefined : json['path'],
        'type': !exists(json, 'type') ? undefined : UserTypeEnumFromJSON(json['type']),
    };
}

export function PatchedUserRequestToJSON(value?: PatchedUserRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'username': value.username,
        'name': value.name,
        'is_active': value.isActive,
        'last_login': value.lastLogin === undefined ? undefined : (value.lastLogin === null ? null : value.lastLogin.toISOString()),
        'groups': value.groups,
        'email': value.email,
        'attributes': value.attributes,
        'path': value.path,
        'type': UserTypeEnumToJSON(value.type),
    };
}

