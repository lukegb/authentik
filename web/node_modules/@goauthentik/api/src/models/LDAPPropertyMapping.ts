/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * LDAP PropertyMapping Serializer
 * @export
 * @interface LDAPPropertyMapping
 */
export interface LDAPPropertyMapping {
    /**
     * 
     * @type {string}
     * @memberof LDAPPropertyMapping
     */
    readonly pk: string;
    /**
     * Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
     * @type {string}
     * @memberof LDAPPropertyMapping
     */
    managed?: string | null;
    /**
     * 
     * @type {string}
     * @memberof LDAPPropertyMapping
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof LDAPPropertyMapping
     */
    expression: string;
    /**
     * Get object's component so that we know how to edit the object
     * @type {string}
     * @memberof LDAPPropertyMapping
     */
    readonly component: string;
    /**
     * Return object's verbose_name
     * @type {string}
     * @memberof LDAPPropertyMapping
     */
    readonly verboseName: string;
    /**
     * Return object's plural verbose_name
     * @type {string}
     * @memberof LDAPPropertyMapping
     */
    readonly verboseNamePlural: string;
    /**
     * Return internal model name
     * @type {string}
     * @memberof LDAPPropertyMapping
     */
    readonly metaModelName: string;
    /**
     * 
     * @type {string}
     * @memberof LDAPPropertyMapping
     */
    objectField: string;
}

/**
 * Check if a given object implements the LDAPPropertyMapping interface.
 */
export function instanceOfLDAPPropertyMapping(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "pk" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "expression" in value;
    isInstance = isInstance && "component" in value;
    isInstance = isInstance && "verboseName" in value;
    isInstance = isInstance && "verboseNamePlural" in value;
    isInstance = isInstance && "metaModelName" in value;
    isInstance = isInstance && "objectField" in value;

    return isInstance;
}

export function LDAPPropertyMappingFromJSON(json: any): LDAPPropertyMapping {
    return LDAPPropertyMappingFromJSONTyped(json, false);
}

export function LDAPPropertyMappingFromJSONTyped(json: any, ignoreDiscriminator: boolean): LDAPPropertyMapping {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'pk': json['pk'],
        'managed': !exists(json, 'managed') ? undefined : json['managed'],
        'name': json['name'],
        'expression': json['expression'],
        'component': json['component'],
        'verboseName': json['verbose_name'],
        'verboseNamePlural': json['verbose_name_plural'],
        'metaModelName': json['meta_model_name'],
        'objectField': json['object_field'],
    };
}

export function LDAPPropertyMappingToJSON(value?: LDAPPropertyMapping | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'managed': value.managed,
        'name': value.name,
        'expression': value.expression,
        'object_field': value.objectField,
    };
}

