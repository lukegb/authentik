/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GenericError,
  LDAPPropertyMapping,
  LDAPPropertyMappingRequest,
  NotificationWebhookMapping,
  NotificationWebhookMappingRequest,
  PaginatedLDAPPropertyMappingList,
  PaginatedNotificationWebhookMappingList,
  PaginatedPropertyMappingList,
  PaginatedRACPropertyMappingList,
  PaginatedSAMLPropertyMappingList,
  PaginatedSCIMMappingList,
  PaginatedScopeMappingList,
  PatchedLDAPPropertyMappingRequest,
  PatchedNotificationWebhookMappingRequest,
  PatchedRACPropertyMappingRequest,
  PatchedSAMLPropertyMappingRequest,
  PatchedSCIMMappingRequest,
  PatchedScopeMappingRequest,
  PolicyTestRequest,
  PropertyMapping,
  PropertyMappingTestResult,
  RACPropertyMapping,
  RACPropertyMappingRequest,
  SAMLPropertyMapping,
  SAMLPropertyMappingRequest,
  SCIMMapping,
  SCIMMappingRequest,
  ScopeMapping,
  ScopeMappingRequest,
  TypeCreate,
  UsedBy,
  ValidationError,
} from '../models';
import {
    GenericErrorFromJSON,
    GenericErrorToJSON,
    LDAPPropertyMappingFromJSON,
    LDAPPropertyMappingToJSON,
    LDAPPropertyMappingRequestFromJSON,
    LDAPPropertyMappingRequestToJSON,
    NotificationWebhookMappingFromJSON,
    NotificationWebhookMappingToJSON,
    NotificationWebhookMappingRequestFromJSON,
    NotificationWebhookMappingRequestToJSON,
    PaginatedLDAPPropertyMappingListFromJSON,
    PaginatedLDAPPropertyMappingListToJSON,
    PaginatedNotificationWebhookMappingListFromJSON,
    PaginatedNotificationWebhookMappingListToJSON,
    PaginatedPropertyMappingListFromJSON,
    PaginatedPropertyMappingListToJSON,
    PaginatedRACPropertyMappingListFromJSON,
    PaginatedRACPropertyMappingListToJSON,
    PaginatedSAMLPropertyMappingListFromJSON,
    PaginatedSAMLPropertyMappingListToJSON,
    PaginatedSCIMMappingListFromJSON,
    PaginatedSCIMMappingListToJSON,
    PaginatedScopeMappingListFromJSON,
    PaginatedScopeMappingListToJSON,
    PatchedLDAPPropertyMappingRequestFromJSON,
    PatchedLDAPPropertyMappingRequestToJSON,
    PatchedNotificationWebhookMappingRequestFromJSON,
    PatchedNotificationWebhookMappingRequestToJSON,
    PatchedRACPropertyMappingRequestFromJSON,
    PatchedRACPropertyMappingRequestToJSON,
    PatchedSAMLPropertyMappingRequestFromJSON,
    PatchedSAMLPropertyMappingRequestToJSON,
    PatchedSCIMMappingRequestFromJSON,
    PatchedSCIMMappingRequestToJSON,
    PatchedScopeMappingRequestFromJSON,
    PatchedScopeMappingRequestToJSON,
    PolicyTestRequestFromJSON,
    PolicyTestRequestToJSON,
    PropertyMappingFromJSON,
    PropertyMappingToJSON,
    PropertyMappingTestResultFromJSON,
    PropertyMappingTestResultToJSON,
    RACPropertyMappingFromJSON,
    RACPropertyMappingToJSON,
    RACPropertyMappingRequestFromJSON,
    RACPropertyMappingRequestToJSON,
    SAMLPropertyMappingFromJSON,
    SAMLPropertyMappingToJSON,
    SAMLPropertyMappingRequestFromJSON,
    SAMLPropertyMappingRequestToJSON,
    SCIMMappingFromJSON,
    SCIMMappingToJSON,
    SCIMMappingRequestFromJSON,
    SCIMMappingRequestToJSON,
    ScopeMappingFromJSON,
    ScopeMappingToJSON,
    ScopeMappingRequestFromJSON,
    ScopeMappingRequestToJSON,
    TypeCreateFromJSON,
    TypeCreateToJSON,
    UsedByFromJSON,
    UsedByToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models';

export interface PropertymappingsAllDestroyRequest {
    pmUuid: string;
}

export interface PropertymappingsAllListRequest {
    managedIsnull?: boolean;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
}

export interface PropertymappingsAllRetrieveRequest {
    pmUuid: string;
}

export interface PropertymappingsAllTestCreateRequest {
    pmUuid: string;
    policyTestRequest: PolicyTestRequest;
    formatResult?: boolean;
}

export interface PropertymappingsAllUsedByListRequest {
    pmUuid: string;
}

export interface PropertymappingsLdapCreateRequest {
    lDAPPropertyMappingRequest: LDAPPropertyMappingRequest;
}

export interface PropertymappingsLdapDestroyRequest {
    pmUuid: string;
}

export interface PropertymappingsLdapListRequest {
    expression?: string;
    managed?: Array<string>;
    name?: string;
    objectField?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    pmUuid?: string;
    search?: string;
}

export interface PropertymappingsLdapPartialUpdateRequest {
    pmUuid: string;
    patchedLDAPPropertyMappingRequest?: PatchedLDAPPropertyMappingRequest;
}

export interface PropertymappingsLdapRetrieveRequest {
    pmUuid: string;
}

export interface PropertymappingsLdapUpdateRequest {
    pmUuid: string;
    lDAPPropertyMappingRequest: LDAPPropertyMappingRequest;
}

export interface PropertymappingsLdapUsedByListRequest {
    pmUuid: string;
}

export interface PropertymappingsNotificationCreateRequest {
    notificationWebhookMappingRequest: NotificationWebhookMappingRequest;
}

export interface PropertymappingsNotificationDestroyRequest {
    pmUuid: string;
}

export interface PropertymappingsNotificationListRequest {
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
}

export interface PropertymappingsNotificationPartialUpdateRequest {
    pmUuid: string;
    patchedNotificationWebhookMappingRequest?: PatchedNotificationWebhookMappingRequest;
}

export interface PropertymappingsNotificationRetrieveRequest {
    pmUuid: string;
}

export interface PropertymappingsNotificationUpdateRequest {
    pmUuid: string;
    notificationWebhookMappingRequest: NotificationWebhookMappingRequest;
}

export interface PropertymappingsNotificationUsedByListRequest {
    pmUuid: string;
}

export interface PropertymappingsRacCreateRequest {
    rACPropertyMappingRequest: RACPropertyMappingRequest;
}

export interface PropertymappingsRacDestroyRequest {
    pmUuid: string;
}

export interface PropertymappingsRacListRequest {
    managed?: Array<string>;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
}

export interface PropertymappingsRacPartialUpdateRequest {
    pmUuid: string;
    patchedRACPropertyMappingRequest?: PatchedRACPropertyMappingRequest;
}

export interface PropertymappingsRacRetrieveRequest {
    pmUuid: string;
}

export interface PropertymappingsRacUpdateRequest {
    pmUuid: string;
    rACPropertyMappingRequest: RACPropertyMappingRequest;
}

export interface PropertymappingsRacUsedByListRequest {
    pmUuid: string;
}

export interface PropertymappingsSamlCreateRequest {
    sAMLPropertyMappingRequest: SAMLPropertyMappingRequest;
}

export interface PropertymappingsSamlDestroyRequest {
    pmUuid: string;
}

export interface PropertymappingsSamlListRequest {
    expression?: string;
    friendlyName?: string;
    managed?: Array<string>;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    pmUuid?: string;
    samlName?: string;
    search?: string;
}

export interface PropertymappingsSamlPartialUpdateRequest {
    pmUuid: string;
    patchedSAMLPropertyMappingRequest?: PatchedSAMLPropertyMappingRequest;
}

export interface PropertymappingsSamlRetrieveRequest {
    pmUuid: string;
}

export interface PropertymappingsSamlUpdateRequest {
    pmUuid: string;
    sAMLPropertyMappingRequest: SAMLPropertyMappingRequest;
}

export interface PropertymappingsSamlUsedByListRequest {
    pmUuid: string;
}

export interface PropertymappingsScimCreateRequest {
    sCIMMappingRequest: SCIMMappingRequest;
}

export interface PropertymappingsScimDestroyRequest {
    pmUuid: string;
}

export interface PropertymappingsScimListRequest {
    expression?: string;
    managed?: Array<string>;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    pmUuid?: string;
    search?: string;
}

export interface PropertymappingsScimPartialUpdateRequest {
    pmUuid: string;
    patchedSCIMMappingRequest?: PatchedSCIMMappingRequest;
}

export interface PropertymappingsScimRetrieveRequest {
    pmUuid: string;
}

export interface PropertymappingsScimUpdateRequest {
    pmUuid: string;
    sCIMMappingRequest: SCIMMappingRequest;
}

export interface PropertymappingsScimUsedByListRequest {
    pmUuid: string;
}

export interface PropertymappingsScopeCreateRequest {
    scopeMappingRequest: ScopeMappingRequest;
}

export interface PropertymappingsScopeDestroyRequest {
    pmUuid: string;
}

export interface PropertymappingsScopeListRequest {
    managed?: Array<string>;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    scopeName?: string;
    search?: string;
}

export interface PropertymappingsScopePartialUpdateRequest {
    pmUuid: string;
    patchedScopeMappingRequest?: PatchedScopeMappingRequest;
}

export interface PropertymappingsScopeRetrieveRequest {
    pmUuid: string;
}

export interface PropertymappingsScopeUpdateRequest {
    pmUuid: string;
    scopeMappingRequest: ScopeMappingRequest;
}

export interface PropertymappingsScopeUsedByListRequest {
    pmUuid: string;
}

/**
 * 
 */
export class PropertymappingsApi extends runtime.BaseAPI {

    /**
     * PropertyMapping Viewset
     */
    async propertymappingsAllDestroyRaw(requestParameters: PropertymappingsAllDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
            throw new runtime.RequiredError('pmUuid','Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsAllDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/propertymappings/all/{pm_uuid}/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * PropertyMapping Viewset
     */
    async propertymappingsAllDestroy(requestParameters: PropertymappingsAllDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.propertymappingsAllDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * PropertyMapping Viewset
     */
    async propertymappingsAllListRaw(requestParameters: PropertymappingsAllListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPropertyMappingList>> {
        const queryParameters: any = {};

        if (requestParameters.managedIsnull !== undefined) {
            queryParameters['managed__isnull'] = requestParameters.managedIsnull;
        }

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/propertymappings/all/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedPropertyMappingListFromJSON(jsonValue));
    }

    /**
     * PropertyMapping Viewset
     */
    async propertymappingsAllList(requestParameters: PropertymappingsAllListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPropertyMappingList> {
        const response = await this.propertymappingsAllListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * PropertyMapping Viewset
     */
    async propertymappingsAllRetrieveRaw(requestParameters: PropertymappingsAllRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PropertyMapping>> {
        if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
            throw new runtime.RequiredError('pmUuid','Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsAllRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/propertymappings/all/{pm_uuid}/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PropertyMappingFromJSON(jsonValue));
    }

    /**
     * PropertyMapping Viewset
     */
    async propertymappingsAllRetrieve(requestParameters: PropertymappingsAllRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PropertyMapping> {
        const response = await this.propertymappingsAllRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Test Property Mapping
     */
    async propertymappingsAllTestCreateRaw(requestParameters: PropertymappingsAllTestCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PropertyMappingTestResult>> {
        if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
            throw new runtime.RequiredError('pmUuid','Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsAllTestCreate.');
        }

        if (requestParameters.policyTestRequest === null || requestParameters.policyTestRequest === undefined) {
            throw new runtime.RequiredError('policyTestRequest','Required parameter requestParameters.policyTestRequest was null or undefined when calling propertymappingsAllTestCreate.');
        }

        const queryParameters: any = {};

        if (requestParameters.formatResult !== undefined) {
            queryParameters['format_result'] = requestParameters.formatResult;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/propertymappings/all/{pm_uuid}/test/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PolicyTestRequestToJSON(requestParameters.policyTestRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PropertyMappingTestResultFromJSON(jsonValue));
    }

    /**
     * Test Property Mapping
     */
    async propertymappingsAllTestCreate(requestParameters: PropertymappingsAllTestCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PropertyMappingTestResult> {
        const response = await this.propertymappingsAllTestCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all creatable property-mapping types
     */
    async propertymappingsAllTypesListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TypeCreate>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/propertymappings/all/types/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TypeCreateFromJSON));
    }

    /**
     * Get all creatable property-mapping types
     */
    async propertymappingsAllTypesList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TypeCreate>> {
        const response = await this.propertymappingsAllTypesListRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all objects that use this object
     */
    async propertymappingsAllUsedByListRaw(requestParameters: PropertymappingsAllUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UsedBy>>> {
        if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
            throw new runtime.RequiredError('pmUuid','Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsAllUsedByList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/propertymappings/all/{pm_uuid}/used_by/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
    }

    /**
     * Get a list of all objects that use this object
     */
    async propertymappingsAllUsedByList(requestParameters: PropertymappingsAllUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UsedBy>> {
        const response = await this.propertymappingsAllUsedByListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * LDAP PropertyMapping Viewset
     */
    async propertymappingsLdapCreateRaw(requestParameters: PropertymappingsLdapCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LDAPPropertyMapping>> {
        if (requestParameters.lDAPPropertyMappingRequest === null || requestParameters.lDAPPropertyMappingRequest === undefined) {
            throw new runtime.RequiredError('lDAPPropertyMappingRequest','Required parameter requestParameters.lDAPPropertyMappingRequest was null or undefined when calling propertymappingsLdapCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/propertymappings/ldap/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LDAPPropertyMappingRequestToJSON(requestParameters.lDAPPropertyMappingRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LDAPPropertyMappingFromJSON(jsonValue));
    }

    /**
     * LDAP PropertyMapping Viewset
     */
    async propertymappingsLdapCreate(requestParameters: PropertymappingsLdapCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LDAPPropertyMapping> {
        const response = await this.propertymappingsLdapCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * LDAP PropertyMapping Viewset
     */
    async propertymappingsLdapDestroyRaw(requestParameters: PropertymappingsLdapDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
            throw new runtime.RequiredError('pmUuid','Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsLdapDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/propertymappings/ldap/{pm_uuid}/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * LDAP PropertyMapping Viewset
     */
    async propertymappingsLdapDestroy(requestParameters: PropertymappingsLdapDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.propertymappingsLdapDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * LDAP PropertyMapping Viewset
     */
    async propertymappingsLdapListRaw(requestParameters: PropertymappingsLdapListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedLDAPPropertyMappingList>> {
        const queryParameters: any = {};

        if (requestParameters.expression !== undefined) {
            queryParameters['expression'] = requestParameters.expression;
        }

        if (requestParameters.managed) {
            queryParameters['managed'] = requestParameters.managed;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.objectField !== undefined) {
            queryParameters['object_field'] = requestParameters.objectField;
        }

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.pmUuid !== undefined) {
            queryParameters['pm_uuid'] = requestParameters.pmUuid;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/propertymappings/ldap/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedLDAPPropertyMappingListFromJSON(jsonValue));
    }

    /**
     * LDAP PropertyMapping Viewset
     */
    async propertymappingsLdapList(requestParameters: PropertymappingsLdapListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedLDAPPropertyMappingList> {
        const response = await this.propertymappingsLdapListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * LDAP PropertyMapping Viewset
     */
    async propertymappingsLdapPartialUpdateRaw(requestParameters: PropertymappingsLdapPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LDAPPropertyMapping>> {
        if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
            throw new runtime.RequiredError('pmUuid','Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsLdapPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/propertymappings/ldap/{pm_uuid}/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedLDAPPropertyMappingRequestToJSON(requestParameters.patchedLDAPPropertyMappingRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LDAPPropertyMappingFromJSON(jsonValue));
    }

    /**
     * LDAP PropertyMapping Viewset
     */
    async propertymappingsLdapPartialUpdate(requestParameters: PropertymappingsLdapPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LDAPPropertyMapping> {
        const response = await this.propertymappingsLdapPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * LDAP PropertyMapping Viewset
     */
    async propertymappingsLdapRetrieveRaw(requestParameters: PropertymappingsLdapRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LDAPPropertyMapping>> {
        if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
            throw new runtime.RequiredError('pmUuid','Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsLdapRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/propertymappings/ldap/{pm_uuid}/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LDAPPropertyMappingFromJSON(jsonValue));
    }

    /**
     * LDAP PropertyMapping Viewset
     */
    async propertymappingsLdapRetrieve(requestParameters: PropertymappingsLdapRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LDAPPropertyMapping> {
        const response = await this.propertymappingsLdapRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * LDAP PropertyMapping Viewset
     */
    async propertymappingsLdapUpdateRaw(requestParameters: PropertymappingsLdapUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LDAPPropertyMapping>> {
        if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
            throw new runtime.RequiredError('pmUuid','Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsLdapUpdate.');
        }

        if (requestParameters.lDAPPropertyMappingRequest === null || requestParameters.lDAPPropertyMappingRequest === undefined) {
            throw new runtime.RequiredError('lDAPPropertyMappingRequest','Required parameter requestParameters.lDAPPropertyMappingRequest was null or undefined when calling propertymappingsLdapUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/propertymappings/ldap/{pm_uuid}/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: LDAPPropertyMappingRequestToJSON(requestParameters.lDAPPropertyMappingRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LDAPPropertyMappingFromJSON(jsonValue));
    }

    /**
     * LDAP PropertyMapping Viewset
     */
    async propertymappingsLdapUpdate(requestParameters: PropertymappingsLdapUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LDAPPropertyMapping> {
        const response = await this.propertymappingsLdapUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all objects that use this object
     */
    async propertymappingsLdapUsedByListRaw(requestParameters: PropertymappingsLdapUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UsedBy>>> {
        if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
            throw new runtime.RequiredError('pmUuid','Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsLdapUsedByList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/propertymappings/ldap/{pm_uuid}/used_by/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
    }

    /**
     * Get a list of all objects that use this object
     */
    async propertymappingsLdapUsedByList(requestParameters: PropertymappingsLdapUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UsedBy>> {
        const response = await this.propertymappingsLdapUsedByListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * NotificationWebhookMapping Viewset
     */
    async propertymappingsNotificationCreateRaw(requestParameters: PropertymappingsNotificationCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotificationWebhookMapping>> {
        if (requestParameters.notificationWebhookMappingRequest === null || requestParameters.notificationWebhookMappingRequest === undefined) {
            throw new runtime.RequiredError('notificationWebhookMappingRequest','Required parameter requestParameters.notificationWebhookMappingRequest was null or undefined when calling propertymappingsNotificationCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/propertymappings/notification/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: NotificationWebhookMappingRequestToJSON(requestParameters.notificationWebhookMappingRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationWebhookMappingFromJSON(jsonValue));
    }

    /**
     * NotificationWebhookMapping Viewset
     */
    async propertymappingsNotificationCreate(requestParameters: PropertymappingsNotificationCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotificationWebhookMapping> {
        const response = await this.propertymappingsNotificationCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * NotificationWebhookMapping Viewset
     */
    async propertymappingsNotificationDestroyRaw(requestParameters: PropertymappingsNotificationDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
            throw new runtime.RequiredError('pmUuid','Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsNotificationDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/propertymappings/notification/{pm_uuid}/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * NotificationWebhookMapping Viewset
     */
    async propertymappingsNotificationDestroy(requestParameters: PropertymappingsNotificationDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.propertymappingsNotificationDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * NotificationWebhookMapping Viewset
     */
    async propertymappingsNotificationListRaw(requestParameters: PropertymappingsNotificationListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedNotificationWebhookMappingList>> {
        const queryParameters: any = {};

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/propertymappings/notification/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedNotificationWebhookMappingListFromJSON(jsonValue));
    }

    /**
     * NotificationWebhookMapping Viewset
     */
    async propertymappingsNotificationList(requestParameters: PropertymappingsNotificationListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedNotificationWebhookMappingList> {
        const response = await this.propertymappingsNotificationListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * NotificationWebhookMapping Viewset
     */
    async propertymappingsNotificationPartialUpdateRaw(requestParameters: PropertymappingsNotificationPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotificationWebhookMapping>> {
        if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
            throw new runtime.RequiredError('pmUuid','Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsNotificationPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/propertymappings/notification/{pm_uuid}/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedNotificationWebhookMappingRequestToJSON(requestParameters.patchedNotificationWebhookMappingRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationWebhookMappingFromJSON(jsonValue));
    }

    /**
     * NotificationWebhookMapping Viewset
     */
    async propertymappingsNotificationPartialUpdate(requestParameters: PropertymappingsNotificationPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotificationWebhookMapping> {
        const response = await this.propertymappingsNotificationPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * NotificationWebhookMapping Viewset
     */
    async propertymappingsNotificationRetrieveRaw(requestParameters: PropertymappingsNotificationRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotificationWebhookMapping>> {
        if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
            throw new runtime.RequiredError('pmUuid','Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsNotificationRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/propertymappings/notification/{pm_uuid}/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationWebhookMappingFromJSON(jsonValue));
    }

    /**
     * NotificationWebhookMapping Viewset
     */
    async propertymappingsNotificationRetrieve(requestParameters: PropertymappingsNotificationRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotificationWebhookMapping> {
        const response = await this.propertymappingsNotificationRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * NotificationWebhookMapping Viewset
     */
    async propertymappingsNotificationUpdateRaw(requestParameters: PropertymappingsNotificationUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<NotificationWebhookMapping>> {
        if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
            throw new runtime.RequiredError('pmUuid','Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsNotificationUpdate.');
        }

        if (requestParameters.notificationWebhookMappingRequest === null || requestParameters.notificationWebhookMappingRequest === undefined) {
            throw new runtime.RequiredError('notificationWebhookMappingRequest','Required parameter requestParameters.notificationWebhookMappingRequest was null or undefined when calling propertymappingsNotificationUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/propertymappings/notification/{pm_uuid}/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: NotificationWebhookMappingRequestToJSON(requestParameters.notificationWebhookMappingRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => NotificationWebhookMappingFromJSON(jsonValue));
    }

    /**
     * NotificationWebhookMapping Viewset
     */
    async propertymappingsNotificationUpdate(requestParameters: PropertymappingsNotificationUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<NotificationWebhookMapping> {
        const response = await this.propertymappingsNotificationUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all objects that use this object
     */
    async propertymappingsNotificationUsedByListRaw(requestParameters: PropertymappingsNotificationUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UsedBy>>> {
        if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
            throw new runtime.RequiredError('pmUuid','Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsNotificationUsedByList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/propertymappings/notification/{pm_uuid}/used_by/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
    }

    /**
     * Get a list of all objects that use this object
     */
    async propertymappingsNotificationUsedByList(requestParameters: PropertymappingsNotificationUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UsedBy>> {
        const response = await this.propertymappingsNotificationUsedByListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * RACPropertyMapping Viewset
     */
    async propertymappingsRacCreateRaw(requestParameters: PropertymappingsRacCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RACPropertyMapping>> {
        if (requestParameters.rACPropertyMappingRequest === null || requestParameters.rACPropertyMappingRequest === undefined) {
            throw new runtime.RequiredError('rACPropertyMappingRequest','Required parameter requestParameters.rACPropertyMappingRequest was null or undefined when calling propertymappingsRacCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/propertymappings/rac/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RACPropertyMappingRequestToJSON(requestParameters.rACPropertyMappingRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RACPropertyMappingFromJSON(jsonValue));
    }

    /**
     * RACPropertyMapping Viewset
     */
    async propertymappingsRacCreate(requestParameters: PropertymappingsRacCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RACPropertyMapping> {
        const response = await this.propertymappingsRacCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * RACPropertyMapping Viewset
     */
    async propertymappingsRacDestroyRaw(requestParameters: PropertymappingsRacDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
            throw new runtime.RequiredError('pmUuid','Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsRacDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/propertymappings/rac/{pm_uuid}/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * RACPropertyMapping Viewset
     */
    async propertymappingsRacDestroy(requestParameters: PropertymappingsRacDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.propertymappingsRacDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * RACPropertyMapping Viewset
     */
    async propertymappingsRacListRaw(requestParameters: PropertymappingsRacListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedRACPropertyMappingList>> {
        const queryParameters: any = {};

        if (requestParameters.managed) {
            queryParameters['managed'] = requestParameters.managed;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/propertymappings/rac/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedRACPropertyMappingListFromJSON(jsonValue));
    }

    /**
     * RACPropertyMapping Viewset
     */
    async propertymappingsRacList(requestParameters: PropertymappingsRacListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedRACPropertyMappingList> {
        const response = await this.propertymappingsRacListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * RACPropertyMapping Viewset
     */
    async propertymappingsRacPartialUpdateRaw(requestParameters: PropertymappingsRacPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RACPropertyMapping>> {
        if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
            throw new runtime.RequiredError('pmUuid','Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsRacPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/propertymappings/rac/{pm_uuid}/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedRACPropertyMappingRequestToJSON(requestParameters.patchedRACPropertyMappingRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RACPropertyMappingFromJSON(jsonValue));
    }

    /**
     * RACPropertyMapping Viewset
     */
    async propertymappingsRacPartialUpdate(requestParameters: PropertymappingsRacPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RACPropertyMapping> {
        const response = await this.propertymappingsRacPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * RACPropertyMapping Viewset
     */
    async propertymappingsRacRetrieveRaw(requestParameters: PropertymappingsRacRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RACPropertyMapping>> {
        if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
            throw new runtime.RequiredError('pmUuid','Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsRacRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/propertymappings/rac/{pm_uuid}/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RACPropertyMappingFromJSON(jsonValue));
    }

    /**
     * RACPropertyMapping Viewset
     */
    async propertymappingsRacRetrieve(requestParameters: PropertymappingsRacRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RACPropertyMapping> {
        const response = await this.propertymappingsRacRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * RACPropertyMapping Viewset
     */
    async propertymappingsRacUpdateRaw(requestParameters: PropertymappingsRacUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RACPropertyMapping>> {
        if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
            throw new runtime.RequiredError('pmUuid','Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsRacUpdate.');
        }

        if (requestParameters.rACPropertyMappingRequest === null || requestParameters.rACPropertyMappingRequest === undefined) {
            throw new runtime.RequiredError('rACPropertyMappingRequest','Required parameter requestParameters.rACPropertyMappingRequest was null or undefined when calling propertymappingsRacUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/propertymappings/rac/{pm_uuid}/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RACPropertyMappingRequestToJSON(requestParameters.rACPropertyMappingRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RACPropertyMappingFromJSON(jsonValue));
    }

    /**
     * RACPropertyMapping Viewset
     */
    async propertymappingsRacUpdate(requestParameters: PropertymappingsRacUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RACPropertyMapping> {
        const response = await this.propertymappingsRacUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all objects that use this object
     */
    async propertymappingsRacUsedByListRaw(requestParameters: PropertymappingsRacUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UsedBy>>> {
        if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
            throw new runtime.RequiredError('pmUuid','Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsRacUsedByList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/propertymappings/rac/{pm_uuid}/used_by/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
    }

    /**
     * Get a list of all objects that use this object
     */
    async propertymappingsRacUsedByList(requestParameters: PropertymappingsRacUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UsedBy>> {
        const response = await this.propertymappingsRacUsedByListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * SAMLPropertyMapping Viewset
     */
    async propertymappingsSamlCreateRaw(requestParameters: PropertymappingsSamlCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SAMLPropertyMapping>> {
        if (requestParameters.sAMLPropertyMappingRequest === null || requestParameters.sAMLPropertyMappingRequest === undefined) {
            throw new runtime.RequiredError('sAMLPropertyMappingRequest','Required parameter requestParameters.sAMLPropertyMappingRequest was null or undefined when calling propertymappingsSamlCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/propertymappings/saml/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SAMLPropertyMappingRequestToJSON(requestParameters.sAMLPropertyMappingRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SAMLPropertyMappingFromJSON(jsonValue));
    }

    /**
     * SAMLPropertyMapping Viewset
     */
    async propertymappingsSamlCreate(requestParameters: PropertymappingsSamlCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SAMLPropertyMapping> {
        const response = await this.propertymappingsSamlCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * SAMLPropertyMapping Viewset
     */
    async propertymappingsSamlDestroyRaw(requestParameters: PropertymappingsSamlDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
            throw new runtime.RequiredError('pmUuid','Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsSamlDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/propertymappings/saml/{pm_uuid}/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * SAMLPropertyMapping Viewset
     */
    async propertymappingsSamlDestroy(requestParameters: PropertymappingsSamlDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.propertymappingsSamlDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * SAMLPropertyMapping Viewset
     */
    async propertymappingsSamlListRaw(requestParameters: PropertymappingsSamlListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedSAMLPropertyMappingList>> {
        const queryParameters: any = {};

        if (requestParameters.expression !== undefined) {
            queryParameters['expression'] = requestParameters.expression;
        }

        if (requestParameters.friendlyName !== undefined) {
            queryParameters['friendly_name'] = requestParameters.friendlyName;
        }

        if (requestParameters.managed) {
            queryParameters['managed'] = requestParameters.managed;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.pmUuid !== undefined) {
            queryParameters['pm_uuid'] = requestParameters.pmUuid;
        }

        if (requestParameters.samlName !== undefined) {
            queryParameters['saml_name'] = requestParameters.samlName;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/propertymappings/saml/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedSAMLPropertyMappingListFromJSON(jsonValue));
    }

    /**
     * SAMLPropertyMapping Viewset
     */
    async propertymappingsSamlList(requestParameters: PropertymappingsSamlListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedSAMLPropertyMappingList> {
        const response = await this.propertymappingsSamlListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * SAMLPropertyMapping Viewset
     */
    async propertymappingsSamlPartialUpdateRaw(requestParameters: PropertymappingsSamlPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SAMLPropertyMapping>> {
        if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
            throw new runtime.RequiredError('pmUuid','Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsSamlPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/propertymappings/saml/{pm_uuid}/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedSAMLPropertyMappingRequestToJSON(requestParameters.patchedSAMLPropertyMappingRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SAMLPropertyMappingFromJSON(jsonValue));
    }

    /**
     * SAMLPropertyMapping Viewset
     */
    async propertymappingsSamlPartialUpdate(requestParameters: PropertymappingsSamlPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SAMLPropertyMapping> {
        const response = await this.propertymappingsSamlPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * SAMLPropertyMapping Viewset
     */
    async propertymappingsSamlRetrieveRaw(requestParameters: PropertymappingsSamlRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SAMLPropertyMapping>> {
        if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
            throw new runtime.RequiredError('pmUuid','Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsSamlRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/propertymappings/saml/{pm_uuid}/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SAMLPropertyMappingFromJSON(jsonValue));
    }

    /**
     * SAMLPropertyMapping Viewset
     */
    async propertymappingsSamlRetrieve(requestParameters: PropertymappingsSamlRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SAMLPropertyMapping> {
        const response = await this.propertymappingsSamlRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * SAMLPropertyMapping Viewset
     */
    async propertymappingsSamlUpdateRaw(requestParameters: PropertymappingsSamlUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SAMLPropertyMapping>> {
        if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
            throw new runtime.RequiredError('pmUuid','Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsSamlUpdate.');
        }

        if (requestParameters.sAMLPropertyMappingRequest === null || requestParameters.sAMLPropertyMappingRequest === undefined) {
            throw new runtime.RequiredError('sAMLPropertyMappingRequest','Required parameter requestParameters.sAMLPropertyMappingRequest was null or undefined when calling propertymappingsSamlUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/propertymappings/saml/{pm_uuid}/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SAMLPropertyMappingRequestToJSON(requestParameters.sAMLPropertyMappingRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SAMLPropertyMappingFromJSON(jsonValue));
    }

    /**
     * SAMLPropertyMapping Viewset
     */
    async propertymappingsSamlUpdate(requestParameters: PropertymappingsSamlUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SAMLPropertyMapping> {
        const response = await this.propertymappingsSamlUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all objects that use this object
     */
    async propertymappingsSamlUsedByListRaw(requestParameters: PropertymappingsSamlUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UsedBy>>> {
        if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
            throw new runtime.RequiredError('pmUuid','Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsSamlUsedByList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/propertymappings/saml/{pm_uuid}/used_by/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
    }

    /**
     * Get a list of all objects that use this object
     */
    async propertymappingsSamlUsedByList(requestParameters: PropertymappingsSamlUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UsedBy>> {
        const response = await this.propertymappingsSamlUsedByListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * SCIMMapping Viewset
     */
    async propertymappingsScimCreateRaw(requestParameters: PropertymappingsScimCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SCIMMapping>> {
        if (requestParameters.sCIMMappingRequest === null || requestParameters.sCIMMappingRequest === undefined) {
            throw new runtime.RequiredError('sCIMMappingRequest','Required parameter requestParameters.sCIMMappingRequest was null or undefined when calling propertymappingsScimCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/propertymappings/scim/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SCIMMappingRequestToJSON(requestParameters.sCIMMappingRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SCIMMappingFromJSON(jsonValue));
    }

    /**
     * SCIMMapping Viewset
     */
    async propertymappingsScimCreate(requestParameters: PropertymappingsScimCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SCIMMapping> {
        const response = await this.propertymappingsScimCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * SCIMMapping Viewset
     */
    async propertymappingsScimDestroyRaw(requestParameters: PropertymappingsScimDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
            throw new runtime.RequiredError('pmUuid','Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsScimDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/propertymappings/scim/{pm_uuid}/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * SCIMMapping Viewset
     */
    async propertymappingsScimDestroy(requestParameters: PropertymappingsScimDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.propertymappingsScimDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * SCIMMapping Viewset
     */
    async propertymappingsScimListRaw(requestParameters: PropertymappingsScimListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedSCIMMappingList>> {
        const queryParameters: any = {};

        if (requestParameters.expression !== undefined) {
            queryParameters['expression'] = requestParameters.expression;
        }

        if (requestParameters.managed) {
            queryParameters['managed'] = requestParameters.managed;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.pmUuid !== undefined) {
            queryParameters['pm_uuid'] = requestParameters.pmUuid;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/propertymappings/scim/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedSCIMMappingListFromJSON(jsonValue));
    }

    /**
     * SCIMMapping Viewset
     */
    async propertymappingsScimList(requestParameters: PropertymappingsScimListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedSCIMMappingList> {
        const response = await this.propertymappingsScimListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * SCIMMapping Viewset
     */
    async propertymappingsScimPartialUpdateRaw(requestParameters: PropertymappingsScimPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SCIMMapping>> {
        if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
            throw new runtime.RequiredError('pmUuid','Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsScimPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/propertymappings/scim/{pm_uuid}/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedSCIMMappingRequestToJSON(requestParameters.patchedSCIMMappingRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SCIMMappingFromJSON(jsonValue));
    }

    /**
     * SCIMMapping Viewset
     */
    async propertymappingsScimPartialUpdate(requestParameters: PropertymappingsScimPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SCIMMapping> {
        const response = await this.propertymappingsScimPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * SCIMMapping Viewset
     */
    async propertymappingsScimRetrieveRaw(requestParameters: PropertymappingsScimRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SCIMMapping>> {
        if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
            throw new runtime.RequiredError('pmUuid','Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsScimRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/propertymappings/scim/{pm_uuid}/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SCIMMappingFromJSON(jsonValue));
    }

    /**
     * SCIMMapping Viewset
     */
    async propertymappingsScimRetrieve(requestParameters: PropertymappingsScimRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SCIMMapping> {
        const response = await this.propertymappingsScimRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * SCIMMapping Viewset
     */
    async propertymappingsScimUpdateRaw(requestParameters: PropertymappingsScimUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SCIMMapping>> {
        if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
            throw new runtime.RequiredError('pmUuid','Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsScimUpdate.');
        }

        if (requestParameters.sCIMMappingRequest === null || requestParameters.sCIMMappingRequest === undefined) {
            throw new runtime.RequiredError('sCIMMappingRequest','Required parameter requestParameters.sCIMMappingRequest was null or undefined when calling propertymappingsScimUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/propertymappings/scim/{pm_uuid}/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SCIMMappingRequestToJSON(requestParameters.sCIMMappingRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SCIMMappingFromJSON(jsonValue));
    }

    /**
     * SCIMMapping Viewset
     */
    async propertymappingsScimUpdate(requestParameters: PropertymappingsScimUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SCIMMapping> {
        const response = await this.propertymappingsScimUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all objects that use this object
     */
    async propertymappingsScimUsedByListRaw(requestParameters: PropertymappingsScimUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UsedBy>>> {
        if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
            throw new runtime.RequiredError('pmUuid','Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsScimUsedByList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/propertymappings/scim/{pm_uuid}/used_by/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
    }

    /**
     * Get a list of all objects that use this object
     */
    async propertymappingsScimUsedByList(requestParameters: PropertymappingsScimUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UsedBy>> {
        const response = await this.propertymappingsScimUsedByListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ScopeMapping Viewset
     */
    async propertymappingsScopeCreateRaw(requestParameters: PropertymappingsScopeCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScopeMapping>> {
        if (requestParameters.scopeMappingRequest === null || requestParameters.scopeMappingRequest === undefined) {
            throw new runtime.RequiredError('scopeMappingRequest','Required parameter requestParameters.scopeMappingRequest was null or undefined when calling propertymappingsScopeCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/propertymappings/scope/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ScopeMappingRequestToJSON(requestParameters.scopeMappingRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScopeMappingFromJSON(jsonValue));
    }

    /**
     * ScopeMapping Viewset
     */
    async propertymappingsScopeCreate(requestParameters: PropertymappingsScopeCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScopeMapping> {
        const response = await this.propertymappingsScopeCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ScopeMapping Viewset
     */
    async propertymappingsScopeDestroyRaw(requestParameters: PropertymappingsScopeDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
            throw new runtime.RequiredError('pmUuid','Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsScopeDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/propertymappings/scope/{pm_uuid}/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ScopeMapping Viewset
     */
    async propertymappingsScopeDestroy(requestParameters: PropertymappingsScopeDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.propertymappingsScopeDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * ScopeMapping Viewset
     */
    async propertymappingsScopeListRaw(requestParameters: PropertymappingsScopeListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedScopeMappingList>> {
        const queryParameters: any = {};

        if (requestParameters.managed) {
            queryParameters['managed'] = requestParameters.managed;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.scopeName !== undefined) {
            queryParameters['scope_name'] = requestParameters.scopeName;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/propertymappings/scope/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedScopeMappingListFromJSON(jsonValue));
    }

    /**
     * ScopeMapping Viewset
     */
    async propertymappingsScopeList(requestParameters: PropertymappingsScopeListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedScopeMappingList> {
        const response = await this.propertymappingsScopeListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ScopeMapping Viewset
     */
    async propertymappingsScopePartialUpdateRaw(requestParameters: PropertymappingsScopePartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScopeMapping>> {
        if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
            throw new runtime.RequiredError('pmUuid','Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsScopePartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/propertymappings/scope/{pm_uuid}/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedScopeMappingRequestToJSON(requestParameters.patchedScopeMappingRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScopeMappingFromJSON(jsonValue));
    }

    /**
     * ScopeMapping Viewset
     */
    async propertymappingsScopePartialUpdate(requestParameters: PropertymappingsScopePartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScopeMapping> {
        const response = await this.propertymappingsScopePartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ScopeMapping Viewset
     */
    async propertymappingsScopeRetrieveRaw(requestParameters: PropertymappingsScopeRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScopeMapping>> {
        if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
            throw new runtime.RequiredError('pmUuid','Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsScopeRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/propertymappings/scope/{pm_uuid}/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScopeMappingFromJSON(jsonValue));
    }

    /**
     * ScopeMapping Viewset
     */
    async propertymappingsScopeRetrieve(requestParameters: PropertymappingsScopeRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScopeMapping> {
        const response = await this.propertymappingsScopeRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ScopeMapping Viewset
     */
    async propertymappingsScopeUpdateRaw(requestParameters: PropertymappingsScopeUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ScopeMapping>> {
        if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
            throw new runtime.RequiredError('pmUuid','Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsScopeUpdate.');
        }

        if (requestParameters.scopeMappingRequest === null || requestParameters.scopeMappingRequest === undefined) {
            throw new runtime.RequiredError('scopeMappingRequest','Required parameter requestParameters.scopeMappingRequest was null or undefined when calling propertymappingsScopeUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/propertymappings/scope/{pm_uuid}/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ScopeMappingRequestToJSON(requestParameters.scopeMappingRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ScopeMappingFromJSON(jsonValue));
    }

    /**
     * ScopeMapping Viewset
     */
    async propertymappingsScopeUpdate(requestParameters: PropertymappingsScopeUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ScopeMapping> {
        const response = await this.propertymappingsScopeUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all objects that use this object
     */
    async propertymappingsScopeUsedByListRaw(requestParameters: PropertymappingsScopeUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UsedBy>>> {
        if (requestParameters.pmUuid === null || requestParameters.pmUuid === undefined) {
            throw new runtime.RequiredError('pmUuid','Required parameter requestParameters.pmUuid was null or undefined when calling propertymappingsScopeUsedByList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/propertymappings/scope/{pm_uuid}/used_by/`.replace(`{${"pm_uuid"}}`, encodeURIComponent(String(requestParameters.pmUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
    }

    /**
     * Get a list of all objects that use this object
     */
    async propertymappingsScopeUsedByList(requestParameters: PropertymappingsScopeUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UsedBy>> {
        const response = await this.propertymappingsScopeUsedByListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}
