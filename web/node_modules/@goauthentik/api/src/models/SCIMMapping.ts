/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * SCIMMapping Serializer
 * @export
 * @interface SCIMMapping
 */
export interface SCIMMapping {
    /**
     * 
     * @type {string}
     * @memberof SCIMMapping
     */
    readonly pk: string;
    /**
     * Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
     * @type {string}
     * @memberof SCIMMapping
     */
    managed?: string | null;
    /**
     * 
     * @type {string}
     * @memberof SCIMMapping
     */
    name: string;
    /**
     * 
     * @type {string}
     * @memberof SCIMMapping
     */
    expression: string;
    /**
     * Get object's component so that we know how to edit the object
     * @type {string}
     * @memberof SCIMMapping
     */
    readonly component: string;
    /**
     * Return object's verbose_name
     * @type {string}
     * @memberof SCIMMapping
     */
    readonly verboseName: string;
    /**
     * Return object's plural verbose_name
     * @type {string}
     * @memberof SCIMMapping
     */
    readonly verboseNamePlural: string;
    /**
     * Return internal model name
     * @type {string}
     * @memberof SCIMMapping
     */
    readonly metaModelName: string;
}

/**
 * Check if a given object implements the SCIMMapping interface.
 */
export function instanceOfSCIMMapping(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "pk" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "expression" in value;
    isInstance = isInstance && "component" in value;
    isInstance = isInstance && "verboseName" in value;
    isInstance = isInstance && "verboseNamePlural" in value;
    isInstance = isInstance && "metaModelName" in value;

    return isInstance;
}

export function SCIMMappingFromJSON(json: any): SCIMMapping {
    return SCIMMappingFromJSONTyped(json, false);
}

export function SCIMMappingFromJSONTyped(json: any, ignoreDiscriminator: boolean): SCIMMapping {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'pk': json['pk'],
        'managed': !exists(json, 'managed') ? undefined : json['managed'],
        'name': json['name'],
        'expression': json['expression'],
        'component': json['component'],
        'verboseName': json['verbose_name'],
        'verboseNamePlural': json['verbose_name_plural'],
        'metaModelName': json['meta_model_name'],
    };
}

export function SCIMMappingToJSON(value?: SCIMMapping | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'managed': value.managed,
        'name': value.name,
        'expression': value.expression,
    };
}

