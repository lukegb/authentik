/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { BindingTypeEnum } from './BindingTypeEnum';
import {
    BindingTypeEnumFromJSON,
    BindingTypeEnumFromJSONTyped,
    BindingTypeEnumToJSON,
} from './BindingTypeEnum';
import type { DigestAlgorithmEnum } from './DigestAlgorithmEnum';
import {
    DigestAlgorithmEnumFromJSON,
    DigestAlgorithmEnumFromJSONTyped,
    DigestAlgorithmEnumToJSON,
} from './DigestAlgorithmEnum';
import type { NameIdPolicyEnum } from './NameIdPolicyEnum';
import {
    NameIdPolicyEnumFromJSON,
    NameIdPolicyEnumFromJSONTyped,
    NameIdPolicyEnumToJSON,
} from './NameIdPolicyEnum';
import type { PolicyEngineMode } from './PolicyEngineMode';
import {
    PolicyEngineModeFromJSON,
    PolicyEngineModeFromJSONTyped,
    PolicyEngineModeToJSON,
} from './PolicyEngineMode';
import type { SignatureAlgorithmEnum } from './SignatureAlgorithmEnum';
import {
    SignatureAlgorithmEnumFromJSON,
    SignatureAlgorithmEnumFromJSONTyped,
    SignatureAlgorithmEnumToJSON,
} from './SignatureAlgorithmEnum';
import type { UserMatchingModeEnum } from './UserMatchingModeEnum';
import {
    UserMatchingModeEnumFromJSON,
    UserMatchingModeEnumFromJSONTyped,
    UserMatchingModeEnumToJSON,
} from './UserMatchingModeEnum';

/**
 * SAMLSource Serializer
 * @export
 * @interface SAMLSourceRequest
 */
export interface SAMLSourceRequest {
    /**
     * Source's display Name.
     * @type {string}
     * @memberof SAMLSourceRequest
     */
    name: string;
    /**
     * Internal source name, used in URLs.
     * @type {string}
     * @memberof SAMLSourceRequest
     */
    slug: string;
    /**
     * 
     * @type {boolean}
     * @memberof SAMLSourceRequest
     */
    enabled?: boolean;
    /**
     * Flow to use when authenticating existing users.
     * @type {string}
     * @memberof SAMLSourceRequest
     */
    authenticationFlow?: string | null;
    /**
     * Flow to use when enrolling new users.
     * @type {string}
     * @memberof SAMLSourceRequest
     */
    enrollmentFlow?: string | null;
    /**
     * 
     * @type {PolicyEngineMode}
     * @memberof SAMLSourceRequest
     */
    policyEngineMode?: PolicyEngineMode;
    /**
     * 
     * @type {UserMatchingModeEnum}
     * @memberof SAMLSourceRequest
     */
    userMatchingMode?: UserMatchingModeEnum;
    /**
     * 
     * @type {string}
     * @memberof SAMLSourceRequest
     */
    userPathTemplate?: string;
    /**
     * Flow used before authentication.
     * @type {string}
     * @memberof SAMLSourceRequest
     */
    preAuthenticationFlow: string;
    /**
     * Also known as Entity ID. Defaults the Metadata URL.
     * @type {string}
     * @memberof SAMLSourceRequest
     */
    issuer?: string;
    /**
     * URL that the initial Login request is sent to.
     * @type {string}
     * @memberof SAMLSourceRequest
     */
    ssoUrl: string;
    /**
     * Optional URL if your IDP supports Single-Logout.
     * @type {string}
     * @memberof SAMLSourceRequest
     */
    sloUrl?: string | null;
    /**
     * Allows authentication flows initiated by the IdP. This can be a security risk, as no validation of the request ID is done.
     * @type {boolean}
     * @memberof SAMLSourceRequest
     */
    allowIdpInitiated?: boolean;
    /**
     * 
     * @type {NameIdPolicyEnum}
     * @memberof SAMLSourceRequest
     */
    nameIdPolicy?: NameIdPolicyEnum;
    /**
     * 
     * @type {BindingTypeEnum}
     * @memberof SAMLSourceRequest
     */
    bindingType?: BindingTypeEnum;
    /**
     * When selected, incoming assertion's Signatures will be validated against this certificate. To allow unsigned Requests, leave on default.
     * @type {string}
     * @memberof SAMLSourceRequest
     */
    verificationKp?: string | null;
    /**
     * Keypair used to sign outgoing Responses going to the Identity Provider.
     * @type {string}
     * @memberof SAMLSourceRequest
     */
    signingKp?: string | null;
    /**
     * 
     * @type {DigestAlgorithmEnum}
     * @memberof SAMLSourceRequest
     */
    digestAlgorithm?: DigestAlgorithmEnum;
    /**
     * 
     * @type {SignatureAlgorithmEnum}
     * @memberof SAMLSourceRequest
     */
    signatureAlgorithm?: SignatureAlgorithmEnum;
    /**
     * Time offset when temporary users should be deleted. This only applies if your IDP uses the NameID Format 'transient', and the user doesn't log out manually. (Format: hours=1;minutes=2;seconds=3).
     * @type {string}
     * @memberof SAMLSourceRequest
     */
    temporaryUserDeleteAfter?: string;
}

/**
 * Check if a given object implements the SAMLSourceRequest interface.
 */
export function instanceOfSAMLSourceRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "slug" in value;
    isInstance = isInstance && "preAuthenticationFlow" in value;
    isInstance = isInstance && "ssoUrl" in value;

    return isInstance;
}

export function SAMLSourceRequestFromJSON(json: any): SAMLSourceRequest {
    return SAMLSourceRequestFromJSONTyped(json, false);
}

export function SAMLSourceRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): SAMLSourceRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'slug': json['slug'],
        'enabled': !exists(json, 'enabled') ? undefined : json['enabled'],
        'authenticationFlow': !exists(json, 'authentication_flow') ? undefined : json['authentication_flow'],
        'enrollmentFlow': !exists(json, 'enrollment_flow') ? undefined : json['enrollment_flow'],
        'policyEngineMode': !exists(json, 'policy_engine_mode') ? undefined : PolicyEngineModeFromJSON(json['policy_engine_mode']),
        'userMatchingMode': !exists(json, 'user_matching_mode') ? undefined : UserMatchingModeEnumFromJSON(json['user_matching_mode']),
        'userPathTemplate': !exists(json, 'user_path_template') ? undefined : json['user_path_template'],
        'preAuthenticationFlow': json['pre_authentication_flow'],
        'issuer': !exists(json, 'issuer') ? undefined : json['issuer'],
        'ssoUrl': json['sso_url'],
        'sloUrl': !exists(json, 'slo_url') ? undefined : json['slo_url'],
        'allowIdpInitiated': !exists(json, 'allow_idp_initiated') ? undefined : json['allow_idp_initiated'],
        'nameIdPolicy': !exists(json, 'name_id_policy') ? undefined : NameIdPolicyEnumFromJSON(json['name_id_policy']),
        'bindingType': !exists(json, 'binding_type') ? undefined : BindingTypeEnumFromJSON(json['binding_type']),
        'verificationKp': !exists(json, 'verification_kp') ? undefined : json['verification_kp'],
        'signingKp': !exists(json, 'signing_kp') ? undefined : json['signing_kp'],
        'digestAlgorithm': !exists(json, 'digest_algorithm') ? undefined : DigestAlgorithmEnumFromJSON(json['digest_algorithm']),
        'signatureAlgorithm': !exists(json, 'signature_algorithm') ? undefined : SignatureAlgorithmEnumFromJSON(json['signature_algorithm']),
        'temporaryUserDeleteAfter': !exists(json, 'temporary_user_delete_after') ? undefined : json['temporary_user_delete_after'],
    };
}

export function SAMLSourceRequestToJSON(value?: SAMLSourceRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'slug': value.slug,
        'enabled': value.enabled,
        'authentication_flow': value.authenticationFlow,
        'enrollment_flow': value.enrollmentFlow,
        'policy_engine_mode': PolicyEngineModeToJSON(value.policyEngineMode),
        'user_matching_mode': UserMatchingModeEnumToJSON(value.userMatchingMode),
        'user_path_template': value.userPathTemplate,
        'pre_authentication_flow': value.preAuthenticationFlow,
        'issuer': value.issuer,
        'sso_url': value.ssoUrl,
        'slo_url': value.sloUrl,
        'allow_idp_initiated': value.allowIdpInitiated,
        'name_id_policy': NameIdPolicyEnumToJSON(value.nameIdPolicy),
        'binding_type': BindingTypeEnumToJSON(value.bindingType),
        'verification_kp': value.verificationKp,
        'signing_kp': value.signingKp,
        'digest_algorithm': DigestAlgorithmEnumToJSON(value.digestAlgorithm),
        'signature_algorithm': SignatureAlgorithmEnumToJSON(value.signatureAlgorithm),
        'temporary_user_delete_after': value.temporaryUserDeleteAfter,
    };
}

