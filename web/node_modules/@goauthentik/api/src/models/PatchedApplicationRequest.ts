/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PolicyEngineMode } from './PolicyEngineMode';
import {
    PolicyEngineModeFromJSON,
    PolicyEngineModeFromJSONTyped,
    PolicyEngineModeToJSON,
} from './PolicyEngineMode';

/**
 * Application Serializer
 * @export
 * @interface PatchedApplicationRequest
 */
export interface PatchedApplicationRequest {
    /**
     * Application's display Name.
     * @type {string}
     * @memberof PatchedApplicationRequest
     */
    name?: string;
    /**
     * Internal application name, used in URLs.
     * @type {string}
     * @memberof PatchedApplicationRequest
     */
    slug?: string;
    /**
     * 
     * @type {number}
     * @memberof PatchedApplicationRequest
     */
    provider?: number | null;
    /**
     * 
     * @type {Array<number>}
     * @memberof PatchedApplicationRequest
     */
    backchannelProviders?: Array<number>;
    /**
     * Open launch URL in a new browser tab or window.
     * @type {boolean}
     * @memberof PatchedApplicationRequest
     */
    openInNewTab?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PatchedApplicationRequest
     */
    metaLaunchUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedApplicationRequest
     */
    metaDescription?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedApplicationRequest
     */
    metaPublisher?: string;
    /**
     * 
     * @type {PolicyEngineMode}
     * @memberof PatchedApplicationRequest
     */
    policyEngineMode?: PolicyEngineMode;
    /**
     * 
     * @type {string}
     * @memberof PatchedApplicationRequest
     */
    group?: string;
}

/**
 * Check if a given object implements the PatchedApplicationRequest interface.
 */
export function instanceOfPatchedApplicationRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PatchedApplicationRequestFromJSON(json: any): PatchedApplicationRequest {
    return PatchedApplicationRequestFromJSONTyped(json, false);
}

export function PatchedApplicationRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PatchedApplicationRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'slug': !exists(json, 'slug') ? undefined : json['slug'],
        'provider': !exists(json, 'provider') ? undefined : json['provider'],
        'backchannelProviders': !exists(json, 'backchannel_providers') ? undefined : json['backchannel_providers'],
        'openInNewTab': !exists(json, 'open_in_new_tab') ? undefined : json['open_in_new_tab'],
        'metaLaunchUrl': !exists(json, 'meta_launch_url') ? undefined : json['meta_launch_url'],
        'metaDescription': !exists(json, 'meta_description') ? undefined : json['meta_description'],
        'metaPublisher': !exists(json, 'meta_publisher') ? undefined : json['meta_publisher'],
        'policyEngineMode': !exists(json, 'policy_engine_mode') ? undefined : PolicyEngineModeFromJSON(json['policy_engine_mode']),
        'group': !exists(json, 'group') ? undefined : json['group'],
    };
}

export function PatchedApplicationRequestToJSON(value?: PatchedApplicationRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'slug': value.slug,
        'provider': value.provider,
        'backchannel_providers': value.backchannelProviders,
        'open_in_new_tab': value.openInNewTab,
        'meta_launch_url': value.metaLaunchUrl,
        'meta_description': value.metaDescription,
        'meta_publisher': value.metaPublisher,
        'policy_engine_mode': PolicyEngineModeToJSON(value.policyEngineMode),
        'group': value.group,
    };
}

