"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SAMLProviderToJSON = exports.SAMLProviderFromJSONTyped = exports.SAMLProviderFromJSON = exports.instanceOfSAMLProvider = void 0;
const runtime_1 = require("../runtime");
const DigestAlgorithmEnum_1 = require("./DigestAlgorithmEnum");
const SignatureAlgorithmEnum_1 = require("./SignatureAlgorithmEnum");
const SpBindingEnum_1 = require("./SpBindingEnum");
/**
 * Check if a given object implements the SAMLProvider interface.
 */
function instanceOfSAMLProvider(value) {
    let isInstance = true;
    isInstance = isInstance && "pk" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "authorizationFlow" in value;
    isInstance = isInstance && "component" in value;
    isInstance = isInstance && "assignedApplicationSlug" in value;
    isInstance = isInstance && "assignedApplicationName" in value;
    isInstance = isInstance && "assignedBackchannelApplicationSlug" in value;
    isInstance = isInstance && "assignedBackchannelApplicationName" in value;
    isInstance = isInstance && "verboseName" in value;
    isInstance = isInstance && "verboseNamePlural" in value;
    isInstance = isInstance && "metaModelName" in value;
    isInstance = isInstance && "acsUrl" in value;
    isInstance = isInstance && "urlDownloadMetadata" in value;
    isInstance = isInstance && "urlSsoPost" in value;
    isInstance = isInstance && "urlSsoRedirect" in value;
    isInstance = isInstance && "urlSsoInit" in value;
    isInstance = isInstance && "urlSloPost" in value;
    isInstance = isInstance && "urlSloRedirect" in value;
    return isInstance;
}
exports.instanceOfSAMLProvider = instanceOfSAMLProvider;
function SAMLProviderFromJSON(json) {
    return SAMLProviderFromJSONTyped(json, false);
}
exports.SAMLProviderFromJSON = SAMLProviderFromJSON;
function SAMLProviderFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'pk': json['pk'],
        'name': json['name'],
        'authenticationFlow': !(0, runtime_1.exists)(json, 'authentication_flow') ? undefined : json['authentication_flow'],
        'authorizationFlow': json['authorization_flow'],
        'propertyMappings': !(0, runtime_1.exists)(json, 'property_mappings') ? undefined : json['property_mappings'],
        'component': json['component'],
        'assignedApplicationSlug': json['assigned_application_slug'],
        'assignedApplicationName': json['assigned_application_name'],
        'assignedBackchannelApplicationSlug': json['assigned_backchannel_application_slug'],
        'assignedBackchannelApplicationName': json['assigned_backchannel_application_name'],
        'verboseName': json['verbose_name'],
        'verboseNamePlural': json['verbose_name_plural'],
        'metaModelName': json['meta_model_name'],
        'acsUrl': json['acs_url'],
        'audience': !(0, runtime_1.exists)(json, 'audience') ? undefined : json['audience'],
        'issuer': !(0, runtime_1.exists)(json, 'issuer') ? undefined : json['issuer'],
        'assertionValidNotBefore': !(0, runtime_1.exists)(json, 'assertion_valid_not_before') ? undefined : json['assertion_valid_not_before'],
        'assertionValidNotOnOrAfter': !(0, runtime_1.exists)(json, 'assertion_valid_not_on_or_after') ? undefined : json['assertion_valid_not_on_or_after'],
        'sessionValidNotOnOrAfter': !(0, runtime_1.exists)(json, 'session_valid_not_on_or_after') ? undefined : json['session_valid_not_on_or_after'],
        'nameIdMapping': !(0, runtime_1.exists)(json, 'name_id_mapping') ? undefined : json['name_id_mapping'],
        'digestAlgorithm': !(0, runtime_1.exists)(json, 'digest_algorithm') ? undefined : (0, DigestAlgorithmEnum_1.DigestAlgorithmEnumFromJSON)(json['digest_algorithm']),
        'signatureAlgorithm': !(0, runtime_1.exists)(json, 'signature_algorithm') ? undefined : (0, SignatureAlgorithmEnum_1.SignatureAlgorithmEnumFromJSON)(json['signature_algorithm']),
        'signingKp': !(0, runtime_1.exists)(json, 'signing_kp') ? undefined : json['signing_kp'],
        'verificationKp': !(0, runtime_1.exists)(json, 'verification_kp') ? undefined : json['verification_kp'],
        'spBinding': !(0, runtime_1.exists)(json, 'sp_binding') ? undefined : (0, SpBindingEnum_1.SpBindingEnumFromJSON)(json['sp_binding']),
        'defaultRelayState': !(0, runtime_1.exists)(json, 'default_relay_state') ? undefined : json['default_relay_state'],
        'urlDownloadMetadata': json['url_download_metadata'],
        'urlSsoPost': json['url_sso_post'],
        'urlSsoRedirect': json['url_sso_redirect'],
        'urlSsoInit': json['url_sso_init'],
        'urlSloPost': json['url_slo_post'],
        'urlSloRedirect': json['url_slo_redirect'],
    };
}
exports.SAMLProviderFromJSONTyped = SAMLProviderFromJSONTyped;
function SAMLProviderToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'name': value.name,
        'authentication_flow': value.authenticationFlow,
        'authorization_flow': value.authorizationFlow,
        'property_mappings': value.propertyMappings,
        'acs_url': value.acsUrl,
        'audience': value.audience,
        'issuer': value.issuer,
        'assertion_valid_not_before': value.assertionValidNotBefore,
        'assertion_valid_not_on_or_after': value.assertionValidNotOnOrAfter,
        'session_valid_not_on_or_after': value.sessionValidNotOnOrAfter,
        'name_id_mapping': value.nameIdMapping,
        'digest_algorithm': (0, DigestAlgorithmEnum_1.DigestAlgorithmEnumToJSON)(value.digestAlgorithm),
        'signature_algorithm': (0, SignatureAlgorithmEnum_1.SignatureAlgorithmEnumToJSON)(value.signatureAlgorithm),
        'signing_kp': value.signingKp,
        'verification_kp': value.verificationKp,
        'sp_binding': (0, SpBindingEnum_1.SpBindingEnumToJSON)(value.spBinding),
        'default_relay_state': value.defaultRelayState,
    };
}
exports.SAMLProviderToJSON = SAMLProviderToJSON;
