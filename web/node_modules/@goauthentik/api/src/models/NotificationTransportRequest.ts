/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { NotificationTransportModeEnum } from './NotificationTransportModeEnum';
import {
    NotificationTransportModeEnumFromJSON,
    NotificationTransportModeEnumFromJSONTyped,
    NotificationTransportModeEnumToJSON,
} from './NotificationTransportModeEnum';

/**
 * NotificationTransport Serializer
 * @export
 * @interface NotificationTransportRequest
 */
export interface NotificationTransportRequest {
    /**
     * 
     * @type {string}
     * @memberof NotificationTransportRequest
     */
    name: string;
    /**
     * 
     * @type {NotificationTransportModeEnum}
     * @memberof NotificationTransportRequest
     */
    mode?: NotificationTransportModeEnum;
    /**
     * 
     * @type {string}
     * @memberof NotificationTransportRequest
     */
    webhookUrl?: string;
    /**
     * 
     * @type {string}
     * @memberof NotificationTransportRequest
     */
    webhookMapping?: string | null;
    /**
     * Only send notification once, for example when sending a webhook into a chat channel.
     * @type {boolean}
     * @memberof NotificationTransportRequest
     */
    sendOnce?: boolean;
}

/**
 * Check if a given object implements the NotificationTransportRequest interface.
 */
export function instanceOfNotificationTransportRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;

    return isInstance;
}

export function NotificationTransportRequestFromJSON(json: any): NotificationTransportRequest {
    return NotificationTransportRequestFromJSONTyped(json, false);
}

export function NotificationTransportRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): NotificationTransportRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'mode': !exists(json, 'mode') ? undefined : NotificationTransportModeEnumFromJSON(json['mode']),
        'webhookUrl': !exists(json, 'webhook_url') ? undefined : json['webhook_url'],
        'webhookMapping': !exists(json, 'webhook_mapping') ? undefined : json['webhook_mapping'],
        'sendOnce': !exists(json, 'send_once') ? undefined : json['send_once'],
    };
}

export function NotificationTransportRequestToJSON(value?: NotificationTransportRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'mode': NotificationTransportModeEnumToJSON(value.mode),
        'webhook_url': value.webhookUrl,
        'webhook_mapping': value.webhookMapping,
        'send_once': value.sendOnce,
    };
}

