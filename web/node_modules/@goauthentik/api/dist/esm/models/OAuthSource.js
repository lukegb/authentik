/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { exists } from '../runtime';
import { PolicyEngineModeFromJSON, PolicyEngineModeToJSON, } from './PolicyEngineMode';
import { ProviderTypeEnumFromJSON, ProviderTypeEnumToJSON, } from './ProviderTypeEnum';
import { SourceTypeFromJSON, } from './SourceType';
import { UserMatchingModeEnumFromJSON, UserMatchingModeEnumToJSON, } from './UserMatchingModeEnum';
/**
 * Check if a given object implements the OAuthSource interface.
 */
export function instanceOfOAuthSource(value) {
    let isInstance = true;
    isInstance = isInstance && "pk" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "slug" in value;
    isInstance = isInstance && "component" in value;
    isInstance = isInstance && "verboseName" in value;
    isInstance = isInstance && "verboseNamePlural" in value;
    isInstance = isInstance && "metaModelName" in value;
    isInstance = isInstance && "managed" in value;
    isInstance = isInstance && "icon" in value;
    isInstance = isInstance && "providerType" in value;
    isInstance = isInstance && "consumerKey" in value;
    isInstance = isInstance && "callbackUrl" in value;
    isInstance = isInstance && "type" in value;
    return isInstance;
}
export function OAuthSourceFromJSON(json) {
    return OAuthSourceFromJSONTyped(json, false);
}
export function OAuthSourceFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'pk': json['pk'],
        'name': json['name'],
        'slug': json['slug'],
        'enabled': !exists(json, 'enabled') ? undefined : json['enabled'],
        'authenticationFlow': !exists(json, 'authentication_flow') ? undefined : json['authentication_flow'],
        'enrollmentFlow': !exists(json, 'enrollment_flow') ? undefined : json['enrollment_flow'],
        'component': json['component'],
        'verboseName': json['verbose_name'],
        'verboseNamePlural': json['verbose_name_plural'],
        'metaModelName': json['meta_model_name'],
        'policyEngineMode': !exists(json, 'policy_engine_mode') ? undefined : PolicyEngineModeFromJSON(json['policy_engine_mode']),
        'userMatchingMode': !exists(json, 'user_matching_mode') ? undefined : UserMatchingModeEnumFromJSON(json['user_matching_mode']),
        'managed': json['managed'],
        'userPathTemplate': !exists(json, 'user_path_template') ? undefined : json['user_path_template'],
        'icon': json['icon'],
        'providerType': ProviderTypeEnumFromJSON(json['provider_type']),
        'requestTokenUrl': !exists(json, 'request_token_url') ? undefined : json['request_token_url'],
        'authorizationUrl': !exists(json, 'authorization_url') ? undefined : json['authorization_url'],
        'accessTokenUrl': !exists(json, 'access_token_url') ? undefined : json['access_token_url'],
        'profileUrl': !exists(json, 'profile_url') ? undefined : json['profile_url'],
        'consumerKey': json['consumer_key'],
        'callbackUrl': json['callback_url'],
        'additionalScopes': !exists(json, 'additional_scopes') ? undefined : json['additional_scopes'],
        'type': SourceTypeFromJSON(json['type']),
        'oidcWellKnownUrl': !exists(json, 'oidc_well_known_url') ? undefined : json['oidc_well_known_url'],
        'oidcJwksUrl': !exists(json, 'oidc_jwks_url') ? undefined : json['oidc_jwks_url'],
        'oidcJwks': !exists(json, 'oidc_jwks') ? undefined : json['oidc_jwks'],
    };
}
export function OAuthSourceToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'name': value.name,
        'slug': value.slug,
        'enabled': value.enabled,
        'authentication_flow': value.authenticationFlow,
        'enrollment_flow': value.enrollmentFlow,
        'policy_engine_mode': PolicyEngineModeToJSON(value.policyEngineMode),
        'user_matching_mode': UserMatchingModeEnumToJSON(value.userMatchingMode),
        'user_path_template': value.userPathTemplate,
        'provider_type': ProviderTypeEnumToJSON(value.providerType),
        'request_token_url': value.requestTokenUrl,
        'authorization_url': value.authorizationUrl,
        'access_token_url': value.accessTokenUrl,
        'profile_url': value.profileUrl,
        'consumer_key': value.consumerKey,
        'additional_scopes': value.additionalScopes,
        'oidc_well_known_url': value.oidcWellKnownUrl,
        'oidc_jwks_url': value.oidcJwksUrl,
        'oidc_jwks': value.oidcJwks,
    };
}
