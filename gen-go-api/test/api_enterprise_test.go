/*
authentik

Testing EnterpriseApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package api

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_api_EnterpriseApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test EnterpriseApiService EnterpriseLicenseCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EnterpriseApi.EnterpriseLicenseCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnterpriseApiService EnterpriseLicenseDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var licenseUuid string

		httpRes, err := apiClient.EnterpriseApi.EnterpriseLicenseDestroy(context.Background(), licenseUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnterpriseApiService EnterpriseLicenseForecastRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EnterpriseApi.EnterpriseLicenseForecastRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnterpriseApiService EnterpriseLicenseGetInstallIdRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EnterpriseApi.EnterpriseLicenseGetInstallIdRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnterpriseApiService EnterpriseLicenseList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EnterpriseApi.EnterpriseLicenseList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnterpriseApiService EnterpriseLicensePartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var licenseUuid string

		resp, httpRes, err := apiClient.EnterpriseApi.EnterpriseLicensePartialUpdate(context.Background(), licenseUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnterpriseApiService EnterpriseLicenseRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var licenseUuid string

		resp, httpRes, err := apiClient.EnterpriseApi.EnterpriseLicenseRetrieve(context.Background(), licenseUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnterpriseApiService EnterpriseLicenseSummaryRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.EnterpriseApi.EnterpriseLicenseSummaryRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnterpriseApiService EnterpriseLicenseUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var licenseUuid string

		resp, httpRes, err := apiClient.EnterpriseApi.EnterpriseLicenseUpdate(context.Background(), licenseUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test EnterpriseApiService EnterpriseLicenseUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var licenseUuid string

		resp, httpRes, err := apiClient.EnterpriseApi.EnterpriseLicenseUsedByList(context.Background(), licenseUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
