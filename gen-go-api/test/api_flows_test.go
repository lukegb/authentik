/*
authentik

Testing FlowsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package api

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_api_FlowsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test FlowsApiService FlowsBindingsCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FlowsApi.FlowsBindingsCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsApiService FlowsBindingsDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fsbUuid string

		httpRes, err := apiClient.FlowsApi.FlowsBindingsDestroy(context.Background(), fsbUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsApiService FlowsBindingsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FlowsApi.FlowsBindingsList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsApiService FlowsBindingsPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fsbUuid string

		resp, httpRes, err := apiClient.FlowsApi.FlowsBindingsPartialUpdate(context.Background(), fsbUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsApiService FlowsBindingsRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fsbUuid string

		resp, httpRes, err := apiClient.FlowsApi.FlowsBindingsRetrieve(context.Background(), fsbUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsApiService FlowsBindingsUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fsbUuid string

		resp, httpRes, err := apiClient.FlowsApi.FlowsBindingsUpdate(context.Background(), fsbUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsApiService FlowsBindingsUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var fsbUuid string

		resp, httpRes, err := apiClient.FlowsApi.FlowsBindingsUsedByList(context.Background(), fsbUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsApiService FlowsExecutorGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var flowSlug string

		resp, httpRes, err := apiClient.FlowsApi.FlowsExecutorGet(context.Background(), flowSlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsApiService FlowsExecutorSolve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var flowSlug string

		resp, httpRes, err := apiClient.FlowsApi.FlowsExecutorSolve(context.Background(), flowSlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsApiService FlowsInspectorGet", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var flowSlug string

		resp, httpRes, err := apiClient.FlowsApi.FlowsInspectorGet(context.Background(), flowSlug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsApiService FlowsInstancesCacheClearCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.FlowsApi.FlowsInstancesCacheClearCreate(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsApiService FlowsInstancesCacheInfoRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FlowsApi.FlowsInstancesCacheInfoRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsApiService FlowsInstancesCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FlowsApi.FlowsInstancesCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsApiService FlowsInstancesDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var slug string

		httpRes, err := apiClient.FlowsApi.FlowsInstancesDestroy(context.Background(), slug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsApiService FlowsInstancesDiagramRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var slug string

		resp, httpRes, err := apiClient.FlowsApi.FlowsInstancesDiagramRetrieve(context.Background(), slug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsApiService FlowsInstancesExecuteRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var slug string

		resp, httpRes, err := apiClient.FlowsApi.FlowsInstancesExecuteRetrieve(context.Background(), slug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsApiService FlowsInstancesExportRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var slug string

		resp, httpRes, err := apiClient.FlowsApi.FlowsInstancesExportRetrieve(context.Background(), slug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsApiService FlowsInstancesImportCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FlowsApi.FlowsInstancesImportCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsApiService FlowsInstancesList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.FlowsApi.FlowsInstancesList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsApiService FlowsInstancesPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var slug string

		resp, httpRes, err := apiClient.FlowsApi.FlowsInstancesPartialUpdate(context.Background(), slug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsApiService FlowsInstancesRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var slug string

		resp, httpRes, err := apiClient.FlowsApi.FlowsInstancesRetrieve(context.Background(), slug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsApiService FlowsInstancesSetBackgroundCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var slug string

		httpRes, err := apiClient.FlowsApi.FlowsInstancesSetBackgroundCreate(context.Background(), slug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsApiService FlowsInstancesSetBackgroundUrlCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var slug string

		httpRes, err := apiClient.FlowsApi.FlowsInstancesSetBackgroundUrlCreate(context.Background(), slug).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsApiService FlowsInstancesUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var slug string

		resp, httpRes, err := apiClient.FlowsApi.FlowsInstancesUpdate(context.Background(), slug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test FlowsApiService FlowsInstancesUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var slug string

		resp, httpRes, err := apiClient.FlowsApi.FlowsInstancesUsedByList(context.Background(), slug).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
