/*
authentik

Testing TenantsApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package api

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_api_TenantsApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test TenantsApiService TenantsDomainsCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TenantsApi.TenantsDomainsCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TenantsApiService TenantsDomainsDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		httpRes, err := apiClient.TenantsApi.TenantsDomainsDestroy(context.Background(), id).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TenantsApiService TenantsDomainsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TenantsApi.TenantsDomainsList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TenantsApiService TenantsDomainsPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.TenantsApi.TenantsDomainsPartialUpdate(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TenantsApiService TenantsDomainsRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.TenantsApi.TenantsDomainsRetrieve(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TenantsApiService TenantsDomainsUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var id int32

		resp, httpRes, err := apiClient.TenantsApi.TenantsDomainsUpdate(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TenantsApiService TenantsTenantsCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TenantsApi.TenantsTenantsCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TenantsApiService TenantsTenantsCreateAdminGroupCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tenantUuid string

		httpRes, err := apiClient.TenantsApi.TenantsTenantsCreateAdminGroupCreate(context.Background(), tenantUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TenantsApiService TenantsTenantsCreateRecoveryKeyCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tenantUuid string

		resp, httpRes, err := apiClient.TenantsApi.TenantsTenantsCreateRecoveryKeyCreate(context.Background(), tenantUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TenantsApiService TenantsTenantsDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tenantUuid string

		httpRes, err := apiClient.TenantsApi.TenantsTenantsDestroy(context.Background(), tenantUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TenantsApiService TenantsTenantsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.TenantsApi.TenantsTenantsList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TenantsApiService TenantsTenantsPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tenantUuid string

		resp, httpRes, err := apiClient.TenantsApi.TenantsTenantsPartialUpdate(context.Background(), tenantUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TenantsApiService TenantsTenantsRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tenantUuid string

		resp, httpRes, err := apiClient.TenantsApi.TenantsTenantsRetrieve(context.Background(), tenantUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test TenantsApiService TenantsTenantsUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var tenantUuid string

		resp, httpRes, err := apiClient.TenantsApi.TenantsTenantsUpdate(context.Background(), tenantUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
