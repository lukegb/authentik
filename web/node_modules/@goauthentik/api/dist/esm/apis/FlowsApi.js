/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
import * as runtime from '../runtime';
import { CacheFromJSON, ChallengeTypesFromJSON, FilePathRequestToJSON, FlowFromJSON, FlowChallengeResponseRequestToJSON, FlowDiagramFromJSON, FlowImportResultFromJSON, FlowInspectionFromJSON, FlowRequestToJSON, FlowStageBindingFromJSON, FlowStageBindingRequestToJSON, LinkFromJSON, PaginatedFlowListFromJSON, PaginatedFlowStageBindingListFromJSON, PatchedFlowRequestToJSON, PatchedFlowStageBindingRequestToJSON, UsedByFromJSON, } from '../models';
/**
 *
 */
export class FlowsApi extends runtime.BaseAPI {
    /**
     * FlowStageBinding Viewset
     */
    flowsBindingsCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.flowStageBindingRequest === null || requestParameters.flowStageBindingRequest === undefined) {
                throw new runtime.RequiredError('flowStageBindingRequest', 'Required parameter requestParameters.flowStageBindingRequest was null or undefined when calling flowsBindingsCreate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/flows/bindings/`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: FlowStageBindingRequestToJSON(requestParameters.flowStageBindingRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => FlowStageBindingFromJSON(jsonValue));
        });
    }
    /**
     * FlowStageBinding Viewset
     */
    flowsBindingsCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.flowsBindingsCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * FlowStageBinding Viewset
     */
    flowsBindingsDestroyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.fsbUuid === null || requestParameters.fsbUuid === undefined) {
                throw new runtime.RequiredError('fsbUuid', 'Required parameter requestParameters.fsbUuid was null or undefined when calling flowsBindingsDestroy.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/flows/bindings/{fsb_uuid}/`.replace(`{${"fsb_uuid"}}`, encodeURIComponent(String(requestParameters.fsbUuid))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * FlowStageBinding Viewset
     */
    flowsBindingsDestroy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.flowsBindingsDestroyRaw(requestParameters, initOverrides);
        });
    }
    /**
     * FlowStageBinding Viewset
     */
    flowsBindingsListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.evaluateOnPlan !== undefined) {
                queryParameters['evaluate_on_plan'] = requestParameters.evaluateOnPlan;
            }
            if (requestParameters.fsbUuid !== undefined) {
                queryParameters['fsb_uuid'] = requestParameters.fsbUuid;
            }
            if (requestParameters.invalidResponseAction !== undefined) {
                queryParameters['invalid_response_action'] = requestParameters.invalidResponseAction;
            }
            if (requestParameters.order !== undefined) {
                queryParameters['order'] = requestParameters.order;
            }
            if (requestParameters.ordering !== undefined) {
                queryParameters['ordering'] = requestParameters.ordering;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.pageSize !== undefined) {
                queryParameters['page_size'] = requestParameters.pageSize;
            }
            if (requestParameters.pbmUuid !== undefined) {
                queryParameters['pbm_uuid'] = requestParameters.pbmUuid;
            }
            if (requestParameters.policies) {
                queryParameters['policies'] = requestParameters.policies;
            }
            if (requestParameters.policyEngineMode !== undefined) {
                queryParameters['policy_engine_mode'] = requestParameters.policyEngineMode;
            }
            if (requestParameters.reEvaluatePolicies !== undefined) {
                queryParameters['re_evaluate_policies'] = requestParameters.reEvaluatePolicies;
            }
            if (requestParameters.search !== undefined) {
                queryParameters['search'] = requestParameters.search;
            }
            if (requestParameters.stage !== undefined) {
                queryParameters['stage'] = requestParameters.stage;
            }
            if (requestParameters.target !== undefined) {
                queryParameters['target'] = requestParameters.target;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/flows/bindings/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedFlowStageBindingListFromJSON(jsonValue));
        });
    }
    /**
     * FlowStageBinding Viewset
     */
    flowsBindingsList(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.flowsBindingsListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * FlowStageBinding Viewset
     */
    flowsBindingsPartialUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.fsbUuid === null || requestParameters.fsbUuid === undefined) {
                throw new runtime.RequiredError('fsbUuid', 'Required parameter requestParameters.fsbUuid was null or undefined when calling flowsBindingsPartialUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/flows/bindings/{fsb_uuid}/`.replace(`{${"fsb_uuid"}}`, encodeURIComponent(String(requestParameters.fsbUuid))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: PatchedFlowStageBindingRequestToJSON(requestParameters.patchedFlowStageBindingRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => FlowStageBindingFromJSON(jsonValue));
        });
    }
    /**
     * FlowStageBinding Viewset
     */
    flowsBindingsPartialUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.flowsBindingsPartialUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * FlowStageBinding Viewset
     */
    flowsBindingsRetrieveRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.fsbUuid === null || requestParameters.fsbUuid === undefined) {
                throw new runtime.RequiredError('fsbUuid', 'Required parameter requestParameters.fsbUuid was null or undefined when calling flowsBindingsRetrieve.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/flows/bindings/{fsb_uuid}/`.replace(`{${"fsb_uuid"}}`, encodeURIComponent(String(requestParameters.fsbUuid))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => FlowStageBindingFromJSON(jsonValue));
        });
    }
    /**
     * FlowStageBinding Viewset
     */
    flowsBindingsRetrieve(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.flowsBindingsRetrieveRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * FlowStageBinding Viewset
     */
    flowsBindingsUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.fsbUuid === null || requestParameters.fsbUuid === undefined) {
                throw new runtime.RequiredError('fsbUuid', 'Required parameter requestParameters.fsbUuid was null or undefined when calling flowsBindingsUpdate.');
            }
            if (requestParameters.flowStageBindingRequest === null || requestParameters.flowStageBindingRequest === undefined) {
                throw new runtime.RequiredError('flowStageBindingRequest', 'Required parameter requestParameters.flowStageBindingRequest was null or undefined when calling flowsBindingsUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/flows/bindings/{fsb_uuid}/`.replace(`{${"fsb_uuid"}}`, encodeURIComponent(String(requestParameters.fsbUuid))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: FlowStageBindingRequestToJSON(requestParameters.flowStageBindingRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => FlowStageBindingFromJSON(jsonValue));
        });
    }
    /**
     * FlowStageBinding Viewset
     */
    flowsBindingsUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.flowsBindingsUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of all objects that use this object
     */
    flowsBindingsUsedByListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.fsbUuid === null || requestParameters.fsbUuid === undefined) {
                throw new runtime.RequiredError('fsbUuid', 'Required parameter requestParameters.fsbUuid was null or undefined when calling flowsBindingsUsedByList.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/flows/bindings/{fsb_uuid}/used_by/`.replace(`{${"fsb_uuid"}}`, encodeURIComponent(String(requestParameters.fsbUuid))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
        });
    }
    /**
     * Get a list of all objects that use this object
     */
    flowsBindingsUsedByList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.flowsBindingsUsedByListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get the next pending challenge from the currently active flow.
     */
    flowsExecutorGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.flowSlug === null || requestParameters.flowSlug === undefined) {
                throw new runtime.RequiredError('flowSlug', 'Required parameter requestParameters.flowSlug was null or undefined when calling flowsExecutorGet.');
            }
            if (requestParameters.query === null || requestParameters.query === undefined) {
                throw new runtime.RequiredError('query', 'Required parameter requestParameters.query was null or undefined when calling flowsExecutorGet.');
            }
            const queryParameters = {};
            if (requestParameters.query !== undefined) {
                queryParameters['query'] = requestParameters.query;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/flows/executor/{flow_slug}/`.replace(`{${"flow_slug"}}`, encodeURIComponent(String(requestParameters.flowSlug))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => ChallengeTypesFromJSON(jsonValue));
        });
    }
    /**
     * Get the next pending challenge from the currently active flow.
     */
    flowsExecutorGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.flowsExecutorGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Solve the previously retrieved challenge and advanced to the next stage.
     */
    flowsExecutorSolveRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.flowSlug === null || requestParameters.flowSlug === undefined) {
                throw new runtime.RequiredError('flowSlug', 'Required parameter requestParameters.flowSlug was null or undefined when calling flowsExecutorSolve.');
            }
            if (requestParameters.query === null || requestParameters.query === undefined) {
                throw new runtime.RequiredError('query', 'Required parameter requestParameters.query was null or undefined when calling flowsExecutorSolve.');
            }
            const queryParameters = {};
            if (requestParameters.query !== undefined) {
                queryParameters['query'] = requestParameters.query;
            }
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/flows/executor/{flow_slug}/`.replace(`{${"flow_slug"}}`, encodeURIComponent(String(requestParameters.flowSlug))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: FlowChallengeResponseRequestToJSON(requestParameters.flowChallengeResponseRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => ChallengeTypesFromJSON(jsonValue));
        });
    }
    /**
     * Solve the previously retrieved challenge and advanced to the next stage.
     */
    flowsExecutorSolve(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.flowsExecutorSolveRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get current flow state and record it
     */
    flowsInspectorGetRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.flowSlug === null || requestParameters.flowSlug === undefined) {
                throw new runtime.RequiredError('flowSlug', 'Required parameter requestParameters.flowSlug was null or undefined when calling flowsInspectorGet.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/flows/inspector/{flow_slug}/`.replace(`{${"flow_slug"}}`, encodeURIComponent(String(requestParameters.flowSlug))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => FlowInspectionFromJSON(jsonValue));
        });
    }
    /**
     * Get current flow state and record it
     */
    flowsInspectorGet(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.flowsInspectorGetRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Clear flow cache
     */
    flowsInstancesCacheClearCreateRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/flows/instances/cache_clear/`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Clear flow cache
     */
    flowsInstancesCacheClearCreate(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.flowsInstancesCacheClearCreateRaw(initOverrides);
        });
    }
    /**
     * Info about cached flows
     */
    flowsInstancesCacheInfoRetrieveRaw(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/flows/instances/cache_info/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => CacheFromJSON(jsonValue));
        });
    }
    /**
     * Info about cached flows
     */
    flowsInstancesCacheInfoRetrieve(initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.flowsInstancesCacheInfoRetrieveRaw(initOverrides);
            return yield response.value();
        });
    }
    /**
     * Flow Viewset
     */
    flowsInstancesCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.flowRequest === null || requestParameters.flowRequest === undefined) {
                throw new runtime.RequiredError('flowRequest', 'Required parameter requestParameters.flowRequest was null or undefined when calling flowsInstancesCreate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/flows/instances/`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: FlowRequestToJSON(requestParameters.flowRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => FlowFromJSON(jsonValue));
        });
    }
    /**
     * Flow Viewset
     */
    flowsInstancesCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.flowsInstancesCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Flow Viewset
     */
    flowsInstancesDestroyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.slug === null || requestParameters.slug === undefined) {
                throw new runtime.RequiredError('slug', 'Required parameter requestParameters.slug was null or undefined when calling flowsInstancesDestroy.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/flows/instances/{slug}/`.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters.slug))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Flow Viewset
     */
    flowsInstancesDestroy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.flowsInstancesDestroyRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Return diagram for flow with slug `slug`, in the format used by flowchart.js
     */
    flowsInstancesDiagramRetrieveRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.slug === null || requestParameters.slug === undefined) {
                throw new runtime.RequiredError('slug', 'Required parameter requestParameters.slug was null or undefined when calling flowsInstancesDiagramRetrieve.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/flows/instances/{slug}/diagram/`.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters.slug))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => FlowDiagramFromJSON(jsonValue));
        });
    }
    /**
     * Return diagram for flow with slug `slug`, in the format used by flowchart.js
     */
    flowsInstancesDiagramRetrieve(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.flowsInstancesDiagramRetrieveRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Execute flow for current user
     */
    flowsInstancesExecuteRetrieveRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.slug === null || requestParameters.slug === undefined) {
                throw new runtime.RequiredError('slug', 'Required parameter requestParameters.slug was null or undefined when calling flowsInstancesExecuteRetrieve.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/flows/instances/{slug}/execute/`.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters.slug))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => LinkFromJSON(jsonValue));
        });
    }
    /**
     * Execute flow for current user
     */
    flowsInstancesExecuteRetrieve(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.flowsInstancesExecuteRetrieveRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Export flow to .yaml file
     */
    flowsInstancesExportRetrieveRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.slug === null || requestParameters.slug === undefined) {
                throw new runtime.RequiredError('slug', 'Required parameter requestParameters.slug was null or undefined when calling flowsInstancesExportRetrieve.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/flows/instances/{slug}/export/`.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters.slug))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.BlobApiResponse(response);
        });
    }
    /**
     * Export flow to .yaml file
     */
    flowsInstancesExportRetrieve(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.flowsInstancesExportRetrieveRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Import flow from .yaml file
     */
    flowsInstancesImportCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const consumes = [
                { contentType: 'multipart/form-data' },
            ];
            // @ts-ignore: canConsumeForm may be unused
            const canConsumeForm = runtime.canConsumeForm(consumes);
            let formParams;
            let useForm = false;
            // use FormData to transmit files using content-type "multipart/form-data"
            useForm = canConsumeForm;
            if (useForm) {
                formParams = new FormData();
            }
            else {
                formParams = new URLSearchParams();
            }
            if (requestParameters.file !== undefined) {
                formParams.append('file', requestParameters.file);
            }
            if (requestParameters.clear !== undefined) {
                formParams.append('clear', requestParameters.clear);
            }
            const response = yield this.request({
                path: `/flows/instances/import/`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: formParams,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => FlowImportResultFromJSON(jsonValue));
        });
    }
    /**
     * Import flow from .yaml file
     */
    flowsInstancesImportCreate(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.flowsInstancesImportCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Flow Viewset
     */
    flowsInstancesListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.deniedAction !== undefined) {
                queryParameters['denied_action'] = requestParameters.deniedAction;
            }
            if (requestParameters.designation !== undefined) {
                queryParameters['designation'] = requestParameters.designation;
            }
            if (requestParameters.flowUuid !== undefined) {
                queryParameters['flow_uuid'] = requestParameters.flowUuid;
            }
            if (requestParameters.name !== undefined) {
                queryParameters['name'] = requestParameters.name;
            }
            if (requestParameters.ordering !== undefined) {
                queryParameters['ordering'] = requestParameters.ordering;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.pageSize !== undefined) {
                queryParameters['page_size'] = requestParameters.pageSize;
            }
            if (requestParameters.search !== undefined) {
                queryParameters['search'] = requestParameters.search;
            }
            if (requestParameters.slug !== undefined) {
                queryParameters['slug'] = requestParameters.slug;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/flows/instances/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedFlowListFromJSON(jsonValue));
        });
    }
    /**
     * Flow Viewset
     */
    flowsInstancesList(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.flowsInstancesListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Flow Viewset
     */
    flowsInstancesPartialUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.slug === null || requestParameters.slug === undefined) {
                throw new runtime.RequiredError('slug', 'Required parameter requestParameters.slug was null or undefined when calling flowsInstancesPartialUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/flows/instances/{slug}/`.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters.slug))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: PatchedFlowRequestToJSON(requestParameters.patchedFlowRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => FlowFromJSON(jsonValue));
        });
    }
    /**
     * Flow Viewset
     */
    flowsInstancesPartialUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.flowsInstancesPartialUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Flow Viewset
     */
    flowsInstancesRetrieveRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.slug === null || requestParameters.slug === undefined) {
                throw new runtime.RequiredError('slug', 'Required parameter requestParameters.slug was null or undefined when calling flowsInstancesRetrieve.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/flows/instances/{slug}/`.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters.slug))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => FlowFromJSON(jsonValue));
        });
    }
    /**
     * Flow Viewset
     */
    flowsInstancesRetrieve(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.flowsInstancesRetrieveRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Set Flow background
     */
    flowsInstancesSetBackgroundCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.slug === null || requestParameters.slug === undefined) {
                throw new runtime.RequiredError('slug', 'Required parameter requestParameters.slug was null or undefined when calling flowsInstancesSetBackgroundCreate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const consumes = [
                { contentType: 'multipart/form-data' },
            ];
            // @ts-ignore: canConsumeForm may be unused
            const canConsumeForm = runtime.canConsumeForm(consumes);
            let formParams;
            let useForm = false;
            // use FormData to transmit files using content-type "multipart/form-data"
            useForm = canConsumeForm;
            if (useForm) {
                formParams = new FormData();
            }
            else {
                formParams = new URLSearchParams();
            }
            if (requestParameters.file !== undefined) {
                formParams.append('file', requestParameters.file);
            }
            if (requestParameters.clear !== undefined) {
                formParams.append('clear', requestParameters.clear);
            }
            const response = yield this.request({
                path: `/flows/instances/{slug}/set_background/`.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters.slug))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: formParams,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Set Flow background
     */
    flowsInstancesSetBackgroundCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.flowsInstancesSetBackgroundCreateRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Set Flow background (as URL)
     */
    flowsInstancesSetBackgroundUrlCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.slug === null || requestParameters.slug === undefined) {
                throw new runtime.RequiredError('slug', 'Required parameter requestParameters.slug was null or undefined when calling flowsInstancesSetBackgroundUrlCreate.');
            }
            if (requestParameters.filePathRequest === null || requestParameters.filePathRequest === undefined) {
                throw new runtime.RequiredError('filePathRequest', 'Required parameter requestParameters.filePathRequest was null or undefined when calling flowsInstancesSetBackgroundUrlCreate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/flows/instances/{slug}/set_background_url/`.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters.slug))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: FilePathRequestToJSON(requestParameters.filePathRequest),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Set Flow background (as URL)
     */
    flowsInstancesSetBackgroundUrlCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.flowsInstancesSetBackgroundUrlCreateRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Flow Viewset
     */
    flowsInstancesUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.slug === null || requestParameters.slug === undefined) {
                throw new runtime.RequiredError('slug', 'Required parameter requestParameters.slug was null or undefined when calling flowsInstancesUpdate.');
            }
            if (requestParameters.flowRequest === null || requestParameters.flowRequest === undefined) {
                throw new runtime.RequiredError('flowRequest', 'Required parameter requestParameters.flowRequest was null or undefined when calling flowsInstancesUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/flows/instances/{slug}/`.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters.slug))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: FlowRequestToJSON(requestParameters.flowRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => FlowFromJSON(jsonValue));
        });
    }
    /**
     * Flow Viewset
     */
    flowsInstancesUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.flowsInstancesUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of all objects that use this object
     */
    flowsInstancesUsedByListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.slug === null || requestParameters.slug === undefined) {
                throw new runtime.RequiredError('slug', 'Required parameter requestParameters.slug was null or undefined when calling flowsInstancesUsedByList.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/flows/instances/{slug}/used_by/`.replace(`{${"slug"}}`, encodeURIComponent(String(requestParameters.slug))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
        });
    }
    /**
     * Get a list of all objects that use this object
     */
    flowsInstancesUsedByList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.flowsInstancesUsedByListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
/**
 * @export
 */
export const FlowsBindingsListInvalidResponseActionEnum = {
    Restart: 'restart',
    RestartWithContext: 'restart_with_context',
    Retry: 'retry',
    UnknownDefaultOpenApi: '11184809'
};
/**
 * @export
 */
export const FlowsBindingsListPolicyEngineModeEnum = {
    All: 'all',
    Any: 'any',
    UnknownDefaultOpenApi: '11184809'
};
/**
 * @export
 */
export const FlowsInstancesListDeniedActionEnum = {
    Continue: 'continue',
    Message: 'message',
    MessageContinue: 'message_continue',
    UnknownDefaultOpenApi: '11184809'
};
/**
 * @export
 */
export const FlowsInstancesListDesignationEnum = {
    Authentication: 'authentication',
    Authorization: 'authorization',
    Enrollment: 'enrollment',
    Invalidation: 'invalidation',
    Recovery: 'recovery',
    StageConfiguration: 'stage_configuration',
    Unenrollment: 'unenrollment',
    UnknownDefaultOpenApi: '11184809'
};
