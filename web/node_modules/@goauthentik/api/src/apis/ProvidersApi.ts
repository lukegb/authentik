/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GenericError,
  LDAPProvider,
  LDAPProviderRequest,
  OAuth2Provider,
  OAuth2ProviderRequest,
  OAuth2ProviderSetupURLs,
  PaginatedLDAPProviderList,
  PaginatedOAuth2ProviderList,
  PaginatedProviderList,
  PaginatedProxyProviderList,
  PaginatedRACProviderList,
  PaginatedRadiusProviderList,
  PaginatedSAMLProviderList,
  PaginatedSCIMProviderList,
  PatchedLDAPProviderRequest,
  PatchedOAuth2ProviderRequest,
  PatchedProxyProviderRequest,
  PatchedRACProviderRequest,
  PatchedRadiusProviderRequest,
  PatchedSAMLProviderRequest,
  PatchedSCIMProviderRequest,
  PropertyMappingPreview,
  Provider,
  ProxyProvider,
  ProxyProviderRequest,
  RACProvider,
  RACProviderRequest,
  RadiusProvider,
  RadiusProviderRequest,
  SAMLMetadata,
  SAMLProvider,
  SAMLProviderRequest,
  SCIMProvider,
  SCIMProviderRequest,
  SCIMSyncStatus,
  TypeCreate,
  UsedBy,
  ValidationError,
} from '../models';
import {
    GenericErrorFromJSON,
    GenericErrorToJSON,
    LDAPProviderFromJSON,
    LDAPProviderToJSON,
    LDAPProviderRequestFromJSON,
    LDAPProviderRequestToJSON,
    OAuth2ProviderFromJSON,
    OAuth2ProviderToJSON,
    OAuth2ProviderRequestFromJSON,
    OAuth2ProviderRequestToJSON,
    OAuth2ProviderSetupURLsFromJSON,
    OAuth2ProviderSetupURLsToJSON,
    PaginatedLDAPProviderListFromJSON,
    PaginatedLDAPProviderListToJSON,
    PaginatedOAuth2ProviderListFromJSON,
    PaginatedOAuth2ProviderListToJSON,
    PaginatedProviderListFromJSON,
    PaginatedProviderListToJSON,
    PaginatedProxyProviderListFromJSON,
    PaginatedProxyProviderListToJSON,
    PaginatedRACProviderListFromJSON,
    PaginatedRACProviderListToJSON,
    PaginatedRadiusProviderListFromJSON,
    PaginatedRadiusProviderListToJSON,
    PaginatedSAMLProviderListFromJSON,
    PaginatedSAMLProviderListToJSON,
    PaginatedSCIMProviderListFromJSON,
    PaginatedSCIMProviderListToJSON,
    PatchedLDAPProviderRequestFromJSON,
    PatchedLDAPProviderRequestToJSON,
    PatchedOAuth2ProviderRequestFromJSON,
    PatchedOAuth2ProviderRequestToJSON,
    PatchedProxyProviderRequestFromJSON,
    PatchedProxyProviderRequestToJSON,
    PatchedRACProviderRequestFromJSON,
    PatchedRACProviderRequestToJSON,
    PatchedRadiusProviderRequestFromJSON,
    PatchedRadiusProviderRequestToJSON,
    PatchedSAMLProviderRequestFromJSON,
    PatchedSAMLProviderRequestToJSON,
    PatchedSCIMProviderRequestFromJSON,
    PatchedSCIMProviderRequestToJSON,
    PropertyMappingPreviewFromJSON,
    PropertyMappingPreviewToJSON,
    ProviderFromJSON,
    ProviderToJSON,
    ProxyProviderFromJSON,
    ProxyProviderToJSON,
    ProxyProviderRequestFromJSON,
    ProxyProviderRequestToJSON,
    RACProviderFromJSON,
    RACProviderToJSON,
    RACProviderRequestFromJSON,
    RACProviderRequestToJSON,
    RadiusProviderFromJSON,
    RadiusProviderToJSON,
    RadiusProviderRequestFromJSON,
    RadiusProviderRequestToJSON,
    SAMLMetadataFromJSON,
    SAMLMetadataToJSON,
    SAMLProviderFromJSON,
    SAMLProviderToJSON,
    SAMLProviderRequestFromJSON,
    SAMLProviderRequestToJSON,
    SCIMProviderFromJSON,
    SCIMProviderToJSON,
    SCIMProviderRequestFromJSON,
    SCIMProviderRequestToJSON,
    SCIMSyncStatusFromJSON,
    SCIMSyncStatusToJSON,
    TypeCreateFromJSON,
    TypeCreateToJSON,
    UsedByFromJSON,
    UsedByToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models';

export interface ProvidersAllDestroyRequest {
    id: number;
}

export interface ProvidersAllListRequest {
    applicationIsnull?: boolean;
    backchannelOnly?: boolean;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
}

export interface ProvidersAllRetrieveRequest {
    id: number;
}

export interface ProvidersAllUsedByListRequest {
    id: number;
}

export interface ProvidersLdapCreateRequest {
    lDAPProviderRequest: LDAPProviderRequest;
}

export interface ProvidersLdapDestroyRequest {
    id: number;
}

export interface ProvidersLdapListRequest {
    applicationIsnull?: boolean;
    authorizationFlowSlugIexact?: string;
    baseDnIexact?: string;
    certificateKpUuidIexact?: string;
    certificateNameIexact?: string;
    gidStartNumberIexact?: number;
    nameIexact?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
    searchGroupGroupUuidIexact?: string;
    searchGroupNameIexact?: string;
    tlsServerNameIexact?: string;
    uidStartNumberIexact?: number;
}

export interface ProvidersLdapPartialUpdateRequest {
    id: number;
    patchedLDAPProviderRequest?: PatchedLDAPProviderRequest;
}

export interface ProvidersLdapRetrieveRequest {
    id: number;
}

export interface ProvidersLdapUpdateRequest {
    id: number;
    lDAPProviderRequest: LDAPProviderRequest;
}

export interface ProvidersLdapUsedByListRequest {
    id: number;
}

export interface ProvidersOauth2CreateRequest {
    oAuth2ProviderRequest: OAuth2ProviderRequest;
}

export interface ProvidersOauth2DestroyRequest {
    id: number;
}

export interface ProvidersOauth2ListRequest {
    accessCodeValidity?: string;
    accessTokenValidity?: string;
    application?: string;
    authorizationFlow?: string;
    clientId?: string;
    clientType?: ProvidersOauth2ListClientTypeEnum;
    includeClaimsInIdToken?: boolean;
    issuerMode?: ProvidersOauth2ListIssuerModeEnum;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    propertyMappings?: Array<string>;
    redirectUris?: string;
    refreshTokenValidity?: string;
    search?: string;
    signingKey?: string;
    subMode?: ProvidersOauth2ListSubModeEnum;
}

export interface ProvidersOauth2PartialUpdateRequest {
    id: number;
    patchedOAuth2ProviderRequest?: PatchedOAuth2ProviderRequest;
}

export interface ProvidersOauth2PreviewUserRetrieveRequest {
    id: number;
    forUser?: number;
}

export interface ProvidersOauth2RetrieveRequest {
    id: number;
}

export interface ProvidersOauth2SetupUrlsRetrieveRequest {
    id: number;
}

export interface ProvidersOauth2UpdateRequest {
    id: number;
    oAuth2ProviderRequest: OAuth2ProviderRequest;
}

export interface ProvidersOauth2UsedByListRequest {
    id: number;
}

export interface ProvidersProxyCreateRequest {
    proxyProviderRequest: ProxyProviderRequest;
}

export interface ProvidersProxyDestroyRequest {
    id: number;
}

export interface ProvidersProxyListRequest {
    applicationIsnull?: boolean;
    authorizationFlowSlugIexact?: string;
    basicAuthEnabledIexact?: boolean;
    basicAuthPasswordAttributeIexact?: string;
    basicAuthUserAttributeIexact?: string;
    certificateKpUuidIexact?: string;
    certificateNameIexact?: string;
    cookieDomainIexact?: string;
    externalHostIexact?: string;
    internalHostIexact?: string;
    internalHostSslValidationIexact?: boolean;
    modeIexact?: string;
    nameIexact?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    propertyMappingsIexact?: Array<string>;
    redirectUrisIexact?: string;
    search?: string;
    skipPathRegexIexact?: string;
}

export interface ProvidersProxyPartialUpdateRequest {
    id: number;
    patchedProxyProviderRequest?: PatchedProxyProviderRequest;
}

export interface ProvidersProxyRetrieveRequest {
    id: number;
}

export interface ProvidersProxyUpdateRequest {
    id: number;
    proxyProviderRequest: ProxyProviderRequest;
}

export interface ProvidersProxyUsedByListRequest {
    id: number;
}

export interface ProvidersRacCreateRequest {
    rACProviderRequest: RACProviderRequest;
}

export interface ProvidersRacDestroyRequest {
    id: number;
}

export interface ProvidersRacListRequest {
    applicationIsnull?: boolean;
    nameIexact?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
}

export interface ProvidersRacPartialUpdateRequest {
    id: number;
    patchedRACProviderRequest?: PatchedRACProviderRequest;
}

export interface ProvidersRacRetrieveRequest {
    id: number;
}

export interface ProvidersRacUpdateRequest {
    id: number;
    rACProviderRequest: RACProviderRequest;
}

export interface ProvidersRacUsedByListRequest {
    id: number;
}

export interface ProvidersRadiusCreateRequest {
    radiusProviderRequest: RadiusProviderRequest;
}

export interface ProvidersRadiusDestroyRequest {
    id: number;
}

export interface ProvidersRadiusListRequest {
    applicationIsnull?: boolean;
    authorizationFlowSlugIexact?: string;
    clientNetworksIexact?: string;
    nameIexact?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
}

export interface ProvidersRadiusPartialUpdateRequest {
    id: number;
    patchedRadiusProviderRequest?: PatchedRadiusProviderRequest;
}

export interface ProvidersRadiusRetrieveRequest {
    id: number;
}

export interface ProvidersRadiusUpdateRequest {
    id: number;
    radiusProviderRequest: RadiusProviderRequest;
}

export interface ProvidersRadiusUsedByListRequest {
    id: number;
}

export interface ProvidersSamlCreateRequest {
    sAMLProviderRequest: SAMLProviderRequest;
}

export interface ProvidersSamlDestroyRequest {
    id: number;
}

export interface ProvidersSamlImportMetadataCreateRequest {
    name: string;
    authorizationFlow: string;
    file: Blob;
}

export interface ProvidersSamlListRequest {
    acsUrl?: string;
    assertionValidNotBefore?: string;
    assertionValidNotOnOrAfter?: string;
    audience?: string;
    authenticationFlow?: string;
    authorizationFlow?: string;
    backchannelApplication?: string;
    defaultRelayState?: string;
    digestAlgorithm?: ProvidersSamlListDigestAlgorithmEnum;
    isBackchannel?: boolean;
    issuer?: string;
    name?: string;
    nameIdMapping?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    propertyMappings?: Array<string>;
    search?: string;
    sessionValidNotOnOrAfter?: string;
    signatureAlgorithm?: ProvidersSamlListSignatureAlgorithmEnum;
    signingKp?: string;
    spBinding?: ProvidersSamlListSpBindingEnum;
    verificationKp?: string;
}

export interface ProvidersSamlMetadataRetrieveRequest {
    id: number;
    download?: boolean;
    forceBinding?: ProvidersSamlMetadataRetrieveForceBindingEnum;
}

export interface ProvidersSamlPartialUpdateRequest {
    id: number;
    patchedSAMLProviderRequest?: PatchedSAMLProviderRequest;
}

export interface ProvidersSamlPreviewUserRetrieveRequest {
    id: number;
    forUser?: number;
}

export interface ProvidersSamlRetrieveRequest {
    id: number;
}

export interface ProvidersSamlUpdateRequest {
    id: number;
    sAMLProviderRequest: SAMLProviderRequest;
}

export interface ProvidersSamlUsedByListRequest {
    id: number;
}

export interface ProvidersScimCreateRequest {
    sCIMProviderRequest: SCIMProviderRequest;
}

export interface ProvidersScimDestroyRequest {
    id: number;
}

export interface ProvidersScimListRequest {
    excludeUsersServiceAccount?: boolean;
    filterGroup?: string;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    search?: string;
    url?: string;
}

export interface ProvidersScimPartialUpdateRequest {
    id: number;
    patchedSCIMProviderRequest?: PatchedSCIMProviderRequest;
}

export interface ProvidersScimRetrieveRequest {
    id: number;
}

export interface ProvidersScimSyncStatusRetrieveRequest {
    id: number;
}

export interface ProvidersScimUpdateRequest {
    id: number;
    sCIMProviderRequest: SCIMProviderRequest;
}

export interface ProvidersScimUsedByListRequest {
    id: number;
}

/**
 * 
 */
export class ProvidersApi extends runtime.BaseAPI {

    /**
     * Provider Viewset
     */
    async providersAllDestroyRaw(requestParameters: ProvidersAllDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling providersAllDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/all/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Provider Viewset
     */
    async providersAllDestroy(requestParameters: ProvidersAllDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.providersAllDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Provider Viewset
     */
    async providersAllListRaw(requestParameters: ProvidersAllListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedProviderList>> {
        const queryParameters: any = {};

        if (requestParameters.applicationIsnull !== undefined) {
            queryParameters['application__isnull'] = requestParameters.applicationIsnull;
        }

        if (requestParameters.backchannelOnly !== undefined) {
            queryParameters['backchannel_only'] = requestParameters.backchannelOnly;
        }

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/all/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedProviderListFromJSON(jsonValue));
    }

    /**
     * Provider Viewset
     */
    async providersAllList(requestParameters: ProvidersAllListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedProviderList> {
        const response = await this.providersAllListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Provider Viewset
     */
    async providersAllRetrieveRaw(requestParameters: ProvidersAllRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Provider>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling providersAllRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/all/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProviderFromJSON(jsonValue));
    }

    /**
     * Provider Viewset
     */
    async providersAllRetrieve(requestParameters: ProvidersAllRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Provider> {
        const response = await this.providersAllRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all creatable provider types
     */
    async providersAllTypesListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TypeCreate>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/all/types/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TypeCreateFromJSON));
    }

    /**
     * Get all creatable provider types
     */
    async providersAllTypesList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TypeCreate>> {
        const response = await this.providersAllTypesListRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all objects that use this object
     */
    async providersAllUsedByListRaw(requestParameters: ProvidersAllUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UsedBy>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling providersAllUsedByList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/all/{id}/used_by/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
    }

    /**
     * Get a list of all objects that use this object
     */
    async providersAllUsedByList(requestParameters: ProvidersAllUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UsedBy>> {
        const response = await this.providersAllUsedByListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * LDAPProvider Viewset
     */
    async providersLdapCreateRaw(requestParameters: ProvidersLdapCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LDAPProvider>> {
        if (requestParameters.lDAPProviderRequest === null || requestParameters.lDAPProviderRequest === undefined) {
            throw new runtime.RequiredError('lDAPProviderRequest','Required parameter requestParameters.lDAPProviderRequest was null or undefined when calling providersLdapCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/ldap/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: LDAPProviderRequestToJSON(requestParameters.lDAPProviderRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LDAPProviderFromJSON(jsonValue));
    }

    /**
     * LDAPProvider Viewset
     */
    async providersLdapCreate(requestParameters: ProvidersLdapCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LDAPProvider> {
        const response = await this.providersLdapCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * LDAPProvider Viewset
     */
    async providersLdapDestroyRaw(requestParameters: ProvidersLdapDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling providersLdapDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/ldap/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * LDAPProvider Viewset
     */
    async providersLdapDestroy(requestParameters: ProvidersLdapDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.providersLdapDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * LDAPProvider Viewset
     */
    async providersLdapListRaw(requestParameters: ProvidersLdapListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedLDAPProviderList>> {
        const queryParameters: any = {};

        if (requestParameters.applicationIsnull !== undefined) {
            queryParameters['application__isnull'] = requestParameters.applicationIsnull;
        }

        if (requestParameters.authorizationFlowSlugIexact !== undefined) {
            queryParameters['authorization_flow__slug__iexact'] = requestParameters.authorizationFlowSlugIexact;
        }

        if (requestParameters.baseDnIexact !== undefined) {
            queryParameters['base_dn__iexact'] = requestParameters.baseDnIexact;
        }

        if (requestParameters.certificateKpUuidIexact !== undefined) {
            queryParameters['certificate__kp_uuid__iexact'] = requestParameters.certificateKpUuidIexact;
        }

        if (requestParameters.certificateNameIexact !== undefined) {
            queryParameters['certificate__name__iexact'] = requestParameters.certificateNameIexact;
        }

        if (requestParameters.gidStartNumberIexact !== undefined) {
            queryParameters['gid_start_number__iexact'] = requestParameters.gidStartNumberIexact;
        }

        if (requestParameters.nameIexact !== undefined) {
            queryParameters['name__iexact'] = requestParameters.nameIexact;
        }

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.searchGroupGroupUuidIexact !== undefined) {
            queryParameters['search_group__group_uuid__iexact'] = requestParameters.searchGroupGroupUuidIexact;
        }

        if (requestParameters.searchGroupNameIexact !== undefined) {
            queryParameters['search_group__name__iexact'] = requestParameters.searchGroupNameIexact;
        }

        if (requestParameters.tlsServerNameIexact !== undefined) {
            queryParameters['tls_server_name__iexact'] = requestParameters.tlsServerNameIexact;
        }

        if (requestParameters.uidStartNumberIexact !== undefined) {
            queryParameters['uid_start_number__iexact'] = requestParameters.uidStartNumberIexact;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/ldap/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedLDAPProviderListFromJSON(jsonValue));
    }

    /**
     * LDAPProvider Viewset
     */
    async providersLdapList(requestParameters: ProvidersLdapListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedLDAPProviderList> {
        const response = await this.providersLdapListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * LDAPProvider Viewset
     */
    async providersLdapPartialUpdateRaw(requestParameters: ProvidersLdapPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LDAPProvider>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling providersLdapPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/ldap/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedLDAPProviderRequestToJSON(requestParameters.patchedLDAPProviderRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LDAPProviderFromJSON(jsonValue));
    }

    /**
     * LDAPProvider Viewset
     */
    async providersLdapPartialUpdate(requestParameters: ProvidersLdapPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LDAPProvider> {
        const response = await this.providersLdapPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * LDAPProvider Viewset
     */
    async providersLdapRetrieveRaw(requestParameters: ProvidersLdapRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LDAPProvider>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling providersLdapRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/ldap/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LDAPProviderFromJSON(jsonValue));
    }

    /**
     * LDAPProvider Viewset
     */
    async providersLdapRetrieve(requestParameters: ProvidersLdapRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LDAPProvider> {
        const response = await this.providersLdapRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * LDAPProvider Viewset
     */
    async providersLdapUpdateRaw(requestParameters: ProvidersLdapUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<LDAPProvider>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling providersLdapUpdate.');
        }

        if (requestParameters.lDAPProviderRequest === null || requestParameters.lDAPProviderRequest === undefined) {
            throw new runtime.RequiredError('lDAPProviderRequest','Required parameter requestParameters.lDAPProviderRequest was null or undefined when calling providersLdapUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/ldap/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: LDAPProviderRequestToJSON(requestParameters.lDAPProviderRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => LDAPProviderFromJSON(jsonValue));
    }

    /**
     * LDAPProvider Viewset
     */
    async providersLdapUpdate(requestParameters: ProvidersLdapUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<LDAPProvider> {
        const response = await this.providersLdapUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all objects that use this object
     */
    async providersLdapUsedByListRaw(requestParameters: ProvidersLdapUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UsedBy>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling providersLdapUsedByList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/ldap/{id}/used_by/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
    }

    /**
     * Get a list of all objects that use this object
     */
    async providersLdapUsedByList(requestParameters: ProvidersLdapUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UsedBy>> {
        const response = await this.providersLdapUsedByListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * OAuth2Provider Viewset
     */
    async providersOauth2CreateRaw(requestParameters: ProvidersOauth2CreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OAuth2Provider>> {
        if (requestParameters.oAuth2ProviderRequest === null || requestParameters.oAuth2ProviderRequest === undefined) {
            throw new runtime.RequiredError('oAuth2ProviderRequest','Required parameter requestParameters.oAuth2ProviderRequest was null or undefined when calling providersOauth2Create.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/oauth2/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OAuth2ProviderRequestToJSON(requestParameters.oAuth2ProviderRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OAuth2ProviderFromJSON(jsonValue));
    }

    /**
     * OAuth2Provider Viewset
     */
    async providersOauth2Create(requestParameters: ProvidersOauth2CreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OAuth2Provider> {
        const response = await this.providersOauth2CreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * OAuth2Provider Viewset
     */
    async providersOauth2DestroyRaw(requestParameters: ProvidersOauth2DestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling providersOauth2Destroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/oauth2/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * OAuth2Provider Viewset
     */
    async providersOauth2Destroy(requestParameters: ProvidersOauth2DestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.providersOauth2DestroyRaw(requestParameters, initOverrides);
    }

    /**
     * OAuth2Provider Viewset
     */
    async providersOauth2ListRaw(requestParameters: ProvidersOauth2ListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedOAuth2ProviderList>> {
        const queryParameters: any = {};

        if (requestParameters.accessCodeValidity !== undefined) {
            queryParameters['access_code_validity'] = requestParameters.accessCodeValidity;
        }

        if (requestParameters.accessTokenValidity !== undefined) {
            queryParameters['access_token_validity'] = requestParameters.accessTokenValidity;
        }

        if (requestParameters.application !== undefined) {
            queryParameters['application'] = requestParameters.application;
        }

        if (requestParameters.authorizationFlow !== undefined) {
            queryParameters['authorization_flow'] = requestParameters.authorizationFlow;
        }

        if (requestParameters.clientId !== undefined) {
            queryParameters['client_id'] = requestParameters.clientId;
        }

        if (requestParameters.clientType !== undefined) {
            queryParameters['client_type'] = requestParameters.clientType;
        }

        if (requestParameters.includeClaimsInIdToken !== undefined) {
            queryParameters['include_claims_in_id_token'] = requestParameters.includeClaimsInIdToken;
        }

        if (requestParameters.issuerMode !== undefined) {
            queryParameters['issuer_mode'] = requestParameters.issuerMode;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.propertyMappings) {
            queryParameters['property_mappings'] = requestParameters.propertyMappings;
        }

        if (requestParameters.redirectUris !== undefined) {
            queryParameters['redirect_uris'] = requestParameters.redirectUris;
        }

        if (requestParameters.refreshTokenValidity !== undefined) {
            queryParameters['refresh_token_validity'] = requestParameters.refreshTokenValidity;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.signingKey !== undefined) {
            queryParameters['signing_key'] = requestParameters.signingKey;
        }

        if (requestParameters.subMode !== undefined) {
            queryParameters['sub_mode'] = requestParameters.subMode;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/oauth2/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedOAuth2ProviderListFromJSON(jsonValue));
    }

    /**
     * OAuth2Provider Viewset
     */
    async providersOauth2List(requestParameters: ProvidersOauth2ListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedOAuth2ProviderList> {
        const response = await this.providersOauth2ListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * OAuth2Provider Viewset
     */
    async providersOauth2PartialUpdateRaw(requestParameters: ProvidersOauth2PartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OAuth2Provider>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling providersOauth2PartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/oauth2/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedOAuth2ProviderRequestToJSON(requestParameters.patchedOAuth2ProviderRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OAuth2ProviderFromJSON(jsonValue));
    }

    /**
     * OAuth2Provider Viewset
     */
    async providersOauth2PartialUpdate(requestParameters: ProvidersOauth2PartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OAuth2Provider> {
        const response = await this.providersOauth2PartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Preview user data for provider
     */
    async providersOauth2PreviewUserRetrieveRaw(requestParameters: ProvidersOauth2PreviewUserRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PropertyMappingPreview>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling providersOauth2PreviewUserRetrieve.');
        }

        const queryParameters: any = {};

        if (requestParameters.forUser !== undefined) {
            queryParameters['for_user'] = requestParameters.forUser;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/oauth2/{id}/preview_user/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PropertyMappingPreviewFromJSON(jsonValue));
    }

    /**
     * Preview user data for provider
     */
    async providersOauth2PreviewUserRetrieve(requestParameters: ProvidersOauth2PreviewUserRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PropertyMappingPreview> {
        const response = await this.providersOauth2PreviewUserRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * OAuth2Provider Viewset
     */
    async providersOauth2RetrieveRaw(requestParameters: ProvidersOauth2RetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OAuth2Provider>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling providersOauth2Retrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/oauth2/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OAuth2ProviderFromJSON(jsonValue));
    }

    /**
     * OAuth2Provider Viewset
     */
    async providersOauth2Retrieve(requestParameters: ProvidersOauth2RetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OAuth2Provider> {
        const response = await this.providersOauth2RetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get Providers setup URLs
     */
    async providersOauth2SetupUrlsRetrieveRaw(requestParameters: ProvidersOauth2SetupUrlsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OAuth2ProviderSetupURLs>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling providersOauth2SetupUrlsRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/oauth2/{id}/setup_urls/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OAuth2ProviderSetupURLsFromJSON(jsonValue));
    }

    /**
     * Get Providers setup URLs
     */
    async providersOauth2SetupUrlsRetrieve(requestParameters: ProvidersOauth2SetupUrlsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OAuth2ProviderSetupURLs> {
        const response = await this.providersOauth2SetupUrlsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * OAuth2Provider Viewset
     */
    async providersOauth2UpdateRaw(requestParameters: ProvidersOauth2UpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<OAuth2Provider>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling providersOauth2Update.');
        }

        if (requestParameters.oAuth2ProviderRequest === null || requestParameters.oAuth2ProviderRequest === undefined) {
            throw new runtime.RequiredError('oAuth2ProviderRequest','Required parameter requestParameters.oAuth2ProviderRequest was null or undefined when calling providersOauth2Update.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/oauth2/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: OAuth2ProviderRequestToJSON(requestParameters.oAuth2ProviderRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => OAuth2ProviderFromJSON(jsonValue));
    }

    /**
     * OAuth2Provider Viewset
     */
    async providersOauth2Update(requestParameters: ProvidersOauth2UpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<OAuth2Provider> {
        const response = await this.providersOauth2UpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all objects that use this object
     */
    async providersOauth2UsedByListRaw(requestParameters: ProvidersOauth2UsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UsedBy>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling providersOauth2UsedByList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/oauth2/{id}/used_by/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
    }

    /**
     * Get a list of all objects that use this object
     */
    async providersOauth2UsedByList(requestParameters: ProvidersOauth2UsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UsedBy>> {
        const response = await this.providersOauth2UsedByListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ProxyProvider Viewset
     */
    async providersProxyCreateRaw(requestParameters: ProvidersProxyCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProxyProvider>> {
        if (requestParameters.proxyProviderRequest === null || requestParameters.proxyProviderRequest === undefined) {
            throw new runtime.RequiredError('proxyProviderRequest','Required parameter requestParameters.proxyProviderRequest was null or undefined when calling providersProxyCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/proxy/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ProxyProviderRequestToJSON(requestParameters.proxyProviderRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProxyProviderFromJSON(jsonValue));
    }

    /**
     * ProxyProvider Viewset
     */
    async providersProxyCreate(requestParameters: ProvidersProxyCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProxyProvider> {
        const response = await this.providersProxyCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ProxyProvider Viewset
     */
    async providersProxyDestroyRaw(requestParameters: ProvidersProxyDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling providersProxyDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/proxy/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * ProxyProvider Viewset
     */
    async providersProxyDestroy(requestParameters: ProvidersProxyDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.providersProxyDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * ProxyProvider Viewset
     */
    async providersProxyListRaw(requestParameters: ProvidersProxyListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedProxyProviderList>> {
        const queryParameters: any = {};

        if (requestParameters.applicationIsnull !== undefined) {
            queryParameters['application__isnull'] = requestParameters.applicationIsnull;
        }

        if (requestParameters.authorizationFlowSlugIexact !== undefined) {
            queryParameters['authorization_flow__slug__iexact'] = requestParameters.authorizationFlowSlugIexact;
        }

        if (requestParameters.basicAuthEnabledIexact !== undefined) {
            queryParameters['basic_auth_enabled__iexact'] = requestParameters.basicAuthEnabledIexact;
        }

        if (requestParameters.basicAuthPasswordAttributeIexact !== undefined) {
            queryParameters['basic_auth_password_attribute__iexact'] = requestParameters.basicAuthPasswordAttributeIexact;
        }

        if (requestParameters.basicAuthUserAttributeIexact !== undefined) {
            queryParameters['basic_auth_user_attribute__iexact'] = requestParameters.basicAuthUserAttributeIexact;
        }

        if (requestParameters.certificateKpUuidIexact !== undefined) {
            queryParameters['certificate__kp_uuid__iexact'] = requestParameters.certificateKpUuidIexact;
        }

        if (requestParameters.certificateNameIexact !== undefined) {
            queryParameters['certificate__name__iexact'] = requestParameters.certificateNameIexact;
        }

        if (requestParameters.cookieDomainIexact !== undefined) {
            queryParameters['cookie_domain__iexact'] = requestParameters.cookieDomainIexact;
        }

        if (requestParameters.externalHostIexact !== undefined) {
            queryParameters['external_host__iexact'] = requestParameters.externalHostIexact;
        }

        if (requestParameters.internalHostIexact !== undefined) {
            queryParameters['internal_host__iexact'] = requestParameters.internalHostIexact;
        }

        if (requestParameters.internalHostSslValidationIexact !== undefined) {
            queryParameters['internal_host_ssl_validation__iexact'] = requestParameters.internalHostSslValidationIexact;
        }

        if (requestParameters.modeIexact !== undefined) {
            queryParameters['mode__iexact'] = requestParameters.modeIexact;
        }

        if (requestParameters.nameIexact !== undefined) {
            queryParameters['name__iexact'] = requestParameters.nameIexact;
        }

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.propertyMappingsIexact) {
            queryParameters['property_mappings__iexact'] = requestParameters.propertyMappingsIexact;
        }

        if (requestParameters.redirectUrisIexact !== undefined) {
            queryParameters['redirect_uris__iexact'] = requestParameters.redirectUrisIexact;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.skipPathRegexIexact !== undefined) {
            queryParameters['skip_path_regex__iexact'] = requestParameters.skipPathRegexIexact;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/proxy/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedProxyProviderListFromJSON(jsonValue));
    }

    /**
     * ProxyProvider Viewset
     */
    async providersProxyList(requestParameters: ProvidersProxyListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedProxyProviderList> {
        const response = await this.providersProxyListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ProxyProvider Viewset
     */
    async providersProxyPartialUpdateRaw(requestParameters: ProvidersProxyPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProxyProvider>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling providersProxyPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/proxy/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedProxyProviderRequestToJSON(requestParameters.patchedProxyProviderRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProxyProviderFromJSON(jsonValue));
    }

    /**
     * ProxyProvider Viewset
     */
    async providersProxyPartialUpdate(requestParameters: ProvidersProxyPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProxyProvider> {
        const response = await this.providersProxyPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ProxyProvider Viewset
     */
    async providersProxyRetrieveRaw(requestParameters: ProvidersProxyRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProxyProvider>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling providersProxyRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/proxy/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProxyProviderFromJSON(jsonValue));
    }

    /**
     * ProxyProvider Viewset
     */
    async providersProxyRetrieve(requestParameters: ProvidersProxyRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProxyProvider> {
        const response = await this.providersProxyRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * ProxyProvider Viewset
     */
    async providersProxyUpdateRaw(requestParameters: ProvidersProxyUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ProxyProvider>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling providersProxyUpdate.');
        }

        if (requestParameters.proxyProviderRequest === null || requestParameters.proxyProviderRequest === undefined) {
            throw new runtime.RequiredError('proxyProviderRequest','Required parameter requestParameters.proxyProviderRequest was null or undefined when calling providersProxyUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/proxy/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ProxyProviderRequestToJSON(requestParameters.proxyProviderRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ProxyProviderFromJSON(jsonValue));
    }

    /**
     * ProxyProvider Viewset
     */
    async providersProxyUpdate(requestParameters: ProvidersProxyUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ProxyProvider> {
        const response = await this.providersProxyUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all objects that use this object
     */
    async providersProxyUsedByListRaw(requestParameters: ProvidersProxyUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UsedBy>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling providersProxyUsedByList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/proxy/{id}/used_by/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
    }

    /**
     * Get a list of all objects that use this object
     */
    async providersProxyUsedByList(requestParameters: ProvidersProxyUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UsedBy>> {
        const response = await this.providersProxyUsedByListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * RACProvider Viewset
     */
    async providersRacCreateRaw(requestParameters: ProvidersRacCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RACProvider>> {
        if (requestParameters.rACProviderRequest === null || requestParameters.rACProviderRequest === undefined) {
            throw new runtime.RequiredError('rACProviderRequest','Required parameter requestParameters.rACProviderRequest was null or undefined when calling providersRacCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/rac/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RACProviderRequestToJSON(requestParameters.rACProviderRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RACProviderFromJSON(jsonValue));
    }

    /**
     * RACProvider Viewset
     */
    async providersRacCreate(requestParameters: ProvidersRacCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RACProvider> {
        const response = await this.providersRacCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * RACProvider Viewset
     */
    async providersRacDestroyRaw(requestParameters: ProvidersRacDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling providersRacDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/rac/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * RACProvider Viewset
     */
    async providersRacDestroy(requestParameters: ProvidersRacDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.providersRacDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * RACProvider Viewset
     */
    async providersRacListRaw(requestParameters: ProvidersRacListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedRACProviderList>> {
        const queryParameters: any = {};

        if (requestParameters.applicationIsnull !== undefined) {
            queryParameters['application__isnull'] = requestParameters.applicationIsnull;
        }

        if (requestParameters.nameIexact !== undefined) {
            queryParameters['name__iexact'] = requestParameters.nameIexact;
        }

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/rac/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedRACProviderListFromJSON(jsonValue));
    }

    /**
     * RACProvider Viewset
     */
    async providersRacList(requestParameters: ProvidersRacListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedRACProviderList> {
        const response = await this.providersRacListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * RACProvider Viewset
     */
    async providersRacPartialUpdateRaw(requestParameters: ProvidersRacPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RACProvider>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling providersRacPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/rac/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedRACProviderRequestToJSON(requestParameters.patchedRACProviderRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RACProviderFromJSON(jsonValue));
    }

    /**
     * RACProvider Viewset
     */
    async providersRacPartialUpdate(requestParameters: ProvidersRacPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RACProvider> {
        const response = await this.providersRacPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * RACProvider Viewset
     */
    async providersRacRetrieveRaw(requestParameters: ProvidersRacRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RACProvider>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling providersRacRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/rac/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RACProviderFromJSON(jsonValue));
    }

    /**
     * RACProvider Viewset
     */
    async providersRacRetrieve(requestParameters: ProvidersRacRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RACProvider> {
        const response = await this.providersRacRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * RACProvider Viewset
     */
    async providersRacUpdateRaw(requestParameters: ProvidersRacUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RACProvider>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling providersRacUpdate.');
        }

        if (requestParameters.rACProviderRequest === null || requestParameters.rACProviderRequest === undefined) {
            throw new runtime.RequiredError('rACProviderRequest','Required parameter requestParameters.rACProviderRequest was null or undefined when calling providersRacUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/rac/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RACProviderRequestToJSON(requestParameters.rACProviderRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RACProviderFromJSON(jsonValue));
    }

    /**
     * RACProvider Viewset
     */
    async providersRacUpdate(requestParameters: ProvidersRacUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RACProvider> {
        const response = await this.providersRacUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all objects that use this object
     */
    async providersRacUsedByListRaw(requestParameters: ProvidersRacUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UsedBy>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling providersRacUsedByList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/rac/{id}/used_by/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
    }

    /**
     * Get a list of all objects that use this object
     */
    async providersRacUsedByList(requestParameters: ProvidersRacUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UsedBy>> {
        const response = await this.providersRacUsedByListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * RadiusProvider Viewset
     */
    async providersRadiusCreateRaw(requestParameters: ProvidersRadiusCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RadiusProvider>> {
        if (requestParameters.radiusProviderRequest === null || requestParameters.radiusProviderRequest === undefined) {
            throw new runtime.RequiredError('radiusProviderRequest','Required parameter requestParameters.radiusProviderRequest was null or undefined when calling providersRadiusCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/radius/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: RadiusProviderRequestToJSON(requestParameters.radiusProviderRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RadiusProviderFromJSON(jsonValue));
    }

    /**
     * RadiusProvider Viewset
     */
    async providersRadiusCreate(requestParameters: ProvidersRadiusCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RadiusProvider> {
        const response = await this.providersRadiusCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * RadiusProvider Viewset
     */
    async providersRadiusDestroyRaw(requestParameters: ProvidersRadiusDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling providersRadiusDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/radius/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * RadiusProvider Viewset
     */
    async providersRadiusDestroy(requestParameters: ProvidersRadiusDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.providersRadiusDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * RadiusProvider Viewset
     */
    async providersRadiusListRaw(requestParameters: ProvidersRadiusListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedRadiusProviderList>> {
        const queryParameters: any = {};

        if (requestParameters.applicationIsnull !== undefined) {
            queryParameters['application__isnull'] = requestParameters.applicationIsnull;
        }

        if (requestParameters.authorizationFlowSlugIexact !== undefined) {
            queryParameters['authorization_flow__slug__iexact'] = requestParameters.authorizationFlowSlugIexact;
        }

        if (requestParameters.clientNetworksIexact !== undefined) {
            queryParameters['client_networks__iexact'] = requestParameters.clientNetworksIexact;
        }

        if (requestParameters.nameIexact !== undefined) {
            queryParameters['name__iexact'] = requestParameters.nameIexact;
        }

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/radius/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedRadiusProviderListFromJSON(jsonValue));
    }

    /**
     * RadiusProvider Viewset
     */
    async providersRadiusList(requestParameters: ProvidersRadiusListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedRadiusProviderList> {
        const response = await this.providersRadiusListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * RadiusProvider Viewset
     */
    async providersRadiusPartialUpdateRaw(requestParameters: ProvidersRadiusPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RadiusProvider>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling providersRadiusPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/radius/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedRadiusProviderRequestToJSON(requestParameters.patchedRadiusProviderRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RadiusProviderFromJSON(jsonValue));
    }

    /**
     * RadiusProvider Viewset
     */
    async providersRadiusPartialUpdate(requestParameters: ProvidersRadiusPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RadiusProvider> {
        const response = await this.providersRadiusPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * RadiusProvider Viewset
     */
    async providersRadiusRetrieveRaw(requestParameters: ProvidersRadiusRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RadiusProvider>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling providersRadiusRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/radius/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RadiusProviderFromJSON(jsonValue));
    }

    /**
     * RadiusProvider Viewset
     */
    async providersRadiusRetrieve(requestParameters: ProvidersRadiusRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RadiusProvider> {
        const response = await this.providersRadiusRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * RadiusProvider Viewset
     */
    async providersRadiusUpdateRaw(requestParameters: ProvidersRadiusUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<RadiusProvider>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling providersRadiusUpdate.');
        }

        if (requestParameters.radiusProviderRequest === null || requestParameters.radiusProviderRequest === undefined) {
            throw new runtime.RequiredError('radiusProviderRequest','Required parameter requestParameters.radiusProviderRequest was null or undefined when calling providersRadiusUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/radius/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: RadiusProviderRequestToJSON(requestParameters.radiusProviderRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => RadiusProviderFromJSON(jsonValue));
    }

    /**
     * RadiusProvider Viewset
     */
    async providersRadiusUpdate(requestParameters: ProvidersRadiusUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<RadiusProvider> {
        const response = await this.providersRadiusUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all objects that use this object
     */
    async providersRadiusUsedByListRaw(requestParameters: ProvidersRadiusUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UsedBy>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling providersRadiusUsedByList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/radius/{id}/used_by/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
    }

    /**
     * Get a list of all objects that use this object
     */
    async providersRadiusUsedByList(requestParameters: ProvidersRadiusUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UsedBy>> {
        const response = await this.providersRadiusUsedByListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * SAMLProvider Viewset
     */
    async providersSamlCreateRaw(requestParameters: ProvidersSamlCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SAMLProvider>> {
        if (requestParameters.sAMLProviderRequest === null || requestParameters.sAMLProviderRequest === undefined) {
            throw new runtime.RequiredError('sAMLProviderRequest','Required parameter requestParameters.sAMLProviderRequest was null or undefined when calling providersSamlCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/saml/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SAMLProviderRequestToJSON(requestParameters.sAMLProviderRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SAMLProviderFromJSON(jsonValue));
    }

    /**
     * SAMLProvider Viewset
     */
    async providersSamlCreate(requestParameters: ProvidersSamlCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SAMLProvider> {
        const response = await this.providersSamlCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * SAMLProvider Viewset
     */
    async providersSamlDestroyRaw(requestParameters: ProvidersSamlDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling providersSamlDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/saml/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * SAMLProvider Viewset
     */
    async providersSamlDestroy(requestParameters: ProvidersSamlDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.providersSamlDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Create provider from SAML Metadata
     */
    async providersSamlImportMetadataCreateRaw(requestParameters: ProvidersSamlImportMetadataCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.name === null || requestParameters.name === undefined) {
            throw new runtime.RequiredError('name','Required parameter requestParameters.name was null or undefined when calling providersSamlImportMetadataCreate.');
        }

        if (requestParameters.authorizationFlow === null || requestParameters.authorizationFlow === undefined) {
            throw new runtime.RequiredError('authorizationFlow','Required parameter requestParameters.authorizationFlow was null or undefined when calling providersSamlImportMetadataCreate.');
        }

        if (requestParameters.file === null || requestParameters.file === undefined) {
            throw new runtime.RequiredError('file','Required parameter requestParameters.file was null or undefined when calling providersSamlImportMetadataCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const consumes: runtime.Consume[] = [
            { contentType: 'multipart/form-data' },
        ];
        // @ts-ignore: canConsumeForm may be unused
        const canConsumeForm = runtime.canConsumeForm(consumes);

        let formParams: { append(param: string, value: any): any };
        let useForm = false;
        // use FormData to transmit files using content-type "multipart/form-data"
        useForm = canConsumeForm;
        if (useForm) {
            formParams = new FormData();
        } else {
            formParams = new URLSearchParams();
        }

        if (requestParameters.name !== undefined) {
            formParams.append('name', requestParameters.name as any);
        }

        if (requestParameters.authorizationFlow !== undefined) {
            formParams.append('authorization_flow', requestParameters.authorizationFlow as any);
        }

        if (requestParameters.file !== undefined) {
            formParams.append('file', requestParameters.file as any);
        }

        const response = await this.request({
            path: `/providers/saml/import_metadata/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: formParams,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Create provider from SAML Metadata
     */
    async providersSamlImportMetadataCreate(requestParameters: ProvidersSamlImportMetadataCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.providersSamlImportMetadataCreateRaw(requestParameters, initOverrides);
    }

    /**
     * SAMLProvider Viewset
     */
    async providersSamlListRaw(requestParameters: ProvidersSamlListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedSAMLProviderList>> {
        const queryParameters: any = {};

        if (requestParameters.acsUrl !== undefined) {
            queryParameters['acs_url'] = requestParameters.acsUrl;
        }

        if (requestParameters.assertionValidNotBefore !== undefined) {
            queryParameters['assertion_valid_not_before'] = requestParameters.assertionValidNotBefore;
        }

        if (requestParameters.assertionValidNotOnOrAfter !== undefined) {
            queryParameters['assertion_valid_not_on_or_after'] = requestParameters.assertionValidNotOnOrAfter;
        }

        if (requestParameters.audience !== undefined) {
            queryParameters['audience'] = requestParameters.audience;
        }

        if (requestParameters.authenticationFlow !== undefined) {
            queryParameters['authentication_flow'] = requestParameters.authenticationFlow;
        }

        if (requestParameters.authorizationFlow !== undefined) {
            queryParameters['authorization_flow'] = requestParameters.authorizationFlow;
        }

        if (requestParameters.backchannelApplication !== undefined) {
            queryParameters['backchannel_application'] = requestParameters.backchannelApplication;
        }

        if (requestParameters.defaultRelayState !== undefined) {
            queryParameters['default_relay_state'] = requestParameters.defaultRelayState;
        }

        if (requestParameters.digestAlgorithm !== undefined) {
            queryParameters['digest_algorithm'] = requestParameters.digestAlgorithm;
        }

        if (requestParameters.isBackchannel !== undefined) {
            queryParameters['is_backchannel'] = requestParameters.isBackchannel;
        }

        if (requestParameters.issuer !== undefined) {
            queryParameters['issuer'] = requestParameters.issuer;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.nameIdMapping !== undefined) {
            queryParameters['name_id_mapping'] = requestParameters.nameIdMapping;
        }

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.propertyMappings) {
            queryParameters['property_mappings'] = requestParameters.propertyMappings;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.sessionValidNotOnOrAfter !== undefined) {
            queryParameters['session_valid_not_on_or_after'] = requestParameters.sessionValidNotOnOrAfter;
        }

        if (requestParameters.signatureAlgorithm !== undefined) {
            queryParameters['signature_algorithm'] = requestParameters.signatureAlgorithm;
        }

        if (requestParameters.signingKp !== undefined) {
            queryParameters['signing_kp'] = requestParameters.signingKp;
        }

        if (requestParameters.spBinding !== undefined) {
            queryParameters['sp_binding'] = requestParameters.spBinding;
        }

        if (requestParameters.verificationKp !== undefined) {
            queryParameters['verification_kp'] = requestParameters.verificationKp;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/saml/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedSAMLProviderListFromJSON(jsonValue));
    }

    /**
     * SAMLProvider Viewset
     */
    async providersSamlList(requestParameters: ProvidersSamlListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedSAMLProviderList> {
        const response = await this.providersSamlListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Return metadata as XML string
     */
    async providersSamlMetadataRetrieveRaw(requestParameters: ProvidersSamlMetadataRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SAMLMetadata>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling providersSamlMetadataRetrieve.');
        }

        const queryParameters: any = {};

        if (requestParameters.download !== undefined) {
            queryParameters['download'] = requestParameters.download;
        }

        if (requestParameters.forceBinding !== undefined) {
            queryParameters['force_binding'] = requestParameters.forceBinding;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/saml/{id}/metadata/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SAMLMetadataFromJSON(jsonValue));
    }

    /**
     * Return metadata as XML string
     */
    async providersSamlMetadataRetrieve(requestParameters: ProvidersSamlMetadataRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SAMLMetadata> {
        const response = await this.providersSamlMetadataRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * SAMLProvider Viewset
     */
    async providersSamlPartialUpdateRaw(requestParameters: ProvidersSamlPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SAMLProvider>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling providersSamlPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/saml/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedSAMLProviderRequestToJSON(requestParameters.patchedSAMLProviderRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SAMLProviderFromJSON(jsonValue));
    }

    /**
     * SAMLProvider Viewset
     */
    async providersSamlPartialUpdate(requestParameters: ProvidersSamlPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SAMLProvider> {
        const response = await this.providersSamlPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Preview user data for provider
     */
    async providersSamlPreviewUserRetrieveRaw(requestParameters: ProvidersSamlPreviewUserRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PropertyMappingPreview>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling providersSamlPreviewUserRetrieve.');
        }

        const queryParameters: any = {};

        if (requestParameters.forUser !== undefined) {
            queryParameters['for_user'] = requestParameters.forUser;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/saml/{id}/preview_user/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PropertyMappingPreviewFromJSON(jsonValue));
    }

    /**
     * Preview user data for provider
     */
    async providersSamlPreviewUserRetrieve(requestParameters: ProvidersSamlPreviewUserRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PropertyMappingPreview> {
        const response = await this.providersSamlPreviewUserRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * SAMLProvider Viewset
     */
    async providersSamlRetrieveRaw(requestParameters: ProvidersSamlRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SAMLProvider>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling providersSamlRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/saml/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SAMLProviderFromJSON(jsonValue));
    }

    /**
     * SAMLProvider Viewset
     */
    async providersSamlRetrieve(requestParameters: ProvidersSamlRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SAMLProvider> {
        const response = await this.providersSamlRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * SAMLProvider Viewset
     */
    async providersSamlUpdateRaw(requestParameters: ProvidersSamlUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SAMLProvider>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling providersSamlUpdate.');
        }

        if (requestParameters.sAMLProviderRequest === null || requestParameters.sAMLProviderRequest === undefined) {
            throw new runtime.RequiredError('sAMLProviderRequest','Required parameter requestParameters.sAMLProviderRequest was null or undefined when calling providersSamlUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/saml/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SAMLProviderRequestToJSON(requestParameters.sAMLProviderRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SAMLProviderFromJSON(jsonValue));
    }

    /**
     * SAMLProvider Viewset
     */
    async providersSamlUpdate(requestParameters: ProvidersSamlUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SAMLProvider> {
        const response = await this.providersSamlUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all objects that use this object
     */
    async providersSamlUsedByListRaw(requestParameters: ProvidersSamlUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UsedBy>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling providersSamlUsedByList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/saml/{id}/used_by/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
    }

    /**
     * Get a list of all objects that use this object
     */
    async providersSamlUsedByList(requestParameters: ProvidersSamlUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UsedBy>> {
        const response = await this.providersSamlUsedByListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * SCIMProvider Viewset
     */
    async providersScimCreateRaw(requestParameters: ProvidersScimCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SCIMProvider>> {
        if (requestParameters.sCIMProviderRequest === null || requestParameters.sCIMProviderRequest === undefined) {
            throw new runtime.RequiredError('sCIMProviderRequest','Required parameter requestParameters.sCIMProviderRequest was null or undefined when calling providersScimCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/scim/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: SCIMProviderRequestToJSON(requestParameters.sCIMProviderRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SCIMProviderFromJSON(jsonValue));
    }

    /**
     * SCIMProvider Viewset
     */
    async providersScimCreate(requestParameters: ProvidersScimCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SCIMProvider> {
        const response = await this.providersScimCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * SCIMProvider Viewset
     */
    async providersScimDestroyRaw(requestParameters: ProvidersScimDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling providersScimDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/scim/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * SCIMProvider Viewset
     */
    async providersScimDestroy(requestParameters: ProvidersScimDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.providersScimDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * SCIMProvider Viewset
     */
    async providersScimListRaw(requestParameters: ProvidersScimListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedSCIMProviderList>> {
        const queryParameters: any = {};

        if (requestParameters.excludeUsersServiceAccount !== undefined) {
            queryParameters['exclude_users_service_account'] = requestParameters.excludeUsersServiceAccount;
        }

        if (requestParameters.filterGroup !== undefined) {
            queryParameters['filter_group'] = requestParameters.filterGroup;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.url !== undefined) {
            queryParameters['url'] = requestParameters.url;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/scim/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedSCIMProviderListFromJSON(jsonValue));
    }

    /**
     * SCIMProvider Viewset
     */
    async providersScimList(requestParameters: ProvidersScimListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedSCIMProviderList> {
        const response = await this.providersScimListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * SCIMProvider Viewset
     */
    async providersScimPartialUpdateRaw(requestParameters: ProvidersScimPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SCIMProvider>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling providersScimPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/scim/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedSCIMProviderRequestToJSON(requestParameters.patchedSCIMProviderRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SCIMProviderFromJSON(jsonValue));
    }

    /**
     * SCIMProvider Viewset
     */
    async providersScimPartialUpdate(requestParameters: ProvidersScimPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SCIMProvider> {
        const response = await this.providersScimPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * SCIMProvider Viewset
     */
    async providersScimRetrieveRaw(requestParameters: ProvidersScimRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SCIMProvider>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling providersScimRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/scim/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SCIMProviderFromJSON(jsonValue));
    }

    /**
     * SCIMProvider Viewset
     */
    async providersScimRetrieve(requestParameters: ProvidersScimRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SCIMProvider> {
        const response = await this.providersScimRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get provider\'s sync status
     */
    async providersScimSyncStatusRetrieveRaw(requestParameters: ProvidersScimSyncStatusRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SCIMSyncStatus>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling providersScimSyncStatusRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/scim/{id}/sync_status/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SCIMSyncStatusFromJSON(jsonValue));
    }

    /**
     * Get provider\'s sync status
     */
    async providersScimSyncStatusRetrieve(requestParameters: ProvidersScimSyncStatusRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SCIMSyncStatus> {
        const response = await this.providersScimSyncStatusRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * SCIMProvider Viewset
     */
    async providersScimUpdateRaw(requestParameters: ProvidersScimUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<SCIMProvider>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling providersScimUpdate.');
        }

        if (requestParameters.sCIMProviderRequest === null || requestParameters.sCIMProviderRequest === undefined) {
            throw new runtime.RequiredError('sCIMProviderRequest','Required parameter requestParameters.sCIMProviderRequest was null or undefined when calling providersScimUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/scim/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: SCIMProviderRequestToJSON(requestParameters.sCIMProviderRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => SCIMProviderFromJSON(jsonValue));
    }

    /**
     * SCIMProvider Viewset
     */
    async providersScimUpdate(requestParameters: ProvidersScimUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<SCIMProvider> {
        const response = await this.providersScimUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all objects that use this object
     */
    async providersScimUsedByListRaw(requestParameters: ProvidersScimUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UsedBy>>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling providersScimUsedByList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/providers/scim/{id}/used_by/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
    }

    /**
     * Get a list of all objects that use this object
     */
    async providersScimUsedByList(requestParameters: ProvidersScimUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UsedBy>> {
        const response = await this.providersScimUsedByListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const ProvidersOauth2ListClientTypeEnum = {
    Confidential: 'confidential',
    Public: 'public',
    UnknownDefaultOpenApi: '11184809'
} as const;
export type ProvidersOauth2ListClientTypeEnum = typeof ProvidersOauth2ListClientTypeEnum[keyof typeof ProvidersOauth2ListClientTypeEnum];
/**
 * @export
 */
export const ProvidersOauth2ListIssuerModeEnum = {
    Global: 'global',
    PerProvider: 'per_provider',
    UnknownDefaultOpenApi: '11184809'
} as const;
export type ProvidersOauth2ListIssuerModeEnum = typeof ProvidersOauth2ListIssuerModeEnum[keyof typeof ProvidersOauth2ListIssuerModeEnum];
/**
 * @export
 */
export const ProvidersOauth2ListSubModeEnum = {
    HashedUserId: 'hashed_user_id',
    UserEmail: 'user_email',
    UserId: 'user_id',
    UserUpn: 'user_upn',
    UserUsername: 'user_username',
    UserUuid: 'user_uuid',
    UnknownDefaultOpenApi: '11184809'
} as const;
export type ProvidersOauth2ListSubModeEnum = typeof ProvidersOauth2ListSubModeEnum[keyof typeof ProvidersOauth2ListSubModeEnum];
/**
 * @export
 */
export const ProvidersSamlListDigestAlgorithmEnum = {
    _200009Xmldsigsha1: 'http://www.w3.org/2000/09/xmldsig#sha1',
    _200104XmldsigMoresha384: 'http://www.w3.org/2001/04/xmldsig-more#sha384',
    _200104Xmlencsha256: 'http://www.w3.org/2001/04/xmlenc#sha256',
    _200104Xmlencsha512: 'http://www.w3.org/2001/04/xmlenc#sha512',
    UnknownDefaultOpenApi: '11184809'
} as const;
export type ProvidersSamlListDigestAlgorithmEnum = typeof ProvidersSamlListDigestAlgorithmEnum[keyof typeof ProvidersSamlListDigestAlgorithmEnum];
/**
 * @export
 */
export const ProvidersSamlListSignatureAlgorithmEnum = {
    _200009XmldsigdsaSha1: 'http://www.w3.org/2000/09/xmldsig#dsa-sha1',
    _200009XmldsigrsaSha1: 'http://www.w3.org/2000/09/xmldsig#rsa-sha1',
    _200104XmldsigMorersaSha256: 'http://www.w3.org/2001/04/xmldsig-more#rsa-sha256',
    _200104XmldsigMorersaSha384: 'http://www.w3.org/2001/04/xmldsig-more#rsa-sha384',
    _200104XmldsigMorersaSha512: 'http://www.w3.org/2001/04/xmldsig-more#rsa-sha512',
    UnknownDefaultOpenApi: '11184809'
} as const;
export type ProvidersSamlListSignatureAlgorithmEnum = typeof ProvidersSamlListSignatureAlgorithmEnum[keyof typeof ProvidersSamlListSignatureAlgorithmEnum];
/**
 * @export
 */
export const ProvidersSamlListSpBindingEnum = {
    Post: 'post',
    Redirect: 'redirect',
    UnknownDefaultOpenApi: '11184809'
} as const;
export type ProvidersSamlListSpBindingEnum = typeof ProvidersSamlListSpBindingEnum[keyof typeof ProvidersSamlListSpBindingEnum];
/**
 * @export
 */
export const ProvidersSamlMetadataRetrieveForceBindingEnum = {
    Post: 'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-POST',
    Redirect: 'urn:oasis:names:tc:SAML:2.0:bindings:HTTP-Redirect',
    UnknownDefaultOpenApi: '11184809'
} as const;
export type ProvidersSamlMetadataRetrieveForceBindingEnum = typeof ProvidersSamlMetadataRetrieveForceBindingEnum[keyof typeof ProvidersSamlMetadataRetrieveForceBindingEnum];
