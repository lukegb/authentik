/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PolicyEngineMode } from './PolicyEngineMode';
import {
    PolicyEngineModeFromJSON,
    PolicyEngineModeFromJSONTyped,
    PolicyEngineModeToJSON,
} from './PolicyEngineMode';
import type { UserMatchingModeEnum } from './UserMatchingModeEnum';
import {
    UserMatchingModeEnumFromJSON,
    UserMatchingModeEnumFromJSONTyped,
    UserMatchingModeEnumToJSON,
} from './UserMatchingModeEnum';

/**
 * LDAP Source Serializer
 * @export
 * @interface PatchedLDAPSourceRequest
 */
export interface PatchedLDAPSourceRequest {
    /**
     * Source's display Name.
     * @type {string}
     * @memberof PatchedLDAPSourceRequest
     */
    name?: string;
    /**
     * Internal source name, used in URLs.
     * @type {string}
     * @memberof PatchedLDAPSourceRequest
     */
    slug?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedLDAPSourceRequest
     */
    enabled?: boolean;
    /**
     * Flow to use when authenticating existing users.
     * @type {string}
     * @memberof PatchedLDAPSourceRequest
     */
    authenticationFlow?: string | null;
    /**
     * Flow to use when enrolling new users.
     * @type {string}
     * @memberof PatchedLDAPSourceRequest
     */
    enrollmentFlow?: string | null;
    /**
     * 
     * @type {PolicyEngineMode}
     * @memberof PatchedLDAPSourceRequest
     */
    policyEngineMode?: PolicyEngineMode;
    /**
     * 
     * @type {UserMatchingModeEnum}
     * @memberof PatchedLDAPSourceRequest
     */
    userMatchingMode?: UserMatchingModeEnum;
    /**
     * 
     * @type {string}
     * @memberof PatchedLDAPSourceRequest
     */
    userPathTemplate?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedLDAPSourceRequest
     */
    serverUri?: string;
    /**
     * Optionally verify the LDAP Server's Certificate against the CA Chain in this keypair.
     * @type {string}
     * @memberof PatchedLDAPSourceRequest
     */
    peerCertificate?: string | null;
    /**
     * Client certificate to authenticate against the LDAP Server's Certificate.
     * @type {string}
     * @memberof PatchedLDAPSourceRequest
     */
    clientCertificate?: string | null;
    /**
     * 
     * @type {string}
     * @memberof PatchedLDAPSourceRequest
     */
    bindCn?: string;
    /**
     * 
     * @type {string}
     * @memberof PatchedLDAPSourceRequest
     */
    bindPassword?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedLDAPSourceRequest
     */
    startTls?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedLDAPSourceRequest
     */
    sni?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PatchedLDAPSourceRequest
     */
    baseDn?: string;
    /**
     * Prepended to Base DN for User-queries.
     * @type {string}
     * @memberof PatchedLDAPSourceRequest
     */
    additionalUserDn?: string;
    /**
     * Prepended to Base DN for Group-queries.
     * @type {string}
     * @memberof PatchedLDAPSourceRequest
     */
    additionalGroupDn?: string;
    /**
     * Consider Objects matching this filter to be Users.
     * @type {string}
     * @memberof PatchedLDAPSourceRequest
     */
    userObjectFilter?: string;
    /**
     * Consider Objects matching this filter to be Groups.
     * @type {string}
     * @memberof PatchedLDAPSourceRequest
     */
    groupObjectFilter?: string;
    /**
     * Field which contains members of a group.
     * @type {string}
     * @memberof PatchedLDAPSourceRequest
     */
    groupMembershipField?: string;
    /**
     * Field which contains a unique Identifier.
     * @type {string}
     * @memberof PatchedLDAPSourceRequest
     */
    objectUniquenessField?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedLDAPSourceRequest
     */
    syncUsers?: boolean;
    /**
     * When a user changes their password, sync it back to LDAP. This can only be enabled on a single LDAP source.
     * @type {boolean}
     * @memberof PatchedLDAPSourceRequest
     */
    syncUsersPassword?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedLDAPSourceRequest
     */
    syncGroups?: boolean;
    /**
     * 
     * @type {string}
     * @memberof PatchedLDAPSourceRequest
     */
    syncParentGroup?: string | null;
    /**
     * 
     * @type {Array<string>}
     * @memberof PatchedLDAPSourceRequest
     */
    propertyMappings?: Array<string>;
    /**
     * Property mappings used for group creation/updating.
     * @type {Array<string>}
     * @memberof PatchedLDAPSourceRequest
     */
    propertyMappingsGroup?: Array<string>;
}

/**
 * Check if a given object implements the PatchedLDAPSourceRequest interface.
 */
export function instanceOfPatchedLDAPSourceRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PatchedLDAPSourceRequestFromJSON(json: any): PatchedLDAPSourceRequest {
    return PatchedLDAPSourceRequestFromJSONTyped(json, false);
}

export function PatchedLDAPSourceRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PatchedLDAPSourceRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'slug': !exists(json, 'slug') ? undefined : json['slug'],
        'enabled': !exists(json, 'enabled') ? undefined : json['enabled'],
        'authenticationFlow': !exists(json, 'authentication_flow') ? undefined : json['authentication_flow'],
        'enrollmentFlow': !exists(json, 'enrollment_flow') ? undefined : json['enrollment_flow'],
        'policyEngineMode': !exists(json, 'policy_engine_mode') ? undefined : PolicyEngineModeFromJSON(json['policy_engine_mode']),
        'userMatchingMode': !exists(json, 'user_matching_mode') ? undefined : UserMatchingModeEnumFromJSON(json['user_matching_mode']),
        'userPathTemplate': !exists(json, 'user_path_template') ? undefined : json['user_path_template'],
        'serverUri': !exists(json, 'server_uri') ? undefined : json['server_uri'],
        'peerCertificate': !exists(json, 'peer_certificate') ? undefined : json['peer_certificate'],
        'clientCertificate': !exists(json, 'client_certificate') ? undefined : json['client_certificate'],
        'bindCn': !exists(json, 'bind_cn') ? undefined : json['bind_cn'],
        'bindPassword': !exists(json, 'bind_password') ? undefined : json['bind_password'],
        'startTls': !exists(json, 'start_tls') ? undefined : json['start_tls'],
        'sni': !exists(json, 'sni') ? undefined : json['sni'],
        'baseDn': !exists(json, 'base_dn') ? undefined : json['base_dn'],
        'additionalUserDn': !exists(json, 'additional_user_dn') ? undefined : json['additional_user_dn'],
        'additionalGroupDn': !exists(json, 'additional_group_dn') ? undefined : json['additional_group_dn'],
        'userObjectFilter': !exists(json, 'user_object_filter') ? undefined : json['user_object_filter'],
        'groupObjectFilter': !exists(json, 'group_object_filter') ? undefined : json['group_object_filter'],
        'groupMembershipField': !exists(json, 'group_membership_field') ? undefined : json['group_membership_field'],
        'objectUniquenessField': !exists(json, 'object_uniqueness_field') ? undefined : json['object_uniqueness_field'],
        'syncUsers': !exists(json, 'sync_users') ? undefined : json['sync_users'],
        'syncUsersPassword': !exists(json, 'sync_users_password') ? undefined : json['sync_users_password'],
        'syncGroups': !exists(json, 'sync_groups') ? undefined : json['sync_groups'],
        'syncParentGroup': !exists(json, 'sync_parent_group') ? undefined : json['sync_parent_group'],
        'propertyMappings': !exists(json, 'property_mappings') ? undefined : json['property_mappings'],
        'propertyMappingsGroup': !exists(json, 'property_mappings_group') ? undefined : json['property_mappings_group'],
    };
}

export function PatchedLDAPSourceRequestToJSON(value?: PatchedLDAPSourceRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'slug': value.slug,
        'enabled': value.enabled,
        'authentication_flow': value.authenticationFlow,
        'enrollment_flow': value.enrollmentFlow,
        'policy_engine_mode': PolicyEngineModeToJSON(value.policyEngineMode),
        'user_matching_mode': UserMatchingModeEnumToJSON(value.userMatchingMode),
        'user_path_template': value.userPathTemplate,
        'server_uri': value.serverUri,
        'peer_certificate': value.peerCertificate,
        'client_certificate': value.clientCertificate,
        'bind_cn': value.bindCn,
        'bind_password': value.bindPassword,
        'start_tls': value.startTls,
        'sni': value.sni,
        'base_dn': value.baseDn,
        'additional_user_dn': value.additionalUserDn,
        'additional_group_dn': value.additionalGroupDn,
        'user_object_filter': value.userObjectFilter,
        'group_object_filter': value.groupObjectFilter,
        'group_membership_field': value.groupMembershipField,
        'object_uniqueness_field': value.objectUniquenessField,
        'sync_users': value.syncUsers,
        'sync_users_password': value.syncUsersPassword,
        'sync_groups': value.syncGroups,
        'sync_parent_group': value.syncParentGroup,
        'property_mappings': value.propertyMappings,
        'property_mappings_group': value.propertyMappingsGroup,
    };
}

