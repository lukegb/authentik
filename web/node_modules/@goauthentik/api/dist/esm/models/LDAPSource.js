/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
import { exists } from '../runtime';
import { PolicyEngineModeFromJSON, PolicyEngineModeToJSON, } from './PolicyEngineMode';
import { UserMatchingModeEnumFromJSON, UserMatchingModeEnumToJSON, } from './UserMatchingModeEnum';
/**
 * Check if a given object implements the LDAPSource interface.
 */
export function instanceOfLDAPSource(value) {
    let isInstance = true;
    isInstance = isInstance && "pk" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "slug" in value;
    isInstance = isInstance && "component" in value;
    isInstance = isInstance && "verboseName" in value;
    isInstance = isInstance && "verboseNamePlural" in value;
    isInstance = isInstance && "metaModelName" in value;
    isInstance = isInstance && "managed" in value;
    isInstance = isInstance && "icon" in value;
    isInstance = isInstance && "serverUri" in value;
    isInstance = isInstance && "baseDn" in value;
    isInstance = isInstance && "connectivity" in value;
    return isInstance;
}
export function LDAPSourceFromJSON(json) {
    return LDAPSourceFromJSONTyped(json, false);
}
export function LDAPSourceFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'pk': json['pk'],
        'name': json['name'],
        'slug': json['slug'],
        'enabled': !exists(json, 'enabled') ? undefined : json['enabled'],
        'authenticationFlow': !exists(json, 'authentication_flow') ? undefined : json['authentication_flow'],
        'enrollmentFlow': !exists(json, 'enrollment_flow') ? undefined : json['enrollment_flow'],
        'component': json['component'],
        'verboseName': json['verbose_name'],
        'verboseNamePlural': json['verbose_name_plural'],
        'metaModelName': json['meta_model_name'],
        'policyEngineMode': !exists(json, 'policy_engine_mode') ? undefined : PolicyEngineModeFromJSON(json['policy_engine_mode']),
        'userMatchingMode': !exists(json, 'user_matching_mode') ? undefined : UserMatchingModeEnumFromJSON(json['user_matching_mode']),
        'managed': json['managed'],
        'userPathTemplate': !exists(json, 'user_path_template') ? undefined : json['user_path_template'],
        'icon': json['icon'],
        'serverUri': json['server_uri'],
        'peerCertificate': !exists(json, 'peer_certificate') ? undefined : json['peer_certificate'],
        'clientCertificate': !exists(json, 'client_certificate') ? undefined : json['client_certificate'],
        'bindCn': !exists(json, 'bind_cn') ? undefined : json['bind_cn'],
        'startTls': !exists(json, 'start_tls') ? undefined : json['start_tls'],
        'sni': !exists(json, 'sni') ? undefined : json['sni'],
        'baseDn': json['base_dn'],
        'additionalUserDn': !exists(json, 'additional_user_dn') ? undefined : json['additional_user_dn'],
        'additionalGroupDn': !exists(json, 'additional_group_dn') ? undefined : json['additional_group_dn'],
        'userObjectFilter': !exists(json, 'user_object_filter') ? undefined : json['user_object_filter'],
        'groupObjectFilter': !exists(json, 'group_object_filter') ? undefined : json['group_object_filter'],
        'groupMembershipField': !exists(json, 'group_membership_field') ? undefined : json['group_membership_field'],
        'objectUniquenessField': !exists(json, 'object_uniqueness_field') ? undefined : json['object_uniqueness_field'],
        'syncUsers': !exists(json, 'sync_users') ? undefined : json['sync_users'],
        'syncUsersPassword': !exists(json, 'sync_users_password') ? undefined : json['sync_users_password'],
        'syncGroups': !exists(json, 'sync_groups') ? undefined : json['sync_groups'],
        'syncParentGroup': !exists(json, 'sync_parent_group') ? undefined : json['sync_parent_group'],
        'propertyMappings': !exists(json, 'property_mappings') ? undefined : json['property_mappings'],
        'propertyMappingsGroup': !exists(json, 'property_mappings_group') ? undefined : json['property_mappings_group'],
        'connectivity': json['connectivity'],
    };
}
export function LDAPSourceToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'name': value.name,
        'slug': value.slug,
        'enabled': value.enabled,
        'authentication_flow': value.authenticationFlow,
        'enrollment_flow': value.enrollmentFlow,
        'policy_engine_mode': PolicyEngineModeToJSON(value.policyEngineMode),
        'user_matching_mode': UserMatchingModeEnumToJSON(value.userMatchingMode),
        'user_path_template': value.userPathTemplate,
        'server_uri': value.serverUri,
        'peer_certificate': value.peerCertificate,
        'client_certificate': value.clientCertificate,
        'bind_cn': value.bindCn,
        'start_tls': value.startTls,
        'sni': value.sni,
        'base_dn': value.baseDn,
        'additional_user_dn': value.additionalUserDn,
        'additional_group_dn': value.additionalGroupDn,
        'user_object_filter': value.userObjectFilter,
        'group_object_filter': value.groupObjectFilter,
        'group_membership_field': value.groupMembershipField,
        'object_uniqueness_field': value.objectUniquenessField,
        'sync_users': value.syncUsers,
        'sync_users_password': value.syncUsersPassword,
        'sync_groups': value.syncGroups,
        'sync_parent_group': value.syncParentGroup,
        'property_mappings': value.propertyMappings,
        'property_mappings_group': value.propertyMappingsGroup,
    };
}
