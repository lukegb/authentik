/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * Simplified Group Serializer for user's groups
 * @export
 * @interface UserGroup
 */
export interface UserGroup {
    /**
     * 
     * @type {string}
     * @memberof UserGroup
     */
    readonly pk: string;
    /**
     * Get a numerical, int32 ID for the group
     * @type {number}
     * @memberof UserGroup
     */
    readonly numPk: number;
    /**
     * 
     * @type {string}
     * @memberof UserGroup
     */
    name: string;
    /**
     * Users added to this group will be superusers.
     * @type {boolean}
     * @memberof UserGroup
     */
    isSuperuser?: boolean;
    /**
     * 
     * @type {string}
     * @memberof UserGroup
     */
    parent?: string | null;
    /**
     * 
     * @type {string}
     * @memberof UserGroup
     */
    readonly parentName: string;
    /**
     * 
     * @type {{ [key: string]: any; }}
     * @memberof UserGroup
     */
    attributes?: { [key: string]: any; };
}

/**
 * Check if a given object implements the UserGroup interface.
 */
export function instanceOfUserGroup(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "pk" in value;
    isInstance = isInstance && "numPk" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "parentName" in value;

    return isInstance;
}

export function UserGroupFromJSON(json: any): UserGroup {
    return UserGroupFromJSONTyped(json, false);
}

export function UserGroupFromJSONTyped(json: any, ignoreDiscriminator: boolean): UserGroup {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'pk': json['pk'],
        'numPk': json['num_pk'],
        'name': json['name'],
        'isSuperuser': !exists(json, 'is_superuser') ? undefined : json['is_superuser'],
        'parent': !exists(json, 'parent') ? undefined : json['parent'],
        'parentName': json['parent_name'],
        'attributes': !exists(json, 'attributes') ? undefined : json['attributes'],
    };
}

export function UserGroupToJSON(value?: UserGroup | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'is_superuser': value.isSuperuser,
        'parent': value.parent,
        'attributes': value.attributes,
    };
}

