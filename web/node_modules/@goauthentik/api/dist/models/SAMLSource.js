"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.SAMLSourceToJSON = exports.SAMLSourceFromJSONTyped = exports.SAMLSourceFromJSON = exports.instanceOfSAMLSource = void 0;
const runtime_1 = require("../runtime");
const BindingTypeEnum_1 = require("./BindingTypeEnum");
const DigestAlgorithmEnum_1 = require("./DigestAlgorithmEnum");
const NameIdPolicyEnum_1 = require("./NameIdPolicyEnum");
const PolicyEngineMode_1 = require("./PolicyEngineMode");
const SignatureAlgorithmEnum_1 = require("./SignatureAlgorithmEnum");
const UserMatchingModeEnum_1 = require("./UserMatchingModeEnum");
/**
 * Check if a given object implements the SAMLSource interface.
 */
function instanceOfSAMLSource(value) {
    let isInstance = true;
    isInstance = isInstance && "pk" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "slug" in value;
    isInstance = isInstance && "component" in value;
    isInstance = isInstance && "verboseName" in value;
    isInstance = isInstance && "verboseNamePlural" in value;
    isInstance = isInstance && "metaModelName" in value;
    isInstance = isInstance && "managed" in value;
    isInstance = isInstance && "icon" in value;
    isInstance = isInstance && "preAuthenticationFlow" in value;
    isInstance = isInstance && "ssoUrl" in value;
    return isInstance;
}
exports.instanceOfSAMLSource = instanceOfSAMLSource;
function SAMLSourceFromJSON(json) {
    return SAMLSourceFromJSONTyped(json, false);
}
exports.SAMLSourceFromJSON = SAMLSourceFromJSON;
function SAMLSourceFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'pk': json['pk'],
        'name': json['name'],
        'slug': json['slug'],
        'enabled': !(0, runtime_1.exists)(json, 'enabled') ? undefined : json['enabled'],
        'authenticationFlow': !(0, runtime_1.exists)(json, 'authentication_flow') ? undefined : json['authentication_flow'],
        'enrollmentFlow': !(0, runtime_1.exists)(json, 'enrollment_flow') ? undefined : json['enrollment_flow'],
        'component': json['component'],
        'verboseName': json['verbose_name'],
        'verboseNamePlural': json['verbose_name_plural'],
        'metaModelName': json['meta_model_name'],
        'policyEngineMode': !(0, runtime_1.exists)(json, 'policy_engine_mode') ? undefined : (0, PolicyEngineMode_1.PolicyEngineModeFromJSON)(json['policy_engine_mode']),
        'userMatchingMode': !(0, runtime_1.exists)(json, 'user_matching_mode') ? undefined : (0, UserMatchingModeEnum_1.UserMatchingModeEnumFromJSON)(json['user_matching_mode']),
        'managed': json['managed'],
        'userPathTemplate': !(0, runtime_1.exists)(json, 'user_path_template') ? undefined : json['user_path_template'],
        'icon': json['icon'],
        'preAuthenticationFlow': json['pre_authentication_flow'],
        'issuer': !(0, runtime_1.exists)(json, 'issuer') ? undefined : json['issuer'],
        'ssoUrl': json['sso_url'],
        'sloUrl': !(0, runtime_1.exists)(json, 'slo_url') ? undefined : json['slo_url'],
        'allowIdpInitiated': !(0, runtime_1.exists)(json, 'allow_idp_initiated') ? undefined : json['allow_idp_initiated'],
        'nameIdPolicy': !(0, runtime_1.exists)(json, 'name_id_policy') ? undefined : (0, NameIdPolicyEnum_1.NameIdPolicyEnumFromJSON)(json['name_id_policy']),
        'bindingType': !(0, runtime_1.exists)(json, 'binding_type') ? undefined : (0, BindingTypeEnum_1.BindingTypeEnumFromJSON)(json['binding_type']),
        'verificationKp': !(0, runtime_1.exists)(json, 'verification_kp') ? undefined : json['verification_kp'],
        'signingKp': !(0, runtime_1.exists)(json, 'signing_kp') ? undefined : json['signing_kp'],
        'digestAlgorithm': !(0, runtime_1.exists)(json, 'digest_algorithm') ? undefined : (0, DigestAlgorithmEnum_1.DigestAlgorithmEnumFromJSON)(json['digest_algorithm']),
        'signatureAlgorithm': !(0, runtime_1.exists)(json, 'signature_algorithm') ? undefined : (0, SignatureAlgorithmEnum_1.SignatureAlgorithmEnumFromJSON)(json['signature_algorithm']),
        'temporaryUserDeleteAfter': !(0, runtime_1.exists)(json, 'temporary_user_delete_after') ? undefined : json['temporary_user_delete_after'],
    };
}
exports.SAMLSourceFromJSONTyped = SAMLSourceFromJSONTyped;
function SAMLSourceToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'name': value.name,
        'slug': value.slug,
        'enabled': value.enabled,
        'authentication_flow': value.authenticationFlow,
        'enrollment_flow': value.enrollmentFlow,
        'policy_engine_mode': (0, PolicyEngineMode_1.PolicyEngineModeToJSON)(value.policyEngineMode),
        'user_matching_mode': (0, UserMatchingModeEnum_1.UserMatchingModeEnumToJSON)(value.userMatchingMode),
        'user_path_template': value.userPathTemplate,
        'pre_authentication_flow': value.preAuthenticationFlow,
        'issuer': value.issuer,
        'sso_url': value.ssoUrl,
        'slo_url': value.sloUrl,
        'allow_idp_initiated': value.allowIdpInitiated,
        'name_id_policy': (0, NameIdPolicyEnum_1.NameIdPolicyEnumToJSON)(value.nameIdPolicy),
        'binding_type': (0, BindingTypeEnum_1.BindingTypeEnumToJSON)(value.bindingType),
        'verification_kp': value.verificationKp,
        'signing_kp': value.signingKp,
        'digest_algorithm': (0, DigestAlgorithmEnum_1.DigestAlgorithmEnumToJSON)(value.digestAlgorithm),
        'signature_algorithm': (0, SignatureAlgorithmEnum_1.SignatureAlgorithmEnumToJSON)(value.signatureAlgorithm),
        'temporary_user_delete_after': value.temporaryUserDeleteAfter,
    };
}
exports.SAMLSourceToJSON = SAMLSourceToJSON;
