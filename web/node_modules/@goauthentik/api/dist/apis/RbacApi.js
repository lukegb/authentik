"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.RbacPermissionsAssignedByUsersListModelEnum = exports.RbacPermissionsAssignedByRolesListModelEnum = exports.RbacApi = void 0;
const runtime = require("../runtime");
const models_1 = require("../models");
/**
 *
 */
class RbacApi extends runtime.BaseAPI {
    /**
     * Assign permission(s) to role. When `object_pk` is set, the permissions are only assigned to the specific object, otherwise they are assigned globally.
     */
    rbacPermissionsAssignedByRolesAssignCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
                throw new runtime.RequiredError('uuid', 'Required parameter requestParameters.uuid was null or undefined when calling rbacPermissionsAssignedByRolesAssignCreate.');
            }
            if (requestParameters.permissionAssignRequest === null || requestParameters.permissionAssignRequest === undefined) {
                throw new runtime.RequiredError('permissionAssignRequest', 'Required parameter requestParameters.permissionAssignRequest was null or undefined when calling rbacPermissionsAssignedByRolesAssignCreate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/rbac/permissions/assigned_by_roles/{uuid}/assign/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PermissionAssignRequestToJSON)(requestParameters.permissionAssignRequest),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Assign permission(s) to role. When `object_pk` is set, the permissions are only assigned to the specific object, otherwise they are assigned globally.
     */
    rbacPermissionsAssignedByRolesAssignCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.rbacPermissionsAssignedByRolesAssignCreateRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Get assigned object permissions for a single object
     */
    rbacPermissionsAssignedByRolesListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.model === null || requestParameters.model === undefined) {
                throw new runtime.RequiredError('model', 'Required parameter requestParameters.model was null or undefined when calling rbacPermissionsAssignedByRolesList.');
            }
            const queryParameters = {};
            if (requestParameters.model !== undefined) {
                queryParameters['model'] = requestParameters.model;
            }
            if (requestParameters.objectPk !== undefined) {
                queryParameters['object_pk'] = requestParameters.objectPk;
            }
            if (requestParameters.ordering !== undefined) {
                queryParameters['ordering'] = requestParameters.ordering;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.pageSize !== undefined) {
                queryParameters['page_size'] = requestParameters.pageSize;
            }
            if (requestParameters.search !== undefined) {
                queryParameters['search'] = requestParameters.search;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/rbac/permissions/assigned_by_roles/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PaginatedRoleAssignedObjectPermissionListFromJSON)(jsonValue));
        });
    }
    /**
     * Get assigned object permissions for a single object
     */
    rbacPermissionsAssignedByRolesList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.rbacPermissionsAssignedByRolesListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Unassign permission(s) to role. When `object_pk` is set, the permissions are only assigned to the specific object, otherwise they are assigned globally.
     */
    rbacPermissionsAssignedByRolesUnassignPartialUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
                throw new runtime.RequiredError('uuid', 'Required parameter requestParameters.uuid was null or undefined when calling rbacPermissionsAssignedByRolesUnassignPartialUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/rbac/permissions/assigned_by_roles/{uuid}/unassign/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PatchedPermissionAssignRequestToJSON)(requestParameters.patchedPermissionAssignRequest),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Unassign permission(s) to role. When `object_pk` is set, the permissions are only assigned to the specific object, otherwise they are assigned globally.
     */
    rbacPermissionsAssignedByRolesUnassignPartialUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.rbacPermissionsAssignedByRolesUnassignPartialUpdateRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Assign permission(s) to user
     */
    rbacPermissionsAssignedByUsersAssignCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling rbacPermissionsAssignedByUsersAssignCreate.');
            }
            if (requestParameters.permissionAssignRequest === null || requestParameters.permissionAssignRequest === undefined) {
                throw new runtime.RequiredError('permissionAssignRequest', 'Required parameter requestParameters.permissionAssignRequest was null or undefined when calling rbacPermissionsAssignedByUsersAssignCreate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/rbac/permissions/assigned_by_users/{id}/assign/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PermissionAssignRequestToJSON)(requestParameters.permissionAssignRequest),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Assign permission(s) to user
     */
    rbacPermissionsAssignedByUsersAssignCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.rbacPermissionsAssignedByUsersAssignCreateRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Get assigned object permissions for a single object
     */
    rbacPermissionsAssignedByUsersListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.model === null || requestParameters.model === undefined) {
                throw new runtime.RequiredError('model', 'Required parameter requestParameters.model was null or undefined when calling rbacPermissionsAssignedByUsersList.');
            }
            const queryParameters = {};
            if (requestParameters.model !== undefined) {
                queryParameters['model'] = requestParameters.model;
            }
            if (requestParameters.objectPk !== undefined) {
                queryParameters['object_pk'] = requestParameters.objectPk;
            }
            if (requestParameters.ordering !== undefined) {
                queryParameters['ordering'] = requestParameters.ordering;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.pageSize !== undefined) {
                queryParameters['page_size'] = requestParameters.pageSize;
            }
            if (requestParameters.search !== undefined) {
                queryParameters['search'] = requestParameters.search;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/rbac/permissions/assigned_by_users/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PaginatedUserAssignedObjectPermissionListFromJSON)(jsonValue));
        });
    }
    /**
     * Get assigned object permissions for a single object
     */
    rbacPermissionsAssignedByUsersList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.rbacPermissionsAssignedByUsersListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Unassign permission(s) to user. When `object_pk` is set, the permissions are only assigned to the specific object, otherwise they are assigned globally.
     */
    rbacPermissionsAssignedByUsersUnassignPartialUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling rbacPermissionsAssignedByUsersUnassignPartialUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/rbac/permissions/assigned_by_users/{id}/unassign/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PatchedPermissionAssignRequestToJSON)(requestParameters.patchedPermissionAssignRequest),
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Unassign permission(s) to user. When `object_pk` is set, the permissions are only assigned to the specific object, otherwise they are assigned globally.
     */
    rbacPermissionsAssignedByUsersUnassignPartialUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.rbacPermissionsAssignedByUsersUnassignPartialUpdateRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Read-only list of all permissions, filterable by model and app
     */
    rbacPermissionsListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.codename !== undefined) {
                queryParameters['codename'] = requestParameters.codename;
            }
            if (requestParameters.contentTypeAppLabel !== undefined) {
                queryParameters['content_type__app_label'] = requestParameters.contentTypeAppLabel;
            }
            if (requestParameters.contentTypeModel !== undefined) {
                queryParameters['content_type__model'] = requestParameters.contentTypeModel;
            }
            if (requestParameters.ordering !== undefined) {
                queryParameters['ordering'] = requestParameters.ordering;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.pageSize !== undefined) {
                queryParameters['page_size'] = requestParameters.pageSize;
            }
            if (requestParameters.role !== undefined) {
                queryParameters['role'] = requestParameters.role;
            }
            if (requestParameters.search !== undefined) {
                queryParameters['search'] = requestParameters.search;
            }
            if (requestParameters.user !== undefined) {
                queryParameters['user'] = requestParameters.user;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/rbac/permissions/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PaginatedPermissionListFromJSON)(jsonValue));
        });
    }
    /**
     * Read-only list of all permissions, filterable by model and app
     */
    rbacPermissionsList(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.rbacPermissionsListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Read-only list of all permissions, filterable by model and app
     */
    rbacPermissionsRetrieveRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.id === null || requestParameters.id === undefined) {
                throw new runtime.RequiredError('id', 'Required parameter requestParameters.id was null or undefined when calling rbacPermissionsRetrieve.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/rbac/permissions/{id}/`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PermissionFromJSON)(jsonValue));
        });
    }
    /**
     * Read-only list of all permissions, filterable by model and app
     */
    rbacPermissionsRetrieve(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.rbacPermissionsRetrieveRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a role\'s assigned object permissions
     */
    rbacPermissionsRolesListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
                throw new runtime.RequiredError('uuid', 'Required parameter requestParameters.uuid was null or undefined when calling rbacPermissionsRolesList.');
            }
            const queryParameters = {};
            if (requestParameters.ordering !== undefined) {
                queryParameters['ordering'] = requestParameters.ordering;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.pageSize !== undefined) {
                queryParameters['page_size'] = requestParameters.pageSize;
            }
            if (requestParameters.search !== undefined) {
                queryParameters['search'] = requestParameters.search;
            }
            if (requestParameters.uuid !== undefined) {
                queryParameters['uuid'] = requestParameters.uuid;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/rbac/permissions/roles/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PaginatedExtraRoleObjectPermissionListFromJSON)(jsonValue));
        });
    }
    /**
     * Get a role\'s assigned object permissions
     */
    rbacPermissionsRolesList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.rbacPermissionsRolesListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a users\'s assigned object permissions
     */
    rbacPermissionsUsersListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.userId === null || requestParameters.userId === undefined) {
                throw new runtime.RequiredError('userId', 'Required parameter requestParameters.userId was null or undefined when calling rbacPermissionsUsersList.');
            }
            const queryParameters = {};
            if (requestParameters.ordering !== undefined) {
                queryParameters['ordering'] = requestParameters.ordering;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.pageSize !== undefined) {
                queryParameters['page_size'] = requestParameters.pageSize;
            }
            if (requestParameters.search !== undefined) {
                queryParameters['search'] = requestParameters.search;
            }
            if (requestParameters.userId !== undefined) {
                queryParameters['user_id'] = requestParameters.userId;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/rbac/permissions/users/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PaginatedExtraUserObjectPermissionListFromJSON)(jsonValue));
        });
    }
    /**
     * Get a users\'s assigned object permissions
     */
    rbacPermissionsUsersList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.rbacPermissionsUsersListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Role viewset
     */
    rbacRolesCreateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.roleRequest === null || requestParameters.roleRequest === undefined) {
                throw new runtime.RequiredError('roleRequest', 'Required parameter requestParameters.roleRequest was null or undefined when calling rbacRolesCreate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/rbac/roles/`,
                method: 'POST',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.RoleRequestToJSON)(requestParameters.roleRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.RoleFromJSON)(jsonValue));
        });
    }
    /**
     * Role viewset
     */
    rbacRolesCreate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.rbacRolesCreateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Role viewset
     */
    rbacRolesDestroyRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
                throw new runtime.RequiredError('uuid', 'Required parameter requestParameters.uuid was null or undefined when calling rbacRolesDestroy.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/rbac/roles/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
                method: 'DELETE',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.VoidApiResponse(response);
        });
    }
    /**
     * Role viewset
     */
    rbacRolesDestroy(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            yield this.rbacRolesDestroyRaw(requestParameters, initOverrides);
        });
    }
    /**
     * Role viewset
     */
    rbacRolesListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const queryParameters = {};
            if (requestParameters.groupName !== undefined) {
                queryParameters['group__name'] = requestParameters.groupName;
            }
            if (requestParameters.ordering !== undefined) {
                queryParameters['ordering'] = requestParameters.ordering;
            }
            if (requestParameters.page !== undefined) {
                queryParameters['page'] = requestParameters.page;
            }
            if (requestParameters.pageSize !== undefined) {
                queryParameters['page_size'] = requestParameters.pageSize;
            }
            if (requestParameters.search !== undefined) {
                queryParameters['search'] = requestParameters.search;
            }
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/rbac/roles/`,
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.PaginatedRoleListFromJSON)(jsonValue));
        });
    }
    /**
     * Role viewset
     */
    rbacRolesList(requestParameters = {}, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.rbacRolesListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Role viewset
     */
    rbacRolesPartialUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
                throw new runtime.RequiredError('uuid', 'Required parameter requestParameters.uuid was null or undefined when calling rbacRolesPartialUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/rbac/roles/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
                method: 'PATCH',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.PatchedRoleRequestToJSON)(requestParameters.patchedRoleRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.RoleFromJSON)(jsonValue));
        });
    }
    /**
     * Role viewset
     */
    rbacRolesPartialUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.rbacRolesPartialUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Role viewset
     */
    rbacRolesRetrieveRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
                throw new runtime.RequiredError('uuid', 'Required parameter requestParameters.uuid was null or undefined when calling rbacRolesRetrieve.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/rbac/roles/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.RoleFromJSON)(jsonValue));
        });
    }
    /**
     * Role viewset
     */
    rbacRolesRetrieve(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.rbacRolesRetrieveRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Role viewset
     */
    rbacRolesUpdateRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
                throw new runtime.RequiredError('uuid', 'Required parameter requestParameters.uuid was null or undefined when calling rbacRolesUpdate.');
            }
            if (requestParameters.roleRequest === null || requestParameters.roleRequest === undefined) {
                throw new runtime.RequiredError('roleRequest', 'Required parameter requestParameters.roleRequest was null or undefined when calling rbacRolesUpdate.');
            }
            const queryParameters = {};
            const headerParameters = {};
            headerParameters['Content-Type'] = 'application/json';
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/rbac/roles/{uuid}/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
                method: 'PUT',
                headers: headerParameters,
                query: queryParameters,
                body: (0, models_1.RoleRequestToJSON)(requestParameters.roleRequest),
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => (0, models_1.RoleFromJSON)(jsonValue));
        });
    }
    /**
     * Role viewset
     */
    rbacRolesUpdate(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.rbacRolesUpdateRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
    /**
     * Get a list of all objects that use this object
     */
    rbacRolesUsedByListRaw(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            if (requestParameters.uuid === null || requestParameters.uuid === undefined) {
                throw new runtime.RequiredError('uuid', 'Required parameter requestParameters.uuid was null or undefined when calling rbacRolesUsedByList.');
            }
            const queryParameters = {};
            const headerParameters = {};
            if (this.configuration && this.configuration.apiKey) {
                headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
            }
            const response = yield this.request({
                path: `/rbac/roles/{uuid}/used_by/`.replace(`{${"uuid"}}`, encodeURIComponent(String(requestParameters.uuid))),
                method: 'GET',
                headers: headerParameters,
                query: queryParameters,
            }, initOverrides);
            return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(models_1.UsedByFromJSON));
        });
    }
    /**
     * Get a list of all objects that use this object
     */
    rbacRolesUsedByList(requestParameters, initOverrides) {
        return __awaiter(this, void 0, void 0, function* () {
            const response = yield this.rbacRolesUsedByListRaw(requestParameters, initOverrides);
            return yield response.value();
        });
    }
}
exports.RbacApi = RbacApi;
/**
 * @export
 */
exports.RbacPermissionsAssignedByRolesListModelEnum = {
    BlueprintsBlueprintinstance: 'authentik_blueprints.blueprintinstance',
    BrandsBrand: 'authentik_brands.brand',
    CoreApplication: 'authentik_core.application',
    CoreGroup: 'authentik_core.group',
    CoreToken: 'authentik_core.token',
    CoreUser: 'authentik_core.user',
    CryptoCertificatekeypair: 'authentik_crypto.certificatekeypair',
    EnterpriseLicense: 'authentik_enterprise.license',
    EventsEvent: 'authentik_events.event',
    EventsNotification: 'authentik_events.notification',
    EventsNotificationrule: 'authentik_events.notificationrule',
    EventsNotificationtransport: 'authentik_events.notificationtransport',
    EventsNotificationwebhookmapping: 'authentik_events.notificationwebhookmapping',
    FlowsFlow: 'authentik_flows.flow',
    FlowsFlowstagebinding: 'authentik_flows.flowstagebinding',
    OutpostsDockerserviceconnection: 'authentik_outposts.dockerserviceconnection',
    OutpostsKubernetesserviceconnection: 'authentik_outposts.kubernetesserviceconnection',
    OutpostsOutpost: 'authentik_outposts.outpost',
    PoliciesPolicybinding: 'authentik_policies.policybinding',
    PoliciesDummyDummypolicy: 'authentik_policies_dummy.dummypolicy',
    PoliciesEventMatcherEventmatcherpolicy: 'authentik_policies_event_matcher.eventmatcherpolicy',
    PoliciesExpiryPasswordexpirypolicy: 'authentik_policies_expiry.passwordexpirypolicy',
    PoliciesExpressionExpressionpolicy: 'authentik_policies_expression.expressionpolicy',
    PoliciesPasswordPasswordpolicy: 'authentik_policies_password.passwordpolicy',
    PoliciesReputationReputationpolicy: 'authentik_policies_reputation.reputationpolicy',
    ProvidersLdapLdapprovider: 'authentik_providers_ldap.ldapprovider',
    ProvidersOauth2Oauth2provider: 'authentik_providers_oauth2.oauth2provider',
    ProvidersOauth2Scopemapping: 'authentik_providers_oauth2.scopemapping',
    ProvidersProxyProxyprovider: 'authentik_providers_proxy.proxyprovider',
    ProvidersRacEndpoint: 'authentik_providers_rac.endpoint',
    ProvidersRacRacpropertymapping: 'authentik_providers_rac.racpropertymapping',
    ProvidersRacRacprovider: 'authentik_providers_rac.racprovider',
    ProvidersRadiusRadiusprovider: 'authentik_providers_radius.radiusprovider',
    ProvidersSamlSamlpropertymapping: 'authentik_providers_saml.samlpropertymapping',
    ProvidersSamlSamlprovider: 'authentik_providers_saml.samlprovider',
    ProvidersScimScimmapping: 'authentik_providers_scim.scimmapping',
    ProvidersScimScimprovider: 'authentik_providers_scim.scimprovider',
    RbacRole: 'authentik_rbac.role',
    SourcesLdapLdappropertymapping: 'authentik_sources_ldap.ldappropertymapping',
    SourcesLdapLdapsource: 'authentik_sources_ldap.ldapsource',
    SourcesOauthOauthsource: 'authentik_sources_oauth.oauthsource',
    SourcesOauthUseroauthsourceconnection: 'authentik_sources_oauth.useroauthsourceconnection',
    SourcesPlexPlexsource: 'authentik_sources_plex.plexsource',
    SourcesPlexPlexsourceconnection: 'authentik_sources_plex.plexsourceconnection',
    SourcesSamlSamlsource: 'authentik_sources_saml.samlsource',
    SourcesSamlUsersamlsourceconnection: 'authentik_sources_saml.usersamlsourceconnection',
    StagesAuthenticatorDuoAuthenticatorduostage: 'authentik_stages_authenticator_duo.authenticatorduostage',
    StagesAuthenticatorDuoDuodevice: 'authentik_stages_authenticator_duo.duodevice',
    StagesAuthenticatorSmsAuthenticatorsmsstage: 'authentik_stages_authenticator_sms.authenticatorsmsstage',
    StagesAuthenticatorSmsSmsdevice: 'authentik_stages_authenticator_sms.smsdevice',
    StagesAuthenticatorStaticAuthenticatorstaticstage: 'authentik_stages_authenticator_static.authenticatorstaticstage',
    StagesAuthenticatorStaticStaticdevice: 'authentik_stages_authenticator_static.staticdevice',
    StagesAuthenticatorTotpAuthenticatortotpstage: 'authentik_stages_authenticator_totp.authenticatortotpstage',
    StagesAuthenticatorTotpTotpdevice: 'authentik_stages_authenticator_totp.totpdevice',
    StagesAuthenticatorValidateAuthenticatorvalidatestage: 'authentik_stages_authenticator_validate.authenticatorvalidatestage',
    StagesAuthenticatorWebauthnAuthenticatewebauthnstage: 'authentik_stages_authenticator_webauthn.authenticatewebauthnstage',
    StagesAuthenticatorWebauthnWebauthndevice: 'authentik_stages_authenticator_webauthn.webauthndevice',
    StagesCaptchaCaptchastage: 'authentik_stages_captcha.captchastage',
    StagesConsentConsentstage: 'authentik_stages_consent.consentstage',
    StagesConsentUserconsent: 'authentik_stages_consent.userconsent',
    StagesDenyDenystage: 'authentik_stages_deny.denystage',
    StagesDummyDummystage: 'authentik_stages_dummy.dummystage',
    StagesEmailEmailstage: 'authentik_stages_email.emailstage',
    StagesExtAuthExtauthstage: 'authentik_stages_ext_auth.extauthstage',
    StagesIdentificationIdentificationstage: 'authentik_stages_identification.identificationstage',
    StagesInvitationInvitation: 'authentik_stages_invitation.invitation',
    StagesInvitationInvitationstage: 'authentik_stages_invitation.invitationstage',
    StagesPasswordPasswordstage: 'authentik_stages_password.passwordstage',
    StagesPromptPrompt: 'authentik_stages_prompt.prompt',
    StagesPromptPromptstage: 'authentik_stages_prompt.promptstage',
    StagesUserDeleteUserdeletestage: 'authentik_stages_user_delete.userdeletestage',
    StagesUserLoginUserloginstage: 'authentik_stages_user_login.userloginstage',
    StagesUserLogoutUserlogoutstage: 'authentik_stages_user_logout.userlogoutstage',
    StagesUserWriteUserwritestage: 'authentik_stages_user_write.userwritestage',
    TenantsDomain: 'authentik_tenants.domain',
    UnknownDefaultOpenApi: '11184809'
};
/**
 * @export
 */
exports.RbacPermissionsAssignedByUsersListModelEnum = {
    BlueprintsBlueprintinstance: 'authentik_blueprints.blueprintinstance',
    BrandsBrand: 'authentik_brands.brand',
    CoreApplication: 'authentik_core.application',
    CoreGroup: 'authentik_core.group',
    CoreToken: 'authentik_core.token',
    CoreUser: 'authentik_core.user',
    CryptoCertificatekeypair: 'authentik_crypto.certificatekeypair',
    EnterpriseLicense: 'authentik_enterprise.license',
    EventsEvent: 'authentik_events.event',
    EventsNotification: 'authentik_events.notification',
    EventsNotificationrule: 'authentik_events.notificationrule',
    EventsNotificationtransport: 'authentik_events.notificationtransport',
    EventsNotificationwebhookmapping: 'authentik_events.notificationwebhookmapping',
    FlowsFlow: 'authentik_flows.flow',
    FlowsFlowstagebinding: 'authentik_flows.flowstagebinding',
    OutpostsDockerserviceconnection: 'authentik_outposts.dockerserviceconnection',
    OutpostsKubernetesserviceconnection: 'authentik_outposts.kubernetesserviceconnection',
    OutpostsOutpost: 'authentik_outposts.outpost',
    PoliciesPolicybinding: 'authentik_policies.policybinding',
    PoliciesDummyDummypolicy: 'authentik_policies_dummy.dummypolicy',
    PoliciesEventMatcherEventmatcherpolicy: 'authentik_policies_event_matcher.eventmatcherpolicy',
    PoliciesExpiryPasswordexpirypolicy: 'authentik_policies_expiry.passwordexpirypolicy',
    PoliciesExpressionExpressionpolicy: 'authentik_policies_expression.expressionpolicy',
    PoliciesPasswordPasswordpolicy: 'authentik_policies_password.passwordpolicy',
    PoliciesReputationReputationpolicy: 'authentik_policies_reputation.reputationpolicy',
    ProvidersLdapLdapprovider: 'authentik_providers_ldap.ldapprovider',
    ProvidersOauth2Oauth2provider: 'authentik_providers_oauth2.oauth2provider',
    ProvidersOauth2Scopemapping: 'authentik_providers_oauth2.scopemapping',
    ProvidersProxyProxyprovider: 'authentik_providers_proxy.proxyprovider',
    ProvidersRacEndpoint: 'authentik_providers_rac.endpoint',
    ProvidersRacRacpropertymapping: 'authentik_providers_rac.racpropertymapping',
    ProvidersRacRacprovider: 'authentik_providers_rac.racprovider',
    ProvidersRadiusRadiusprovider: 'authentik_providers_radius.radiusprovider',
    ProvidersSamlSamlpropertymapping: 'authentik_providers_saml.samlpropertymapping',
    ProvidersSamlSamlprovider: 'authentik_providers_saml.samlprovider',
    ProvidersScimScimmapping: 'authentik_providers_scim.scimmapping',
    ProvidersScimScimprovider: 'authentik_providers_scim.scimprovider',
    RbacRole: 'authentik_rbac.role',
    SourcesLdapLdappropertymapping: 'authentik_sources_ldap.ldappropertymapping',
    SourcesLdapLdapsource: 'authentik_sources_ldap.ldapsource',
    SourcesOauthOauthsource: 'authentik_sources_oauth.oauthsource',
    SourcesOauthUseroauthsourceconnection: 'authentik_sources_oauth.useroauthsourceconnection',
    SourcesPlexPlexsource: 'authentik_sources_plex.plexsource',
    SourcesPlexPlexsourceconnection: 'authentik_sources_plex.plexsourceconnection',
    SourcesSamlSamlsource: 'authentik_sources_saml.samlsource',
    SourcesSamlUsersamlsourceconnection: 'authentik_sources_saml.usersamlsourceconnection',
    StagesAuthenticatorDuoAuthenticatorduostage: 'authentik_stages_authenticator_duo.authenticatorduostage',
    StagesAuthenticatorDuoDuodevice: 'authentik_stages_authenticator_duo.duodevice',
    StagesAuthenticatorSmsAuthenticatorsmsstage: 'authentik_stages_authenticator_sms.authenticatorsmsstage',
    StagesAuthenticatorSmsSmsdevice: 'authentik_stages_authenticator_sms.smsdevice',
    StagesAuthenticatorStaticAuthenticatorstaticstage: 'authentik_stages_authenticator_static.authenticatorstaticstage',
    StagesAuthenticatorStaticStaticdevice: 'authentik_stages_authenticator_static.staticdevice',
    StagesAuthenticatorTotpAuthenticatortotpstage: 'authentik_stages_authenticator_totp.authenticatortotpstage',
    StagesAuthenticatorTotpTotpdevice: 'authentik_stages_authenticator_totp.totpdevice',
    StagesAuthenticatorValidateAuthenticatorvalidatestage: 'authentik_stages_authenticator_validate.authenticatorvalidatestage',
    StagesAuthenticatorWebauthnAuthenticatewebauthnstage: 'authentik_stages_authenticator_webauthn.authenticatewebauthnstage',
    StagesAuthenticatorWebauthnWebauthndevice: 'authentik_stages_authenticator_webauthn.webauthndevice',
    StagesCaptchaCaptchastage: 'authentik_stages_captcha.captchastage',
    StagesConsentConsentstage: 'authentik_stages_consent.consentstage',
    StagesConsentUserconsent: 'authentik_stages_consent.userconsent',
    StagesDenyDenystage: 'authentik_stages_deny.denystage',
    StagesDummyDummystage: 'authentik_stages_dummy.dummystage',
    StagesEmailEmailstage: 'authentik_stages_email.emailstage',
    StagesExtAuthExtauthstage: 'authentik_stages_ext_auth.extauthstage',
    StagesIdentificationIdentificationstage: 'authentik_stages_identification.identificationstage',
    StagesInvitationInvitation: 'authentik_stages_invitation.invitation',
    StagesInvitationInvitationstage: 'authentik_stages_invitation.invitationstage',
    StagesPasswordPasswordstage: 'authentik_stages_password.passwordstage',
    StagesPromptPrompt: 'authentik_stages_prompt.prompt',
    StagesPromptPromptstage: 'authentik_stages_prompt.promptstage',
    StagesUserDeleteUserdeletestage: 'authentik_stages_user_delete.userdeletestage',
    StagesUserLoginUserloginstage: 'authentik_stages_user_login.userloginstage',
    StagesUserLogoutUserlogoutstage: 'authentik_stages_user_logout.userlogoutstage',
    StagesUserWriteUserwritestage: 'authentik_stages_user_write.userwritestage',
    TenantsDomain: 'authentik_tenants.domain',
    UnknownDefaultOpenApi: '11184809'
};
