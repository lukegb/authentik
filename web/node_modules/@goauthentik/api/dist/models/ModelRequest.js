"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ModelRequestToJSON = exports.ModelRequestFromJSONTyped = exports.ModelRequestFromJSON = void 0;
const LDAPProviderRequest_1 = require("./LDAPProviderRequest");
const OAuth2ProviderRequest_1 = require("./OAuth2ProviderRequest");
const ProxyProviderRequest_1 = require("./ProxyProviderRequest");
const RACProviderRequest_1 = require("./RACProviderRequest");
const RadiusProviderRequest_1 = require("./RadiusProviderRequest");
const SAMLProviderRequest_1 = require("./SAMLProviderRequest");
const SCIMProviderRequest_1 = require("./SCIMProviderRequest");
function ModelRequestFromJSON(json) {
    return ModelRequestFromJSONTyped(json, false);
}
exports.ModelRequestFromJSON = ModelRequestFromJSON;
function ModelRequestFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['providerModel']) {
        case 'authentik_providers_ldap.ldapprovider':
            return Object.assign(Object.assign({}, (0, LDAPProviderRequest_1.LDAPProviderRequestFromJSONTyped)(json, true)), { providerModel: 'authentik_providers_ldap.ldapprovider' });
        case 'authentik_providers_oauth2.oauth2provider':
            return Object.assign(Object.assign({}, (0, OAuth2ProviderRequest_1.OAuth2ProviderRequestFromJSONTyped)(json, true)), { providerModel: 'authentik_providers_oauth2.oauth2provider' });
        case 'authentik_providers_proxy.proxyprovider':
            return Object.assign(Object.assign({}, (0, ProxyProviderRequest_1.ProxyProviderRequestFromJSONTyped)(json, true)), { providerModel: 'authentik_providers_proxy.proxyprovider' });
        case 'authentik_providers_rac.racprovider':
            return Object.assign(Object.assign({}, (0, RACProviderRequest_1.RACProviderRequestFromJSONTyped)(json, true)), { providerModel: 'authentik_providers_rac.racprovider' });
        case 'authentik_providers_radius.radiusprovider':
            return Object.assign(Object.assign({}, (0, RadiusProviderRequest_1.RadiusProviderRequestFromJSONTyped)(json, true)), { providerModel: 'authentik_providers_radius.radiusprovider' });
        case 'authentik_providers_saml.samlprovider':
            return Object.assign(Object.assign({}, (0, SAMLProviderRequest_1.SAMLProviderRequestFromJSONTyped)(json, true)), { providerModel: 'authentik_providers_saml.samlprovider' });
        case 'authentik_providers_scim.scimprovider':
            return Object.assign(Object.assign({}, (0, SCIMProviderRequest_1.SCIMProviderRequestFromJSONTyped)(json, true)), { providerModel: 'authentik_providers_scim.scimprovider' });
        default:
            throw new Error(`No variant of ModelRequest exists with 'providerModel=${json['providerModel']}'`);
    }
}
exports.ModelRequestFromJSONTyped = ModelRequestFromJSONTyped;
function ModelRequestToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['providerModel']) {
        case 'authentik_providers_ldap.ldapprovider':
            return (0, LDAPProviderRequest_1.LDAPProviderRequestToJSON)(value);
        case 'authentik_providers_oauth2.oauth2provider':
            return (0, OAuth2ProviderRequest_1.OAuth2ProviderRequestToJSON)(value);
        case 'authentik_providers_proxy.proxyprovider':
            return (0, ProxyProviderRequest_1.ProxyProviderRequestToJSON)(value);
        case 'authentik_providers_rac.racprovider':
            return (0, RACProviderRequest_1.RACProviderRequestToJSON)(value);
        case 'authentik_providers_radius.radiusprovider':
            return (0, RadiusProviderRequest_1.RadiusProviderRequestToJSON)(value);
        case 'authentik_providers_saml.samlprovider':
            return (0, SAMLProviderRequest_1.SAMLProviderRequestToJSON)(value);
        case 'authentik_providers_scim.scimprovider':
            return (0, SCIMProviderRequest_1.SCIMProviderRequestToJSON)(value);
        default:
            throw new Error(`No variant of ModelRequest exists with 'providerModel=${value['providerModel']}'`);
    }
}
exports.ModelRequestToJSON = ModelRequestToJSON;
