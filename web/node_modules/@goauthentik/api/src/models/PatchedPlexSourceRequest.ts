/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { PolicyEngineMode } from './PolicyEngineMode';
import {
    PolicyEngineModeFromJSON,
    PolicyEngineModeFromJSONTyped,
    PolicyEngineModeToJSON,
} from './PolicyEngineMode';
import type { UserMatchingModeEnum } from './UserMatchingModeEnum';
import {
    UserMatchingModeEnumFromJSON,
    UserMatchingModeEnumFromJSONTyped,
    UserMatchingModeEnumToJSON,
} from './UserMatchingModeEnum';

/**
 * Plex Source Serializer
 * @export
 * @interface PatchedPlexSourceRequest
 */
export interface PatchedPlexSourceRequest {
    /**
     * Source's display Name.
     * @type {string}
     * @memberof PatchedPlexSourceRequest
     */
    name?: string;
    /**
     * Internal source name, used in URLs.
     * @type {string}
     * @memberof PatchedPlexSourceRequest
     */
    slug?: string;
    /**
     * 
     * @type {boolean}
     * @memberof PatchedPlexSourceRequest
     */
    enabled?: boolean;
    /**
     * Flow to use when authenticating existing users.
     * @type {string}
     * @memberof PatchedPlexSourceRequest
     */
    authenticationFlow?: string | null;
    /**
     * Flow to use when enrolling new users.
     * @type {string}
     * @memberof PatchedPlexSourceRequest
     */
    enrollmentFlow?: string | null;
    /**
     * 
     * @type {PolicyEngineMode}
     * @memberof PatchedPlexSourceRequest
     */
    policyEngineMode?: PolicyEngineMode;
    /**
     * 
     * @type {UserMatchingModeEnum}
     * @memberof PatchedPlexSourceRequest
     */
    userMatchingMode?: UserMatchingModeEnum;
    /**
     * 
     * @type {string}
     * @memberof PatchedPlexSourceRequest
     */
    userPathTemplate?: string;
    /**
     * Client identifier used to talk to Plex.
     * @type {string}
     * @memberof PatchedPlexSourceRequest
     */
    clientId?: string;
    /**
     * Which servers a user has to be a member of to be granted access. Empty list allows every server.
     * @type {Array<string>}
     * @memberof PatchedPlexSourceRequest
     */
    allowedServers?: Array<string>;
    /**
     * Allow friends to authenticate, even if you don't share a server.
     * @type {boolean}
     * @memberof PatchedPlexSourceRequest
     */
    allowFriends?: boolean;
    /**
     * Plex token used to check friends
     * @type {string}
     * @memberof PatchedPlexSourceRequest
     */
    plexToken?: string;
}

/**
 * Check if a given object implements the PatchedPlexSourceRequest interface.
 */
export function instanceOfPatchedPlexSourceRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PatchedPlexSourceRequestFromJSON(json: any): PatchedPlexSourceRequest {
    return PatchedPlexSourceRequestFromJSONTyped(json, false);
}

export function PatchedPlexSourceRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PatchedPlexSourceRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'slug': !exists(json, 'slug') ? undefined : json['slug'],
        'enabled': !exists(json, 'enabled') ? undefined : json['enabled'],
        'authenticationFlow': !exists(json, 'authentication_flow') ? undefined : json['authentication_flow'],
        'enrollmentFlow': !exists(json, 'enrollment_flow') ? undefined : json['enrollment_flow'],
        'policyEngineMode': !exists(json, 'policy_engine_mode') ? undefined : PolicyEngineModeFromJSON(json['policy_engine_mode']),
        'userMatchingMode': !exists(json, 'user_matching_mode') ? undefined : UserMatchingModeEnumFromJSON(json['user_matching_mode']),
        'userPathTemplate': !exists(json, 'user_path_template') ? undefined : json['user_path_template'],
        'clientId': !exists(json, 'client_id') ? undefined : json['client_id'],
        'allowedServers': !exists(json, 'allowed_servers') ? undefined : json['allowed_servers'],
        'allowFriends': !exists(json, 'allow_friends') ? undefined : json['allow_friends'],
        'plexToken': !exists(json, 'plex_token') ? undefined : json['plex_token'],
    };
}

export function PatchedPlexSourceRequestToJSON(value?: PatchedPlexSourceRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'slug': value.slug,
        'enabled': value.enabled,
        'authentication_flow': value.authenticationFlow,
        'enrollment_flow': value.enrollmentFlow,
        'policy_engine_mode': PolicyEngineModeToJSON(value.policyEngineMode),
        'user_matching_mode': UserMatchingModeEnumToJSON(value.userMatchingMode),
        'user_path_template': value.userPathTemplate,
        'client_id': value.clientId,
        'allowed_servers': value.allowedServers,
        'allow_friends': value.allowFriends,
        'plex_token': value.plexToken,
    };
}

