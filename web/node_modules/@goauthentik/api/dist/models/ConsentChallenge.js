"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.ConsentChallengeToJSON = exports.ConsentChallengeFromJSONTyped = exports.ConsentChallengeFromJSON = exports.instanceOfConsentChallenge = void 0;
const runtime_1 = require("../runtime");
const ChallengeChoices_1 = require("./ChallengeChoices");
const ConsentPermission_1 = require("./ConsentPermission");
const ContextualFlowInfo_1 = require("./ContextualFlowInfo");
/**
 * Check if a given object implements the ConsentChallenge interface.
 */
function instanceOfConsentChallenge(value) {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "pendingUser" in value;
    isInstance = isInstance && "pendingUserAvatar" in value;
    isInstance = isInstance && "permissions" in value;
    isInstance = isInstance && "additionalPermissions" in value;
    isInstance = isInstance && "token" in value;
    return isInstance;
}
exports.instanceOfConsentChallenge = instanceOfConsentChallenge;
function ConsentChallengeFromJSON(json) {
    return ConsentChallengeFromJSONTyped(json, false);
}
exports.ConsentChallengeFromJSON = ConsentChallengeFromJSON;
function ConsentChallengeFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'type': (0, ChallengeChoices_1.ChallengeChoicesFromJSON)(json['type']),
        'flowInfo': !(0, runtime_1.exists)(json, 'flow_info') ? undefined : (0, ContextualFlowInfo_1.ContextualFlowInfoFromJSON)(json['flow_info']),
        'component': !(0, runtime_1.exists)(json, 'component') ? undefined : json['component'],
        'responseErrors': !(0, runtime_1.exists)(json, 'response_errors') ? undefined : json['response_errors'],
        'pendingUser': json['pending_user'],
        'pendingUserAvatar': json['pending_user_avatar'],
        'headerText': !(0, runtime_1.exists)(json, 'header_text') ? undefined : json['header_text'],
        'permissions': (json['permissions'].map(ConsentPermission_1.ConsentPermissionFromJSON)),
        'additionalPermissions': (json['additional_permissions'].map(ConsentPermission_1.ConsentPermissionFromJSON)),
        'token': json['token'],
    };
}
exports.ConsentChallengeFromJSONTyped = ConsentChallengeFromJSONTyped;
function ConsentChallengeToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'type': (0, ChallengeChoices_1.ChallengeChoicesToJSON)(value.type),
        'flow_info': (0, ContextualFlowInfo_1.ContextualFlowInfoToJSON)(value.flowInfo),
        'component': value.component,
        'response_errors': value.responseErrors,
        'pending_user': value.pendingUser,
        'pending_user_avatar': value.pendingUserAvatar,
        'header_text': value.headerText,
        'permissions': (value.permissions.map(ConsentPermission_1.ConsentPermissionToJSON)),
        'additional_permissions': (value.additionalPermissions.map(ConsentPermission_1.ConsentPermissionToJSON)),
        'token': value.token,
    };
}
exports.ConsentChallengeToJSON = ConsentChallengeToJSON;
