"use strict";
/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
Object.defineProperty(exports, "__esModule", { value: true });
exports.AuthenticatedSessionToJSON = exports.AuthenticatedSessionFromJSONTyped = exports.AuthenticatedSessionFromJSON = exports.instanceOfAuthenticatedSession = void 0;
const runtime_1 = require("../runtime");
const AuthenticatedSessionAsn_1 = require("./AuthenticatedSessionAsn");
const AuthenticatedSessionGeoIp_1 = require("./AuthenticatedSessionGeoIp");
const AuthenticatedSessionUserAgent_1 = require("./AuthenticatedSessionUserAgent");
/**
 * Check if a given object implements the AuthenticatedSession interface.
 */
function instanceOfAuthenticatedSession(value) {
    let isInstance = true;
    isInstance = isInstance && "current" in value;
    isInstance = isInstance && "userAgent" in value;
    isInstance = isInstance && "geoIp" in value;
    isInstance = isInstance && "asn" in value;
    isInstance = isInstance && "user" in value;
    isInstance = isInstance && "lastIp" in value;
    isInstance = isInstance && "lastUsed" in value;
    return isInstance;
}
exports.instanceOfAuthenticatedSession = instanceOfAuthenticatedSession;
function AuthenticatedSessionFromJSON(json) {
    return AuthenticatedSessionFromJSONTyped(json, false);
}
exports.AuthenticatedSessionFromJSON = AuthenticatedSessionFromJSON;
function AuthenticatedSessionFromJSONTyped(json, ignoreDiscriminator) {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        'uuid': !(0, runtime_1.exists)(json, 'uuid') ? undefined : json['uuid'],
        'current': json['current'],
        'userAgent': (0, AuthenticatedSessionUserAgent_1.AuthenticatedSessionUserAgentFromJSON)(json['user_agent']),
        'geoIp': (0, AuthenticatedSessionGeoIp_1.AuthenticatedSessionGeoIpFromJSON)(json['geo_ip']),
        'asn': (0, AuthenticatedSessionAsn_1.AuthenticatedSessionAsnFromJSON)(json['asn']),
        'user': json['user'],
        'lastIp': json['last_ip'],
        'lastUserAgent': !(0, runtime_1.exists)(json, 'last_user_agent') ? undefined : json['last_user_agent'],
        'lastUsed': (new Date(json['last_used'])),
        'expires': !(0, runtime_1.exists)(json, 'expires') ? undefined : (new Date(json['expires'])),
    };
}
exports.AuthenticatedSessionFromJSONTyped = AuthenticatedSessionFromJSONTyped;
function AuthenticatedSessionToJSON(value) {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        'uuid': value.uuid,
        'user_agent': (0, AuthenticatedSessionUserAgent_1.AuthenticatedSessionUserAgentToJSON)(value.userAgent),
        'geo_ip': (0, AuthenticatedSessionGeoIp_1.AuthenticatedSessionGeoIpToJSON)(value.geoIp),
        'asn': (0, AuthenticatedSessionAsn_1.AuthenticatedSessionAsnToJSON)(value.asn),
        'user': value.user,
        'last_ip': value.lastIp,
        'last_user_agent': value.lastUserAgent,
        'expires': value.expires === undefined ? undefined : (value.expires.toISOString()),
    };
}
exports.AuthenticatedSessionToJSON = AuthenticatedSessionToJSON;
