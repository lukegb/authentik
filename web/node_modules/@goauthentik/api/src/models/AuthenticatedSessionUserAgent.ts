/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { AuthenticatedSessionUserAgentDevice } from './AuthenticatedSessionUserAgentDevice';
import {
    AuthenticatedSessionUserAgentDeviceFromJSON,
    AuthenticatedSessionUserAgentDeviceFromJSONTyped,
    AuthenticatedSessionUserAgentDeviceToJSON,
} from './AuthenticatedSessionUserAgentDevice';
import type { AuthenticatedSessionUserAgentOs } from './AuthenticatedSessionUserAgentOs';
import {
    AuthenticatedSessionUserAgentOsFromJSON,
    AuthenticatedSessionUserAgentOsFromJSONTyped,
    AuthenticatedSessionUserAgentOsToJSON,
} from './AuthenticatedSessionUserAgentOs';
import type { AuthenticatedSessionUserAgentUserAgent } from './AuthenticatedSessionUserAgentUserAgent';
import {
    AuthenticatedSessionUserAgentUserAgentFromJSON,
    AuthenticatedSessionUserAgentUserAgentFromJSONTyped,
    AuthenticatedSessionUserAgentUserAgentToJSON,
} from './AuthenticatedSessionUserAgentUserAgent';

/**
 * Get parsed user agent
 * @export
 * @interface AuthenticatedSessionUserAgent
 */
export interface AuthenticatedSessionUserAgent {
    /**
     * 
     * @type {AuthenticatedSessionUserAgentDevice}
     * @memberof AuthenticatedSessionUserAgent
     */
    device: AuthenticatedSessionUserAgentDevice;
    /**
     * 
     * @type {AuthenticatedSessionUserAgentOs}
     * @memberof AuthenticatedSessionUserAgent
     */
    os: AuthenticatedSessionUserAgentOs;
    /**
     * 
     * @type {AuthenticatedSessionUserAgentUserAgent}
     * @memberof AuthenticatedSessionUserAgent
     */
    userAgent: AuthenticatedSessionUserAgentUserAgent;
    /**
     * 
     * @type {string}
     * @memberof AuthenticatedSessionUserAgent
     */
    string: string;
}

/**
 * Check if a given object implements the AuthenticatedSessionUserAgent interface.
 */
export function instanceOfAuthenticatedSessionUserAgent(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "device" in value;
    isInstance = isInstance && "os" in value;
    isInstance = isInstance && "userAgent" in value;
    isInstance = isInstance && "string" in value;

    return isInstance;
}

export function AuthenticatedSessionUserAgentFromJSON(json: any): AuthenticatedSessionUserAgent {
    return AuthenticatedSessionUserAgentFromJSONTyped(json, false);
}

export function AuthenticatedSessionUserAgentFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuthenticatedSessionUserAgent {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'device': AuthenticatedSessionUserAgentDeviceFromJSON(json['device']),
        'os': AuthenticatedSessionUserAgentOsFromJSON(json['os']),
        'userAgent': AuthenticatedSessionUserAgentUserAgentFromJSON(json['user_agent']),
        'string': json['string'],
    };
}

export function AuthenticatedSessionUserAgentToJSON(value?: AuthenticatedSessionUserAgent | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'device': AuthenticatedSessionUserAgentDeviceToJSON(value.device),
        'os': AuthenticatedSessionUserAgentOsToJSON(value.os),
        'user_agent': AuthenticatedSessionUserAgentUserAgentToJSON(value.userAgent),
        'string': value.string,
    };
}

