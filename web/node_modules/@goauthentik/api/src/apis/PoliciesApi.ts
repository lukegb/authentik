/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  Cache,
  DummyPolicy,
  DummyPolicyRequest,
  EventMatcherPolicy,
  EventMatcherPolicyRequest,
  ExpressionPolicy,
  ExpressionPolicyRequest,
  GenericError,
  PaginatedDummyPolicyList,
  PaginatedEventMatcherPolicyList,
  PaginatedExpressionPolicyList,
  PaginatedPasswordExpiryPolicyList,
  PaginatedPasswordPolicyList,
  PaginatedPolicyBindingList,
  PaginatedPolicyList,
  PaginatedReputationList,
  PaginatedReputationPolicyList,
  PasswordExpiryPolicy,
  PasswordExpiryPolicyRequest,
  PasswordPolicy,
  PasswordPolicyRequest,
  PatchedDummyPolicyRequest,
  PatchedEventMatcherPolicyRequest,
  PatchedExpressionPolicyRequest,
  PatchedPasswordExpiryPolicyRequest,
  PatchedPasswordPolicyRequest,
  PatchedPolicyBindingRequest,
  PatchedReputationPolicyRequest,
  Policy,
  PolicyBinding,
  PolicyBindingRequest,
  PolicyTestRequest,
  PolicyTestResult,
  Reputation,
  ReputationPolicy,
  ReputationPolicyRequest,
  TypeCreate,
  UsedBy,
  ValidationError,
} from '../models';
import {
    CacheFromJSON,
    CacheToJSON,
    DummyPolicyFromJSON,
    DummyPolicyToJSON,
    DummyPolicyRequestFromJSON,
    DummyPolicyRequestToJSON,
    EventMatcherPolicyFromJSON,
    EventMatcherPolicyToJSON,
    EventMatcherPolicyRequestFromJSON,
    EventMatcherPolicyRequestToJSON,
    ExpressionPolicyFromJSON,
    ExpressionPolicyToJSON,
    ExpressionPolicyRequestFromJSON,
    ExpressionPolicyRequestToJSON,
    GenericErrorFromJSON,
    GenericErrorToJSON,
    PaginatedDummyPolicyListFromJSON,
    PaginatedDummyPolicyListToJSON,
    PaginatedEventMatcherPolicyListFromJSON,
    PaginatedEventMatcherPolicyListToJSON,
    PaginatedExpressionPolicyListFromJSON,
    PaginatedExpressionPolicyListToJSON,
    PaginatedPasswordExpiryPolicyListFromJSON,
    PaginatedPasswordExpiryPolicyListToJSON,
    PaginatedPasswordPolicyListFromJSON,
    PaginatedPasswordPolicyListToJSON,
    PaginatedPolicyBindingListFromJSON,
    PaginatedPolicyBindingListToJSON,
    PaginatedPolicyListFromJSON,
    PaginatedPolicyListToJSON,
    PaginatedReputationListFromJSON,
    PaginatedReputationListToJSON,
    PaginatedReputationPolicyListFromJSON,
    PaginatedReputationPolicyListToJSON,
    PasswordExpiryPolicyFromJSON,
    PasswordExpiryPolicyToJSON,
    PasswordExpiryPolicyRequestFromJSON,
    PasswordExpiryPolicyRequestToJSON,
    PasswordPolicyFromJSON,
    PasswordPolicyToJSON,
    PasswordPolicyRequestFromJSON,
    PasswordPolicyRequestToJSON,
    PatchedDummyPolicyRequestFromJSON,
    PatchedDummyPolicyRequestToJSON,
    PatchedEventMatcherPolicyRequestFromJSON,
    PatchedEventMatcherPolicyRequestToJSON,
    PatchedExpressionPolicyRequestFromJSON,
    PatchedExpressionPolicyRequestToJSON,
    PatchedPasswordExpiryPolicyRequestFromJSON,
    PatchedPasswordExpiryPolicyRequestToJSON,
    PatchedPasswordPolicyRequestFromJSON,
    PatchedPasswordPolicyRequestToJSON,
    PatchedPolicyBindingRequestFromJSON,
    PatchedPolicyBindingRequestToJSON,
    PatchedReputationPolicyRequestFromJSON,
    PatchedReputationPolicyRequestToJSON,
    PolicyFromJSON,
    PolicyToJSON,
    PolicyBindingFromJSON,
    PolicyBindingToJSON,
    PolicyBindingRequestFromJSON,
    PolicyBindingRequestToJSON,
    PolicyTestRequestFromJSON,
    PolicyTestRequestToJSON,
    PolicyTestResultFromJSON,
    PolicyTestResultToJSON,
    ReputationFromJSON,
    ReputationToJSON,
    ReputationPolicyFromJSON,
    ReputationPolicyToJSON,
    ReputationPolicyRequestFromJSON,
    ReputationPolicyRequestToJSON,
    TypeCreateFromJSON,
    TypeCreateToJSON,
    UsedByFromJSON,
    UsedByToJSON,
    ValidationErrorFromJSON,
    ValidationErrorToJSON,
} from '../models';

export interface PoliciesAllDestroyRequest {
    policyUuid: string;
}

export interface PoliciesAllListRequest {
    bindingsIsnull?: boolean;
    ordering?: string;
    page?: number;
    pageSize?: number;
    promptstageIsnull?: boolean;
    search?: string;
}

export interface PoliciesAllRetrieveRequest {
    policyUuid: string;
}

export interface PoliciesAllTestCreateRequest {
    policyUuid: string;
    policyTestRequest: PolicyTestRequest;
}

export interface PoliciesAllUsedByListRequest {
    policyUuid: string;
}

export interface PoliciesBindingsCreateRequest {
    policyBindingRequest: PolicyBindingRequest;
}

export interface PoliciesBindingsDestroyRequest {
    policyBindingUuid: string;
}

export interface PoliciesBindingsListRequest {
    enabled?: boolean;
    order?: number;
    ordering?: string;
    page?: number;
    pageSize?: number;
    policy?: string;
    policyIsnull?: boolean;
    search?: string;
    target?: string;
    targetIn?: Array<string>;
    timeout?: number;
}

export interface PoliciesBindingsPartialUpdateRequest {
    policyBindingUuid: string;
    patchedPolicyBindingRequest?: PatchedPolicyBindingRequest;
}

export interface PoliciesBindingsRetrieveRequest {
    policyBindingUuid: string;
}

export interface PoliciesBindingsUpdateRequest {
    policyBindingUuid: string;
    policyBindingRequest: PolicyBindingRequest;
}

export interface PoliciesBindingsUsedByListRequest {
    policyBindingUuid: string;
}

export interface PoliciesDummyCreateRequest {
    dummyPolicyRequest: DummyPolicyRequest;
}

export interface PoliciesDummyDestroyRequest {
    policyUuid: string;
}

export interface PoliciesDummyListRequest {
    created?: Date;
    executionLogging?: boolean;
    lastUpdated?: Date;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    policyUuid?: string;
    result?: boolean;
    search?: string;
    waitMax?: number;
    waitMin?: number;
}

export interface PoliciesDummyPartialUpdateRequest {
    policyUuid: string;
    patchedDummyPolicyRequest?: PatchedDummyPolicyRequest;
}

export interface PoliciesDummyRetrieveRequest {
    policyUuid: string;
}

export interface PoliciesDummyUpdateRequest {
    policyUuid: string;
    dummyPolicyRequest: DummyPolicyRequest;
}

export interface PoliciesDummyUsedByListRequest {
    policyUuid: string;
}

export interface PoliciesEventMatcherCreateRequest {
    eventMatcherPolicyRequest: EventMatcherPolicyRequest;
}

export interface PoliciesEventMatcherDestroyRequest {
    policyUuid: string;
}

export interface PoliciesEventMatcherListRequest {
    action?: PoliciesEventMatcherListActionEnum;
    app?: string;
    clientIp?: string;
    created?: Date;
    executionLogging?: boolean;
    lastUpdated?: Date;
    model?: string;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    policyUuid?: string;
    search?: string;
}

export interface PoliciesEventMatcherPartialUpdateRequest {
    policyUuid: string;
    patchedEventMatcherPolicyRequest?: PatchedEventMatcherPolicyRequest;
}

export interface PoliciesEventMatcherRetrieveRequest {
    policyUuid: string;
}

export interface PoliciesEventMatcherUpdateRequest {
    policyUuid: string;
    eventMatcherPolicyRequest: EventMatcherPolicyRequest;
}

export interface PoliciesEventMatcherUsedByListRequest {
    policyUuid: string;
}

export interface PoliciesExpressionCreateRequest {
    expressionPolicyRequest: ExpressionPolicyRequest;
}

export interface PoliciesExpressionDestroyRequest {
    policyUuid: string;
}

export interface PoliciesExpressionListRequest {
    created?: Date;
    executionLogging?: boolean;
    expression?: string;
    lastUpdated?: Date;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    policyUuid?: string;
    search?: string;
}

export interface PoliciesExpressionPartialUpdateRequest {
    policyUuid: string;
    patchedExpressionPolicyRequest?: PatchedExpressionPolicyRequest;
}

export interface PoliciesExpressionRetrieveRequest {
    policyUuid: string;
}

export interface PoliciesExpressionUpdateRequest {
    policyUuid: string;
    expressionPolicyRequest: ExpressionPolicyRequest;
}

export interface PoliciesExpressionUsedByListRequest {
    policyUuid: string;
}

export interface PoliciesPasswordCreateRequest {
    passwordPolicyRequest: PasswordPolicyRequest;
}

export interface PoliciesPasswordDestroyRequest {
    policyUuid: string;
}

export interface PoliciesPasswordExpiryCreateRequest {
    passwordExpiryPolicyRequest: PasswordExpiryPolicyRequest;
}

export interface PoliciesPasswordExpiryDestroyRequest {
    policyUuid: string;
}

export interface PoliciesPasswordExpiryListRequest {
    created?: Date;
    days?: number;
    denyOnly?: boolean;
    executionLogging?: boolean;
    lastUpdated?: Date;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    policyUuid?: string;
    search?: string;
}

export interface PoliciesPasswordExpiryPartialUpdateRequest {
    policyUuid: string;
    patchedPasswordExpiryPolicyRequest?: PatchedPasswordExpiryPolicyRequest;
}

export interface PoliciesPasswordExpiryRetrieveRequest {
    policyUuid: string;
}

export interface PoliciesPasswordExpiryUpdateRequest {
    policyUuid: string;
    passwordExpiryPolicyRequest: PasswordExpiryPolicyRequest;
}

export interface PoliciesPasswordExpiryUsedByListRequest {
    policyUuid: string;
}

export interface PoliciesPasswordListRequest {
    amountDigits?: number;
    amountLowercase?: number;
    amountSymbols?: number;
    amountUppercase?: number;
    checkHaveIBeenPwned?: boolean;
    checkStaticRules?: boolean;
    checkZxcvbn?: boolean;
    created?: Date;
    errorMessage?: string;
    executionLogging?: boolean;
    hibpAllowedCount?: number;
    lastUpdated?: Date;
    lengthMin?: number;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    passwordField?: string;
    policyUuid?: string;
    search?: string;
    symbolCharset?: string;
    zxcvbnScoreThreshold?: number;
}

export interface PoliciesPasswordPartialUpdateRequest {
    policyUuid: string;
    patchedPasswordPolicyRequest?: PatchedPasswordPolicyRequest;
}

export interface PoliciesPasswordRetrieveRequest {
    policyUuid: string;
}

export interface PoliciesPasswordUpdateRequest {
    policyUuid: string;
    passwordPolicyRequest: PasswordPolicyRequest;
}

export interface PoliciesPasswordUsedByListRequest {
    policyUuid: string;
}

export interface PoliciesReputationCreateRequest {
    reputationPolicyRequest: ReputationPolicyRequest;
}

export interface PoliciesReputationDestroyRequest {
    policyUuid: string;
}

export interface PoliciesReputationListRequest {
    checkIp?: boolean;
    checkUsername?: boolean;
    created?: Date;
    executionLogging?: boolean;
    lastUpdated?: Date;
    name?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    policyUuid?: string;
    search?: string;
    threshold?: number;
}

export interface PoliciesReputationPartialUpdateRequest {
    policyUuid: string;
    patchedReputationPolicyRequest?: PatchedReputationPolicyRequest;
}

export interface PoliciesReputationRetrieveRequest {
    policyUuid: string;
}

export interface PoliciesReputationScoresDestroyRequest {
    reputationUuid: string;
}

export interface PoliciesReputationScoresListRequest {
    identifier?: string;
    ip?: string;
    ordering?: string;
    page?: number;
    pageSize?: number;
    score?: number;
    search?: string;
}

export interface PoliciesReputationScoresRetrieveRequest {
    reputationUuid: string;
}

export interface PoliciesReputationScoresUsedByListRequest {
    reputationUuid: string;
}

export interface PoliciesReputationUpdateRequest {
    policyUuid: string;
    reputationPolicyRequest: ReputationPolicyRequest;
}

export interface PoliciesReputationUsedByListRequest {
    policyUuid: string;
}

/**
 * 
 */
export class PoliciesApi extends runtime.BaseAPI {

    /**
     * Clear policy cache
     */
    async policiesAllCacheClearCreateRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/all/cache_clear/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Clear policy cache
     */
    async policiesAllCacheClearCreate(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.policiesAllCacheClearCreateRaw(initOverrides);
    }

    /**
     * Info about cached policies
     */
    async policiesAllCacheInfoRetrieveRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Cache>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/all/cache_info/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => CacheFromJSON(jsonValue));
    }

    /**
     * Info about cached policies
     */
    async policiesAllCacheInfoRetrieve(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Cache> {
        const response = await this.policiesAllCacheInfoRetrieveRaw(initOverrides);
        return await response.value();
    }

    /**
     * Policy Viewset
     */
    async policiesAllDestroyRaw(requestParameters: PoliciesAllDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.policyUuid === null || requestParameters.policyUuid === undefined) {
            throw new runtime.RequiredError('policyUuid','Required parameter requestParameters.policyUuid was null or undefined when calling policiesAllDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/all/{policy_uuid}/`.replace(`{${"policy_uuid"}}`, encodeURIComponent(String(requestParameters.policyUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Policy Viewset
     */
    async policiesAllDestroy(requestParameters: PoliciesAllDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.policiesAllDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Policy Viewset
     */
    async policiesAllListRaw(requestParameters: PoliciesAllListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPolicyList>> {
        const queryParameters: any = {};

        if (requestParameters.bindingsIsnull !== undefined) {
            queryParameters['bindings__isnull'] = requestParameters.bindingsIsnull;
        }

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.promptstageIsnull !== undefined) {
            queryParameters['promptstage__isnull'] = requestParameters.promptstageIsnull;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/all/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedPolicyListFromJSON(jsonValue));
    }

    /**
     * Policy Viewset
     */
    async policiesAllList(requestParameters: PoliciesAllListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPolicyList> {
        const response = await this.policiesAllListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Policy Viewset
     */
    async policiesAllRetrieveRaw(requestParameters: PoliciesAllRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Policy>> {
        if (requestParameters.policyUuid === null || requestParameters.policyUuid === undefined) {
            throw new runtime.RequiredError('policyUuid','Required parameter requestParameters.policyUuid was null or undefined when calling policiesAllRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/all/{policy_uuid}/`.replace(`{${"policy_uuid"}}`, encodeURIComponent(String(requestParameters.policyUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PolicyFromJSON(jsonValue));
    }

    /**
     * Policy Viewset
     */
    async policiesAllRetrieve(requestParameters: PoliciesAllRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Policy> {
        const response = await this.policiesAllRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Test policy
     */
    async policiesAllTestCreateRaw(requestParameters: PoliciesAllTestCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PolicyTestResult>> {
        if (requestParameters.policyUuid === null || requestParameters.policyUuid === undefined) {
            throw new runtime.RequiredError('policyUuid','Required parameter requestParameters.policyUuid was null or undefined when calling policiesAllTestCreate.');
        }

        if (requestParameters.policyTestRequest === null || requestParameters.policyTestRequest === undefined) {
            throw new runtime.RequiredError('policyTestRequest','Required parameter requestParameters.policyTestRequest was null or undefined when calling policiesAllTestCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/all/{policy_uuid}/test/`.replace(`{${"policy_uuid"}}`, encodeURIComponent(String(requestParameters.policyUuid))),
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PolicyTestRequestToJSON(requestParameters.policyTestRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PolicyTestResultFromJSON(jsonValue));
    }

    /**
     * Test policy
     */
    async policiesAllTestCreate(requestParameters: PoliciesAllTestCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PolicyTestResult> {
        const response = await this.policiesAllTestCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get all creatable policy types
     */
    async policiesAllTypesListRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<TypeCreate>>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/all/types/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(TypeCreateFromJSON));
    }

    /**
     * Get all creatable policy types
     */
    async policiesAllTypesList(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<TypeCreate>> {
        const response = await this.policiesAllTypesListRaw(initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all objects that use this object
     */
    async policiesAllUsedByListRaw(requestParameters: PoliciesAllUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UsedBy>>> {
        if (requestParameters.policyUuid === null || requestParameters.policyUuid === undefined) {
            throw new runtime.RequiredError('policyUuid','Required parameter requestParameters.policyUuid was null or undefined when calling policiesAllUsedByList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/all/{policy_uuid}/used_by/`.replace(`{${"policy_uuid"}}`, encodeURIComponent(String(requestParameters.policyUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
    }

    /**
     * Get a list of all objects that use this object
     */
    async policiesAllUsedByList(requestParameters: PoliciesAllUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UsedBy>> {
        const response = await this.policiesAllUsedByListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * PolicyBinding Viewset
     */
    async policiesBindingsCreateRaw(requestParameters: PoliciesBindingsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PolicyBinding>> {
        if (requestParameters.policyBindingRequest === null || requestParameters.policyBindingRequest === undefined) {
            throw new runtime.RequiredError('policyBindingRequest','Required parameter requestParameters.policyBindingRequest was null or undefined when calling policiesBindingsCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/bindings/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PolicyBindingRequestToJSON(requestParameters.policyBindingRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PolicyBindingFromJSON(jsonValue));
    }

    /**
     * PolicyBinding Viewset
     */
    async policiesBindingsCreate(requestParameters: PoliciesBindingsCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PolicyBinding> {
        const response = await this.policiesBindingsCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * PolicyBinding Viewset
     */
    async policiesBindingsDestroyRaw(requestParameters: PoliciesBindingsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.policyBindingUuid === null || requestParameters.policyBindingUuid === undefined) {
            throw new runtime.RequiredError('policyBindingUuid','Required parameter requestParameters.policyBindingUuid was null or undefined when calling policiesBindingsDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/bindings/{policy_binding_uuid}/`.replace(`{${"policy_binding_uuid"}}`, encodeURIComponent(String(requestParameters.policyBindingUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * PolicyBinding Viewset
     */
    async policiesBindingsDestroy(requestParameters: PoliciesBindingsDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.policiesBindingsDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * PolicyBinding Viewset
     */
    async policiesBindingsListRaw(requestParameters: PoliciesBindingsListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPolicyBindingList>> {
        const queryParameters: any = {};

        if (requestParameters.enabled !== undefined) {
            queryParameters['enabled'] = requestParameters.enabled;
        }

        if (requestParameters.order !== undefined) {
            queryParameters['order'] = requestParameters.order;
        }

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.policy !== undefined) {
            queryParameters['policy'] = requestParameters.policy;
        }

        if (requestParameters.policyIsnull !== undefined) {
            queryParameters['policy__isnull'] = requestParameters.policyIsnull;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.target !== undefined) {
            queryParameters['target'] = requestParameters.target;
        }

        if (requestParameters.targetIn) {
            queryParameters['target_in'] = requestParameters.targetIn;
        }

        if (requestParameters.timeout !== undefined) {
            queryParameters['timeout'] = requestParameters.timeout;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/bindings/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedPolicyBindingListFromJSON(jsonValue));
    }

    /**
     * PolicyBinding Viewset
     */
    async policiesBindingsList(requestParameters: PoliciesBindingsListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPolicyBindingList> {
        const response = await this.policiesBindingsListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * PolicyBinding Viewset
     */
    async policiesBindingsPartialUpdateRaw(requestParameters: PoliciesBindingsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PolicyBinding>> {
        if (requestParameters.policyBindingUuid === null || requestParameters.policyBindingUuid === undefined) {
            throw new runtime.RequiredError('policyBindingUuid','Required parameter requestParameters.policyBindingUuid was null or undefined when calling policiesBindingsPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/bindings/{policy_binding_uuid}/`.replace(`{${"policy_binding_uuid"}}`, encodeURIComponent(String(requestParameters.policyBindingUuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedPolicyBindingRequestToJSON(requestParameters.patchedPolicyBindingRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PolicyBindingFromJSON(jsonValue));
    }

    /**
     * PolicyBinding Viewset
     */
    async policiesBindingsPartialUpdate(requestParameters: PoliciesBindingsPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PolicyBinding> {
        const response = await this.policiesBindingsPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * PolicyBinding Viewset
     */
    async policiesBindingsRetrieveRaw(requestParameters: PoliciesBindingsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PolicyBinding>> {
        if (requestParameters.policyBindingUuid === null || requestParameters.policyBindingUuid === undefined) {
            throw new runtime.RequiredError('policyBindingUuid','Required parameter requestParameters.policyBindingUuid was null or undefined when calling policiesBindingsRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/bindings/{policy_binding_uuid}/`.replace(`{${"policy_binding_uuid"}}`, encodeURIComponent(String(requestParameters.policyBindingUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PolicyBindingFromJSON(jsonValue));
    }

    /**
     * PolicyBinding Viewset
     */
    async policiesBindingsRetrieve(requestParameters: PoliciesBindingsRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PolicyBinding> {
        const response = await this.policiesBindingsRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * PolicyBinding Viewset
     */
    async policiesBindingsUpdateRaw(requestParameters: PoliciesBindingsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PolicyBinding>> {
        if (requestParameters.policyBindingUuid === null || requestParameters.policyBindingUuid === undefined) {
            throw new runtime.RequiredError('policyBindingUuid','Required parameter requestParameters.policyBindingUuid was null or undefined when calling policiesBindingsUpdate.');
        }

        if (requestParameters.policyBindingRequest === null || requestParameters.policyBindingRequest === undefined) {
            throw new runtime.RequiredError('policyBindingRequest','Required parameter requestParameters.policyBindingRequest was null or undefined when calling policiesBindingsUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/bindings/{policy_binding_uuid}/`.replace(`{${"policy_binding_uuid"}}`, encodeURIComponent(String(requestParameters.policyBindingUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PolicyBindingRequestToJSON(requestParameters.policyBindingRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PolicyBindingFromJSON(jsonValue));
    }

    /**
     * PolicyBinding Viewset
     */
    async policiesBindingsUpdate(requestParameters: PoliciesBindingsUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PolicyBinding> {
        const response = await this.policiesBindingsUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all objects that use this object
     */
    async policiesBindingsUsedByListRaw(requestParameters: PoliciesBindingsUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UsedBy>>> {
        if (requestParameters.policyBindingUuid === null || requestParameters.policyBindingUuid === undefined) {
            throw new runtime.RequiredError('policyBindingUuid','Required parameter requestParameters.policyBindingUuid was null or undefined when calling policiesBindingsUsedByList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/bindings/{policy_binding_uuid}/used_by/`.replace(`{${"policy_binding_uuid"}}`, encodeURIComponent(String(requestParameters.policyBindingUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
    }

    /**
     * Get a list of all objects that use this object
     */
    async policiesBindingsUsedByList(requestParameters: PoliciesBindingsUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UsedBy>> {
        const response = await this.policiesBindingsUsedByListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Dummy Viewset
     */
    async policiesDummyCreateRaw(requestParameters: PoliciesDummyCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DummyPolicy>> {
        if (requestParameters.dummyPolicyRequest === null || requestParameters.dummyPolicyRequest === undefined) {
            throw new runtime.RequiredError('dummyPolicyRequest','Required parameter requestParameters.dummyPolicyRequest was null or undefined when calling policiesDummyCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/dummy/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: DummyPolicyRequestToJSON(requestParameters.dummyPolicyRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DummyPolicyFromJSON(jsonValue));
    }

    /**
     * Dummy Viewset
     */
    async policiesDummyCreate(requestParameters: PoliciesDummyCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DummyPolicy> {
        const response = await this.policiesDummyCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Dummy Viewset
     */
    async policiesDummyDestroyRaw(requestParameters: PoliciesDummyDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.policyUuid === null || requestParameters.policyUuid === undefined) {
            throw new runtime.RequiredError('policyUuid','Required parameter requestParameters.policyUuid was null or undefined when calling policiesDummyDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/dummy/{policy_uuid}/`.replace(`{${"policy_uuid"}}`, encodeURIComponent(String(requestParameters.policyUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Dummy Viewset
     */
    async policiesDummyDestroy(requestParameters: PoliciesDummyDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.policiesDummyDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Dummy Viewset
     */
    async policiesDummyListRaw(requestParameters: PoliciesDummyListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedDummyPolicyList>> {
        const queryParameters: any = {};

        if (requestParameters.created !== undefined) {
            queryParameters['created'] = (requestParameters.created as any).toISOString();
        }

        if (requestParameters.executionLogging !== undefined) {
            queryParameters['execution_logging'] = requestParameters.executionLogging;
        }

        if (requestParameters.lastUpdated !== undefined) {
            queryParameters['last_updated'] = (requestParameters.lastUpdated as any).toISOString();
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.policyUuid !== undefined) {
            queryParameters['policy_uuid'] = requestParameters.policyUuid;
        }

        if (requestParameters.result !== undefined) {
            queryParameters['result'] = requestParameters.result;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.waitMax !== undefined) {
            queryParameters['wait_max'] = requestParameters.waitMax;
        }

        if (requestParameters.waitMin !== undefined) {
            queryParameters['wait_min'] = requestParameters.waitMin;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/dummy/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedDummyPolicyListFromJSON(jsonValue));
    }

    /**
     * Dummy Viewset
     */
    async policiesDummyList(requestParameters: PoliciesDummyListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedDummyPolicyList> {
        const response = await this.policiesDummyListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Dummy Viewset
     */
    async policiesDummyPartialUpdateRaw(requestParameters: PoliciesDummyPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DummyPolicy>> {
        if (requestParameters.policyUuid === null || requestParameters.policyUuid === undefined) {
            throw new runtime.RequiredError('policyUuid','Required parameter requestParameters.policyUuid was null or undefined when calling policiesDummyPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/dummy/{policy_uuid}/`.replace(`{${"policy_uuid"}}`, encodeURIComponent(String(requestParameters.policyUuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedDummyPolicyRequestToJSON(requestParameters.patchedDummyPolicyRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DummyPolicyFromJSON(jsonValue));
    }

    /**
     * Dummy Viewset
     */
    async policiesDummyPartialUpdate(requestParameters: PoliciesDummyPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DummyPolicy> {
        const response = await this.policiesDummyPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Dummy Viewset
     */
    async policiesDummyRetrieveRaw(requestParameters: PoliciesDummyRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DummyPolicy>> {
        if (requestParameters.policyUuid === null || requestParameters.policyUuid === undefined) {
            throw new runtime.RequiredError('policyUuid','Required parameter requestParameters.policyUuid was null or undefined when calling policiesDummyRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/dummy/{policy_uuid}/`.replace(`{${"policy_uuid"}}`, encodeURIComponent(String(requestParameters.policyUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DummyPolicyFromJSON(jsonValue));
    }

    /**
     * Dummy Viewset
     */
    async policiesDummyRetrieve(requestParameters: PoliciesDummyRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DummyPolicy> {
        const response = await this.policiesDummyRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Dummy Viewset
     */
    async policiesDummyUpdateRaw(requestParameters: PoliciesDummyUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<DummyPolicy>> {
        if (requestParameters.policyUuid === null || requestParameters.policyUuid === undefined) {
            throw new runtime.RequiredError('policyUuid','Required parameter requestParameters.policyUuid was null or undefined when calling policiesDummyUpdate.');
        }

        if (requestParameters.dummyPolicyRequest === null || requestParameters.dummyPolicyRequest === undefined) {
            throw new runtime.RequiredError('dummyPolicyRequest','Required parameter requestParameters.dummyPolicyRequest was null or undefined when calling policiesDummyUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/dummy/{policy_uuid}/`.replace(`{${"policy_uuid"}}`, encodeURIComponent(String(requestParameters.policyUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: DummyPolicyRequestToJSON(requestParameters.dummyPolicyRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => DummyPolicyFromJSON(jsonValue));
    }

    /**
     * Dummy Viewset
     */
    async policiesDummyUpdate(requestParameters: PoliciesDummyUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<DummyPolicy> {
        const response = await this.policiesDummyUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all objects that use this object
     */
    async policiesDummyUsedByListRaw(requestParameters: PoliciesDummyUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UsedBy>>> {
        if (requestParameters.policyUuid === null || requestParameters.policyUuid === undefined) {
            throw new runtime.RequiredError('policyUuid','Required parameter requestParameters.policyUuid was null or undefined when calling policiesDummyUsedByList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/dummy/{policy_uuid}/used_by/`.replace(`{${"policy_uuid"}}`, encodeURIComponent(String(requestParameters.policyUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
    }

    /**
     * Get a list of all objects that use this object
     */
    async policiesDummyUsedByList(requestParameters: PoliciesDummyUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UsedBy>> {
        const response = await this.policiesDummyUsedByListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Event Matcher Policy Viewset
     */
    async policiesEventMatcherCreateRaw(requestParameters: PoliciesEventMatcherCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventMatcherPolicy>> {
        if (requestParameters.eventMatcherPolicyRequest === null || requestParameters.eventMatcherPolicyRequest === undefined) {
            throw new runtime.RequiredError('eventMatcherPolicyRequest','Required parameter requestParameters.eventMatcherPolicyRequest was null or undefined when calling policiesEventMatcherCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/event_matcher/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EventMatcherPolicyRequestToJSON(requestParameters.eventMatcherPolicyRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventMatcherPolicyFromJSON(jsonValue));
    }

    /**
     * Event Matcher Policy Viewset
     */
    async policiesEventMatcherCreate(requestParameters: PoliciesEventMatcherCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventMatcherPolicy> {
        const response = await this.policiesEventMatcherCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Event Matcher Policy Viewset
     */
    async policiesEventMatcherDestroyRaw(requestParameters: PoliciesEventMatcherDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.policyUuid === null || requestParameters.policyUuid === undefined) {
            throw new runtime.RequiredError('policyUuid','Required parameter requestParameters.policyUuid was null or undefined when calling policiesEventMatcherDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/event_matcher/{policy_uuid}/`.replace(`{${"policy_uuid"}}`, encodeURIComponent(String(requestParameters.policyUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Event Matcher Policy Viewset
     */
    async policiesEventMatcherDestroy(requestParameters: PoliciesEventMatcherDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.policiesEventMatcherDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Event Matcher Policy Viewset
     */
    async policiesEventMatcherListRaw(requestParameters: PoliciesEventMatcherListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedEventMatcherPolicyList>> {
        const queryParameters: any = {};

        if (requestParameters.action !== undefined) {
            queryParameters['action'] = requestParameters.action;
        }

        if (requestParameters.app !== undefined) {
            queryParameters['app'] = requestParameters.app;
        }

        if (requestParameters.clientIp !== undefined) {
            queryParameters['client_ip'] = requestParameters.clientIp;
        }

        if (requestParameters.created !== undefined) {
            queryParameters['created'] = (requestParameters.created as any).toISOString();
        }

        if (requestParameters.executionLogging !== undefined) {
            queryParameters['execution_logging'] = requestParameters.executionLogging;
        }

        if (requestParameters.lastUpdated !== undefined) {
            queryParameters['last_updated'] = (requestParameters.lastUpdated as any).toISOString();
        }

        if (requestParameters.model !== undefined) {
            queryParameters['model'] = requestParameters.model;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.policyUuid !== undefined) {
            queryParameters['policy_uuid'] = requestParameters.policyUuid;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/event_matcher/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedEventMatcherPolicyListFromJSON(jsonValue));
    }

    /**
     * Event Matcher Policy Viewset
     */
    async policiesEventMatcherList(requestParameters: PoliciesEventMatcherListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedEventMatcherPolicyList> {
        const response = await this.policiesEventMatcherListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Event Matcher Policy Viewset
     */
    async policiesEventMatcherPartialUpdateRaw(requestParameters: PoliciesEventMatcherPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventMatcherPolicy>> {
        if (requestParameters.policyUuid === null || requestParameters.policyUuid === undefined) {
            throw new runtime.RequiredError('policyUuid','Required parameter requestParameters.policyUuid was null or undefined when calling policiesEventMatcherPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/event_matcher/{policy_uuid}/`.replace(`{${"policy_uuid"}}`, encodeURIComponent(String(requestParameters.policyUuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedEventMatcherPolicyRequestToJSON(requestParameters.patchedEventMatcherPolicyRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventMatcherPolicyFromJSON(jsonValue));
    }

    /**
     * Event Matcher Policy Viewset
     */
    async policiesEventMatcherPartialUpdate(requestParameters: PoliciesEventMatcherPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventMatcherPolicy> {
        const response = await this.policiesEventMatcherPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Event Matcher Policy Viewset
     */
    async policiesEventMatcherRetrieveRaw(requestParameters: PoliciesEventMatcherRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventMatcherPolicy>> {
        if (requestParameters.policyUuid === null || requestParameters.policyUuid === undefined) {
            throw new runtime.RequiredError('policyUuid','Required parameter requestParameters.policyUuid was null or undefined when calling policiesEventMatcherRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/event_matcher/{policy_uuid}/`.replace(`{${"policy_uuid"}}`, encodeURIComponent(String(requestParameters.policyUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventMatcherPolicyFromJSON(jsonValue));
    }

    /**
     * Event Matcher Policy Viewset
     */
    async policiesEventMatcherRetrieve(requestParameters: PoliciesEventMatcherRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventMatcherPolicy> {
        const response = await this.policiesEventMatcherRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Event Matcher Policy Viewset
     */
    async policiesEventMatcherUpdateRaw(requestParameters: PoliciesEventMatcherUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<EventMatcherPolicy>> {
        if (requestParameters.policyUuid === null || requestParameters.policyUuid === undefined) {
            throw new runtime.RequiredError('policyUuid','Required parameter requestParameters.policyUuid was null or undefined when calling policiesEventMatcherUpdate.');
        }

        if (requestParameters.eventMatcherPolicyRequest === null || requestParameters.eventMatcherPolicyRequest === undefined) {
            throw new runtime.RequiredError('eventMatcherPolicyRequest','Required parameter requestParameters.eventMatcherPolicyRequest was null or undefined when calling policiesEventMatcherUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/event_matcher/{policy_uuid}/`.replace(`{${"policy_uuid"}}`, encodeURIComponent(String(requestParameters.policyUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: EventMatcherPolicyRequestToJSON(requestParameters.eventMatcherPolicyRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => EventMatcherPolicyFromJSON(jsonValue));
    }

    /**
     * Event Matcher Policy Viewset
     */
    async policiesEventMatcherUpdate(requestParameters: PoliciesEventMatcherUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<EventMatcherPolicy> {
        const response = await this.policiesEventMatcherUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all objects that use this object
     */
    async policiesEventMatcherUsedByListRaw(requestParameters: PoliciesEventMatcherUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UsedBy>>> {
        if (requestParameters.policyUuid === null || requestParameters.policyUuid === undefined) {
            throw new runtime.RequiredError('policyUuid','Required parameter requestParameters.policyUuid was null or undefined when calling policiesEventMatcherUsedByList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/event_matcher/{policy_uuid}/used_by/`.replace(`{${"policy_uuid"}}`, encodeURIComponent(String(requestParameters.policyUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
    }

    /**
     * Get a list of all objects that use this object
     */
    async policiesEventMatcherUsedByList(requestParameters: PoliciesEventMatcherUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UsedBy>> {
        const response = await this.policiesEventMatcherUsedByListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Source Viewset
     */
    async policiesExpressionCreateRaw(requestParameters: PoliciesExpressionCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExpressionPolicy>> {
        if (requestParameters.expressionPolicyRequest === null || requestParameters.expressionPolicyRequest === undefined) {
            throw new runtime.RequiredError('expressionPolicyRequest','Required parameter requestParameters.expressionPolicyRequest was null or undefined when calling policiesExpressionCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/expression/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ExpressionPolicyRequestToJSON(requestParameters.expressionPolicyRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExpressionPolicyFromJSON(jsonValue));
    }

    /**
     * Source Viewset
     */
    async policiesExpressionCreate(requestParameters: PoliciesExpressionCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExpressionPolicy> {
        const response = await this.policiesExpressionCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Source Viewset
     */
    async policiesExpressionDestroyRaw(requestParameters: PoliciesExpressionDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.policyUuid === null || requestParameters.policyUuid === undefined) {
            throw new runtime.RequiredError('policyUuid','Required parameter requestParameters.policyUuid was null or undefined when calling policiesExpressionDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/expression/{policy_uuid}/`.replace(`{${"policy_uuid"}}`, encodeURIComponent(String(requestParameters.policyUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Source Viewset
     */
    async policiesExpressionDestroy(requestParameters: PoliciesExpressionDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.policiesExpressionDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Source Viewset
     */
    async policiesExpressionListRaw(requestParameters: PoliciesExpressionListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedExpressionPolicyList>> {
        const queryParameters: any = {};

        if (requestParameters.created !== undefined) {
            queryParameters['created'] = (requestParameters.created as any).toISOString();
        }

        if (requestParameters.executionLogging !== undefined) {
            queryParameters['execution_logging'] = requestParameters.executionLogging;
        }

        if (requestParameters.expression !== undefined) {
            queryParameters['expression'] = requestParameters.expression;
        }

        if (requestParameters.lastUpdated !== undefined) {
            queryParameters['last_updated'] = (requestParameters.lastUpdated as any).toISOString();
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.policyUuid !== undefined) {
            queryParameters['policy_uuid'] = requestParameters.policyUuid;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/expression/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedExpressionPolicyListFromJSON(jsonValue));
    }

    /**
     * Source Viewset
     */
    async policiesExpressionList(requestParameters: PoliciesExpressionListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedExpressionPolicyList> {
        const response = await this.policiesExpressionListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Source Viewset
     */
    async policiesExpressionPartialUpdateRaw(requestParameters: PoliciesExpressionPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExpressionPolicy>> {
        if (requestParameters.policyUuid === null || requestParameters.policyUuid === undefined) {
            throw new runtime.RequiredError('policyUuid','Required parameter requestParameters.policyUuid was null or undefined when calling policiesExpressionPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/expression/{policy_uuid}/`.replace(`{${"policy_uuid"}}`, encodeURIComponent(String(requestParameters.policyUuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedExpressionPolicyRequestToJSON(requestParameters.patchedExpressionPolicyRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExpressionPolicyFromJSON(jsonValue));
    }

    /**
     * Source Viewset
     */
    async policiesExpressionPartialUpdate(requestParameters: PoliciesExpressionPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExpressionPolicy> {
        const response = await this.policiesExpressionPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Source Viewset
     */
    async policiesExpressionRetrieveRaw(requestParameters: PoliciesExpressionRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExpressionPolicy>> {
        if (requestParameters.policyUuid === null || requestParameters.policyUuid === undefined) {
            throw new runtime.RequiredError('policyUuid','Required parameter requestParameters.policyUuid was null or undefined when calling policiesExpressionRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/expression/{policy_uuid}/`.replace(`{${"policy_uuid"}}`, encodeURIComponent(String(requestParameters.policyUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExpressionPolicyFromJSON(jsonValue));
    }

    /**
     * Source Viewset
     */
    async policiesExpressionRetrieve(requestParameters: PoliciesExpressionRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExpressionPolicy> {
        const response = await this.policiesExpressionRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Source Viewset
     */
    async policiesExpressionUpdateRaw(requestParameters: PoliciesExpressionUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ExpressionPolicy>> {
        if (requestParameters.policyUuid === null || requestParameters.policyUuid === undefined) {
            throw new runtime.RequiredError('policyUuid','Required parameter requestParameters.policyUuid was null or undefined when calling policiesExpressionUpdate.');
        }

        if (requestParameters.expressionPolicyRequest === null || requestParameters.expressionPolicyRequest === undefined) {
            throw new runtime.RequiredError('expressionPolicyRequest','Required parameter requestParameters.expressionPolicyRequest was null or undefined when calling policiesExpressionUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/expression/{policy_uuid}/`.replace(`{${"policy_uuid"}}`, encodeURIComponent(String(requestParameters.policyUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ExpressionPolicyRequestToJSON(requestParameters.expressionPolicyRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ExpressionPolicyFromJSON(jsonValue));
    }

    /**
     * Source Viewset
     */
    async policiesExpressionUpdate(requestParameters: PoliciesExpressionUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ExpressionPolicy> {
        const response = await this.policiesExpressionUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all objects that use this object
     */
    async policiesExpressionUsedByListRaw(requestParameters: PoliciesExpressionUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UsedBy>>> {
        if (requestParameters.policyUuid === null || requestParameters.policyUuid === undefined) {
            throw new runtime.RequiredError('policyUuid','Required parameter requestParameters.policyUuid was null or undefined when calling policiesExpressionUsedByList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/expression/{policy_uuid}/used_by/`.replace(`{${"policy_uuid"}}`, encodeURIComponent(String(requestParameters.policyUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
    }

    /**
     * Get a list of all objects that use this object
     */
    async policiesExpressionUsedByList(requestParameters: PoliciesExpressionUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UsedBy>> {
        const response = await this.policiesExpressionUsedByListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Password Policy Viewset
     */
    async policiesPasswordCreateRaw(requestParameters: PoliciesPasswordCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PasswordPolicy>> {
        if (requestParameters.passwordPolicyRequest === null || requestParameters.passwordPolicyRequest === undefined) {
            throw new runtime.RequiredError('passwordPolicyRequest','Required parameter requestParameters.passwordPolicyRequest was null or undefined when calling policiesPasswordCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/password/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PasswordPolicyRequestToJSON(requestParameters.passwordPolicyRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PasswordPolicyFromJSON(jsonValue));
    }

    /**
     * Password Policy Viewset
     */
    async policiesPasswordCreate(requestParameters: PoliciesPasswordCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PasswordPolicy> {
        const response = await this.policiesPasswordCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Password Policy Viewset
     */
    async policiesPasswordDestroyRaw(requestParameters: PoliciesPasswordDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.policyUuid === null || requestParameters.policyUuid === undefined) {
            throw new runtime.RequiredError('policyUuid','Required parameter requestParameters.policyUuid was null or undefined when calling policiesPasswordDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/password/{policy_uuid}/`.replace(`{${"policy_uuid"}}`, encodeURIComponent(String(requestParameters.policyUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Password Policy Viewset
     */
    async policiesPasswordDestroy(requestParameters: PoliciesPasswordDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.policiesPasswordDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Password Expiry Viewset
     */
    async policiesPasswordExpiryCreateRaw(requestParameters: PoliciesPasswordExpiryCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PasswordExpiryPolicy>> {
        if (requestParameters.passwordExpiryPolicyRequest === null || requestParameters.passwordExpiryPolicyRequest === undefined) {
            throw new runtime.RequiredError('passwordExpiryPolicyRequest','Required parameter requestParameters.passwordExpiryPolicyRequest was null or undefined when calling policiesPasswordExpiryCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/password_expiry/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PasswordExpiryPolicyRequestToJSON(requestParameters.passwordExpiryPolicyRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PasswordExpiryPolicyFromJSON(jsonValue));
    }

    /**
     * Password Expiry Viewset
     */
    async policiesPasswordExpiryCreate(requestParameters: PoliciesPasswordExpiryCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PasswordExpiryPolicy> {
        const response = await this.policiesPasswordExpiryCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Password Expiry Viewset
     */
    async policiesPasswordExpiryDestroyRaw(requestParameters: PoliciesPasswordExpiryDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.policyUuid === null || requestParameters.policyUuid === undefined) {
            throw new runtime.RequiredError('policyUuid','Required parameter requestParameters.policyUuid was null or undefined when calling policiesPasswordExpiryDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/password_expiry/{policy_uuid}/`.replace(`{${"policy_uuid"}}`, encodeURIComponent(String(requestParameters.policyUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Password Expiry Viewset
     */
    async policiesPasswordExpiryDestroy(requestParameters: PoliciesPasswordExpiryDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.policiesPasswordExpiryDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Password Expiry Viewset
     */
    async policiesPasswordExpiryListRaw(requestParameters: PoliciesPasswordExpiryListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPasswordExpiryPolicyList>> {
        const queryParameters: any = {};

        if (requestParameters.created !== undefined) {
            queryParameters['created'] = (requestParameters.created as any).toISOString();
        }

        if (requestParameters.days !== undefined) {
            queryParameters['days'] = requestParameters.days;
        }

        if (requestParameters.denyOnly !== undefined) {
            queryParameters['deny_only'] = requestParameters.denyOnly;
        }

        if (requestParameters.executionLogging !== undefined) {
            queryParameters['execution_logging'] = requestParameters.executionLogging;
        }

        if (requestParameters.lastUpdated !== undefined) {
            queryParameters['last_updated'] = (requestParameters.lastUpdated as any).toISOString();
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.policyUuid !== undefined) {
            queryParameters['policy_uuid'] = requestParameters.policyUuid;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/password_expiry/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedPasswordExpiryPolicyListFromJSON(jsonValue));
    }

    /**
     * Password Expiry Viewset
     */
    async policiesPasswordExpiryList(requestParameters: PoliciesPasswordExpiryListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPasswordExpiryPolicyList> {
        const response = await this.policiesPasswordExpiryListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Password Expiry Viewset
     */
    async policiesPasswordExpiryPartialUpdateRaw(requestParameters: PoliciesPasswordExpiryPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PasswordExpiryPolicy>> {
        if (requestParameters.policyUuid === null || requestParameters.policyUuid === undefined) {
            throw new runtime.RequiredError('policyUuid','Required parameter requestParameters.policyUuid was null or undefined when calling policiesPasswordExpiryPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/password_expiry/{policy_uuid}/`.replace(`{${"policy_uuid"}}`, encodeURIComponent(String(requestParameters.policyUuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedPasswordExpiryPolicyRequestToJSON(requestParameters.patchedPasswordExpiryPolicyRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PasswordExpiryPolicyFromJSON(jsonValue));
    }

    /**
     * Password Expiry Viewset
     */
    async policiesPasswordExpiryPartialUpdate(requestParameters: PoliciesPasswordExpiryPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PasswordExpiryPolicy> {
        const response = await this.policiesPasswordExpiryPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Password Expiry Viewset
     */
    async policiesPasswordExpiryRetrieveRaw(requestParameters: PoliciesPasswordExpiryRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PasswordExpiryPolicy>> {
        if (requestParameters.policyUuid === null || requestParameters.policyUuid === undefined) {
            throw new runtime.RequiredError('policyUuid','Required parameter requestParameters.policyUuid was null or undefined when calling policiesPasswordExpiryRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/password_expiry/{policy_uuid}/`.replace(`{${"policy_uuid"}}`, encodeURIComponent(String(requestParameters.policyUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PasswordExpiryPolicyFromJSON(jsonValue));
    }

    /**
     * Password Expiry Viewset
     */
    async policiesPasswordExpiryRetrieve(requestParameters: PoliciesPasswordExpiryRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PasswordExpiryPolicy> {
        const response = await this.policiesPasswordExpiryRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Password Expiry Viewset
     */
    async policiesPasswordExpiryUpdateRaw(requestParameters: PoliciesPasswordExpiryUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PasswordExpiryPolicy>> {
        if (requestParameters.policyUuid === null || requestParameters.policyUuid === undefined) {
            throw new runtime.RequiredError('policyUuid','Required parameter requestParameters.policyUuid was null or undefined when calling policiesPasswordExpiryUpdate.');
        }

        if (requestParameters.passwordExpiryPolicyRequest === null || requestParameters.passwordExpiryPolicyRequest === undefined) {
            throw new runtime.RequiredError('passwordExpiryPolicyRequest','Required parameter requestParameters.passwordExpiryPolicyRequest was null or undefined when calling policiesPasswordExpiryUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/password_expiry/{policy_uuid}/`.replace(`{${"policy_uuid"}}`, encodeURIComponent(String(requestParameters.policyUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PasswordExpiryPolicyRequestToJSON(requestParameters.passwordExpiryPolicyRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PasswordExpiryPolicyFromJSON(jsonValue));
    }

    /**
     * Password Expiry Viewset
     */
    async policiesPasswordExpiryUpdate(requestParameters: PoliciesPasswordExpiryUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PasswordExpiryPolicy> {
        const response = await this.policiesPasswordExpiryUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all objects that use this object
     */
    async policiesPasswordExpiryUsedByListRaw(requestParameters: PoliciesPasswordExpiryUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UsedBy>>> {
        if (requestParameters.policyUuid === null || requestParameters.policyUuid === undefined) {
            throw new runtime.RequiredError('policyUuid','Required parameter requestParameters.policyUuid was null or undefined when calling policiesPasswordExpiryUsedByList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/password_expiry/{policy_uuid}/used_by/`.replace(`{${"policy_uuid"}}`, encodeURIComponent(String(requestParameters.policyUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
    }

    /**
     * Get a list of all objects that use this object
     */
    async policiesPasswordExpiryUsedByList(requestParameters: PoliciesPasswordExpiryUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UsedBy>> {
        const response = await this.policiesPasswordExpiryUsedByListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Password Policy Viewset
     */
    async policiesPasswordListRaw(requestParameters: PoliciesPasswordListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedPasswordPolicyList>> {
        const queryParameters: any = {};

        if (requestParameters.amountDigits !== undefined) {
            queryParameters['amount_digits'] = requestParameters.amountDigits;
        }

        if (requestParameters.amountLowercase !== undefined) {
            queryParameters['amount_lowercase'] = requestParameters.amountLowercase;
        }

        if (requestParameters.amountSymbols !== undefined) {
            queryParameters['amount_symbols'] = requestParameters.amountSymbols;
        }

        if (requestParameters.amountUppercase !== undefined) {
            queryParameters['amount_uppercase'] = requestParameters.amountUppercase;
        }

        if (requestParameters.checkHaveIBeenPwned !== undefined) {
            queryParameters['check_have_i_been_pwned'] = requestParameters.checkHaveIBeenPwned;
        }

        if (requestParameters.checkStaticRules !== undefined) {
            queryParameters['check_static_rules'] = requestParameters.checkStaticRules;
        }

        if (requestParameters.checkZxcvbn !== undefined) {
            queryParameters['check_zxcvbn'] = requestParameters.checkZxcvbn;
        }

        if (requestParameters.created !== undefined) {
            queryParameters['created'] = (requestParameters.created as any).toISOString();
        }

        if (requestParameters.errorMessage !== undefined) {
            queryParameters['error_message'] = requestParameters.errorMessage;
        }

        if (requestParameters.executionLogging !== undefined) {
            queryParameters['execution_logging'] = requestParameters.executionLogging;
        }

        if (requestParameters.hibpAllowedCount !== undefined) {
            queryParameters['hibp_allowed_count'] = requestParameters.hibpAllowedCount;
        }

        if (requestParameters.lastUpdated !== undefined) {
            queryParameters['last_updated'] = (requestParameters.lastUpdated as any).toISOString();
        }

        if (requestParameters.lengthMin !== undefined) {
            queryParameters['length_min'] = requestParameters.lengthMin;
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.passwordField !== undefined) {
            queryParameters['password_field'] = requestParameters.passwordField;
        }

        if (requestParameters.policyUuid !== undefined) {
            queryParameters['policy_uuid'] = requestParameters.policyUuid;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.symbolCharset !== undefined) {
            queryParameters['symbol_charset'] = requestParameters.symbolCharset;
        }

        if (requestParameters.zxcvbnScoreThreshold !== undefined) {
            queryParameters['zxcvbn_score_threshold'] = requestParameters.zxcvbnScoreThreshold;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/password/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedPasswordPolicyListFromJSON(jsonValue));
    }

    /**
     * Password Policy Viewset
     */
    async policiesPasswordList(requestParameters: PoliciesPasswordListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedPasswordPolicyList> {
        const response = await this.policiesPasswordListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Password Policy Viewset
     */
    async policiesPasswordPartialUpdateRaw(requestParameters: PoliciesPasswordPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PasswordPolicy>> {
        if (requestParameters.policyUuid === null || requestParameters.policyUuid === undefined) {
            throw new runtime.RequiredError('policyUuid','Required parameter requestParameters.policyUuid was null or undefined when calling policiesPasswordPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/password/{policy_uuid}/`.replace(`{${"policy_uuid"}}`, encodeURIComponent(String(requestParameters.policyUuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedPasswordPolicyRequestToJSON(requestParameters.patchedPasswordPolicyRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PasswordPolicyFromJSON(jsonValue));
    }

    /**
     * Password Policy Viewset
     */
    async policiesPasswordPartialUpdate(requestParameters: PoliciesPasswordPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PasswordPolicy> {
        const response = await this.policiesPasswordPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Password Policy Viewset
     */
    async policiesPasswordRetrieveRaw(requestParameters: PoliciesPasswordRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PasswordPolicy>> {
        if (requestParameters.policyUuid === null || requestParameters.policyUuid === undefined) {
            throw new runtime.RequiredError('policyUuid','Required parameter requestParameters.policyUuid was null or undefined when calling policiesPasswordRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/password/{policy_uuid}/`.replace(`{${"policy_uuid"}}`, encodeURIComponent(String(requestParameters.policyUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PasswordPolicyFromJSON(jsonValue));
    }

    /**
     * Password Policy Viewset
     */
    async policiesPasswordRetrieve(requestParameters: PoliciesPasswordRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PasswordPolicy> {
        const response = await this.policiesPasswordRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Password Policy Viewset
     */
    async policiesPasswordUpdateRaw(requestParameters: PoliciesPasswordUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PasswordPolicy>> {
        if (requestParameters.policyUuid === null || requestParameters.policyUuid === undefined) {
            throw new runtime.RequiredError('policyUuid','Required parameter requestParameters.policyUuid was null or undefined when calling policiesPasswordUpdate.');
        }

        if (requestParameters.passwordPolicyRequest === null || requestParameters.passwordPolicyRequest === undefined) {
            throw new runtime.RequiredError('passwordPolicyRequest','Required parameter requestParameters.passwordPolicyRequest was null or undefined when calling policiesPasswordUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/password/{policy_uuid}/`.replace(`{${"policy_uuid"}}`, encodeURIComponent(String(requestParameters.policyUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: PasswordPolicyRequestToJSON(requestParameters.passwordPolicyRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PasswordPolicyFromJSON(jsonValue));
    }

    /**
     * Password Policy Viewset
     */
    async policiesPasswordUpdate(requestParameters: PoliciesPasswordUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PasswordPolicy> {
        const response = await this.policiesPasswordUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all objects that use this object
     */
    async policiesPasswordUsedByListRaw(requestParameters: PoliciesPasswordUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UsedBy>>> {
        if (requestParameters.policyUuid === null || requestParameters.policyUuid === undefined) {
            throw new runtime.RequiredError('policyUuid','Required parameter requestParameters.policyUuid was null or undefined when calling policiesPasswordUsedByList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/password/{policy_uuid}/used_by/`.replace(`{${"policy_uuid"}}`, encodeURIComponent(String(requestParameters.policyUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
    }

    /**
     * Get a list of all objects that use this object
     */
    async policiesPasswordUsedByList(requestParameters: PoliciesPasswordUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UsedBy>> {
        const response = await this.policiesPasswordUsedByListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reputation Policy Viewset
     */
    async policiesReputationCreateRaw(requestParameters: PoliciesReputationCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReputationPolicy>> {
        if (requestParameters.reputationPolicyRequest === null || requestParameters.reputationPolicyRequest === undefined) {
            throw new runtime.RequiredError('reputationPolicyRequest','Required parameter requestParameters.reputationPolicyRequest was null or undefined when calling policiesReputationCreate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/reputation/`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: ReputationPolicyRequestToJSON(requestParameters.reputationPolicyRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReputationPolicyFromJSON(jsonValue));
    }

    /**
     * Reputation Policy Viewset
     */
    async policiesReputationCreate(requestParameters: PoliciesReputationCreateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReputationPolicy> {
        const response = await this.policiesReputationCreateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reputation Policy Viewset
     */
    async policiesReputationDestroyRaw(requestParameters: PoliciesReputationDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.policyUuid === null || requestParameters.policyUuid === undefined) {
            throw new runtime.RequiredError('policyUuid','Required parameter requestParameters.policyUuid was null or undefined when calling policiesReputationDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/reputation/{policy_uuid}/`.replace(`{${"policy_uuid"}}`, encodeURIComponent(String(requestParameters.policyUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Reputation Policy Viewset
     */
    async policiesReputationDestroy(requestParameters: PoliciesReputationDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.policiesReputationDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Reputation Policy Viewset
     */
    async policiesReputationListRaw(requestParameters: PoliciesReputationListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedReputationPolicyList>> {
        const queryParameters: any = {};

        if (requestParameters.checkIp !== undefined) {
            queryParameters['check_ip'] = requestParameters.checkIp;
        }

        if (requestParameters.checkUsername !== undefined) {
            queryParameters['check_username'] = requestParameters.checkUsername;
        }

        if (requestParameters.created !== undefined) {
            queryParameters['created'] = (requestParameters.created as any).toISOString();
        }

        if (requestParameters.executionLogging !== undefined) {
            queryParameters['execution_logging'] = requestParameters.executionLogging;
        }

        if (requestParameters.lastUpdated !== undefined) {
            queryParameters['last_updated'] = (requestParameters.lastUpdated as any).toISOString();
        }

        if (requestParameters.name !== undefined) {
            queryParameters['name'] = requestParameters.name;
        }

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.policyUuid !== undefined) {
            queryParameters['policy_uuid'] = requestParameters.policyUuid;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        if (requestParameters.threshold !== undefined) {
            queryParameters['threshold'] = requestParameters.threshold;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/reputation/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedReputationPolicyListFromJSON(jsonValue));
    }

    /**
     * Reputation Policy Viewset
     */
    async policiesReputationList(requestParameters: PoliciesReputationListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedReputationPolicyList> {
        const response = await this.policiesReputationListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reputation Policy Viewset
     */
    async policiesReputationPartialUpdateRaw(requestParameters: PoliciesReputationPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReputationPolicy>> {
        if (requestParameters.policyUuid === null || requestParameters.policyUuid === undefined) {
            throw new runtime.RequiredError('policyUuid','Required parameter requestParameters.policyUuid was null or undefined when calling policiesReputationPartialUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/reputation/{policy_uuid}/`.replace(`{${"policy_uuid"}}`, encodeURIComponent(String(requestParameters.policyUuid))),
            method: 'PATCH',
            headers: headerParameters,
            query: queryParameters,
            body: PatchedReputationPolicyRequestToJSON(requestParameters.patchedReputationPolicyRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReputationPolicyFromJSON(jsonValue));
    }

    /**
     * Reputation Policy Viewset
     */
    async policiesReputationPartialUpdate(requestParameters: PoliciesReputationPartialUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReputationPolicy> {
        const response = await this.policiesReputationPartialUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reputation Policy Viewset
     */
    async policiesReputationRetrieveRaw(requestParameters: PoliciesReputationRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReputationPolicy>> {
        if (requestParameters.policyUuid === null || requestParameters.policyUuid === undefined) {
            throw new runtime.RequiredError('policyUuid','Required parameter requestParameters.policyUuid was null or undefined when calling policiesReputationRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/reputation/{policy_uuid}/`.replace(`{${"policy_uuid"}}`, encodeURIComponent(String(requestParameters.policyUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReputationPolicyFromJSON(jsonValue));
    }

    /**
     * Reputation Policy Viewset
     */
    async policiesReputationRetrieve(requestParameters: PoliciesReputationRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReputationPolicy> {
        const response = await this.policiesReputationRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reputation Viewset
     */
    async policiesReputationScoresDestroyRaw(requestParameters: PoliciesReputationScoresDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<void>> {
        if (requestParameters.reputationUuid === null || requestParameters.reputationUuid === undefined) {
            throw new runtime.RequiredError('reputationUuid','Required parameter requestParameters.reputationUuid was null or undefined when calling policiesReputationScoresDestroy.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/reputation/scores/{reputation_uuid}/`.replace(`{${"reputation_uuid"}}`, encodeURIComponent(String(requestParameters.reputationUuid))),
            method: 'DELETE',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.VoidApiResponse(response);
    }

    /**
     * Reputation Viewset
     */
    async policiesReputationScoresDestroy(requestParameters: PoliciesReputationScoresDestroyRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<void> {
        await this.policiesReputationScoresDestroyRaw(requestParameters, initOverrides);
    }

    /**
     * Reputation Viewset
     */
    async policiesReputationScoresListRaw(requestParameters: PoliciesReputationScoresListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<PaginatedReputationList>> {
        const queryParameters: any = {};

        if (requestParameters.identifier !== undefined) {
            queryParameters['identifier'] = requestParameters.identifier;
        }

        if (requestParameters.ip !== undefined) {
            queryParameters['ip'] = requestParameters.ip;
        }

        if (requestParameters.ordering !== undefined) {
            queryParameters['ordering'] = requestParameters.ordering;
        }

        if (requestParameters.page !== undefined) {
            queryParameters['page'] = requestParameters.page;
        }

        if (requestParameters.pageSize !== undefined) {
            queryParameters['page_size'] = requestParameters.pageSize;
        }

        if (requestParameters.score !== undefined) {
            queryParameters['score'] = requestParameters.score;
        }

        if (requestParameters.search !== undefined) {
            queryParameters['search'] = requestParameters.search;
        }

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/reputation/scores/`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => PaginatedReputationListFromJSON(jsonValue));
    }

    /**
     * Reputation Viewset
     */
    async policiesReputationScoresList(requestParameters: PoliciesReputationScoresListRequest = {}, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<PaginatedReputationList> {
        const response = await this.policiesReputationScoresListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reputation Viewset
     */
    async policiesReputationScoresRetrieveRaw(requestParameters: PoliciesReputationScoresRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Reputation>> {
        if (requestParameters.reputationUuid === null || requestParameters.reputationUuid === undefined) {
            throw new runtime.RequiredError('reputationUuid','Required parameter requestParameters.reputationUuid was null or undefined when calling policiesReputationScoresRetrieve.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/reputation/scores/{reputation_uuid}/`.replace(`{${"reputation_uuid"}}`, encodeURIComponent(String(requestParameters.reputationUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReputationFromJSON(jsonValue));
    }

    /**
     * Reputation Viewset
     */
    async policiesReputationScoresRetrieve(requestParameters: PoliciesReputationScoresRetrieveRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Reputation> {
        const response = await this.policiesReputationScoresRetrieveRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all objects that use this object
     */
    async policiesReputationScoresUsedByListRaw(requestParameters: PoliciesReputationScoresUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UsedBy>>> {
        if (requestParameters.reputationUuid === null || requestParameters.reputationUuid === undefined) {
            throw new runtime.RequiredError('reputationUuid','Required parameter requestParameters.reputationUuid was null or undefined when calling policiesReputationScoresUsedByList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/reputation/scores/{reputation_uuid}/used_by/`.replace(`{${"reputation_uuid"}}`, encodeURIComponent(String(requestParameters.reputationUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
    }

    /**
     * Get a list of all objects that use this object
     */
    async policiesReputationScoresUsedByList(requestParameters: PoliciesReputationScoresUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UsedBy>> {
        const response = await this.policiesReputationScoresUsedByListRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Reputation Policy Viewset
     */
    async policiesReputationUpdateRaw(requestParameters: PoliciesReputationUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ReputationPolicy>> {
        if (requestParameters.policyUuid === null || requestParameters.policyUuid === undefined) {
            throw new runtime.RequiredError('policyUuid','Required parameter requestParameters.policyUuid was null or undefined when calling policiesReputationUpdate.');
        }

        if (requestParameters.reputationPolicyRequest === null || requestParameters.reputationPolicyRequest === undefined) {
            throw new runtime.RequiredError('reputationPolicyRequest','Required parameter requestParameters.reputationPolicyRequest was null or undefined when calling policiesReputationUpdate.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/reputation/{policy_uuid}/`.replace(`{${"policy_uuid"}}`, encodeURIComponent(String(requestParameters.policyUuid))),
            method: 'PUT',
            headers: headerParameters,
            query: queryParameters,
            body: ReputationPolicyRequestToJSON(requestParameters.reputationPolicyRequest),
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ReputationPolicyFromJSON(jsonValue));
    }

    /**
     * Reputation Policy Viewset
     */
    async policiesReputationUpdate(requestParameters: PoliciesReputationUpdateRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ReputationPolicy> {
        const response = await this.policiesReputationUpdateRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     * Get a list of all objects that use this object
     */
    async policiesReputationUsedByListRaw(requestParameters: PoliciesReputationUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<Array<UsedBy>>> {
        if (requestParameters.policyUuid === null || requestParameters.policyUuid === undefined) {
            throw new runtime.RequiredError('policyUuid','Required parameter requestParameters.policyUuid was null or undefined when calling policiesReputationUsedByList.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        if (this.configuration && this.configuration.apiKey) {
            headerParameters["Authorization"] = this.configuration.apiKey("Authorization"); // authentik authentication
        }

        const response = await this.request({
            path: `/policies/reputation/{policy_uuid}/used_by/`.replace(`{${"policy_uuid"}}`, encodeURIComponent(String(requestParameters.policyUuid))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => jsonValue.map(UsedByFromJSON));
    }

    /**
     * Get a list of all objects that use this object
     */
    async policiesReputationUsedByList(requestParameters: PoliciesReputationUsedByListRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<Array<UsedBy>> {
        const response = await this.policiesReputationUsedByListRaw(requestParameters, initOverrides);
        return await response.value();
    }

}

/**
 * @export
 */
export const PoliciesEventMatcherListActionEnum = {
    AuthorizeApplication: 'authorize_application',
    ConfigurationError: 'configuration_error',
    Custom: 'custom_',
    EmailSent: 'email_sent',
    FlowExecution: 'flow_execution',
    ImpersonationEnded: 'impersonation_ended',
    ImpersonationStarted: 'impersonation_started',
    InvitationUsed: 'invitation_used',
    Login: 'login',
    LoginFailed: 'login_failed',
    Logout: 'logout',
    ModelCreated: 'model_created',
    ModelDeleted: 'model_deleted',
    ModelUpdated: 'model_updated',
    PasswordSet: 'password_set',
    PolicyException: 'policy_exception',
    PolicyExecution: 'policy_execution',
    PropertyMappingException: 'property_mapping_exception',
    SecretRotate: 'secret_rotate',
    SecretView: 'secret_view',
    SourceLinked: 'source_linked',
    SuspiciousRequest: 'suspicious_request',
    SystemException: 'system_exception',
    SystemTaskException: 'system_task_exception',
    SystemTaskExecution: 'system_task_execution',
    UpdateAvailable: 'update_available',
    UserWrite: 'user_write',
    UnknownDefaultOpenApi: '11184809'
} as const;
export type PoliciesEventMatcherListActionEnum = typeof PoliciesEventMatcherListActionEnum[keyof typeof PoliciesEventMatcherListActionEnum];
