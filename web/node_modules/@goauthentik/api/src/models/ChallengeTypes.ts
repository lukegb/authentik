/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import {
    AccessDeniedChallenge,
    instanceOfAccessDeniedChallenge,
    AccessDeniedChallengeFromJSON,
    AccessDeniedChallengeFromJSONTyped,
    AccessDeniedChallengeToJSON,
} from './AccessDeniedChallenge';
import {
    AppleLoginChallenge,
    instanceOfAppleLoginChallenge,
    AppleLoginChallengeFromJSON,
    AppleLoginChallengeFromJSONTyped,
    AppleLoginChallengeToJSON,
} from './AppleLoginChallenge';
import {
    AuthenticatorDuoChallenge,
    instanceOfAuthenticatorDuoChallenge,
    AuthenticatorDuoChallengeFromJSON,
    AuthenticatorDuoChallengeFromJSONTyped,
    AuthenticatorDuoChallengeToJSON,
} from './AuthenticatorDuoChallenge';
import {
    AuthenticatorSMSChallenge,
    instanceOfAuthenticatorSMSChallenge,
    AuthenticatorSMSChallengeFromJSON,
    AuthenticatorSMSChallengeFromJSONTyped,
    AuthenticatorSMSChallengeToJSON,
} from './AuthenticatorSMSChallenge';
import {
    AuthenticatorStaticChallenge,
    instanceOfAuthenticatorStaticChallenge,
    AuthenticatorStaticChallengeFromJSON,
    AuthenticatorStaticChallengeFromJSONTyped,
    AuthenticatorStaticChallengeToJSON,
} from './AuthenticatorStaticChallenge';
import {
    AuthenticatorTOTPChallenge,
    instanceOfAuthenticatorTOTPChallenge,
    AuthenticatorTOTPChallengeFromJSON,
    AuthenticatorTOTPChallengeFromJSONTyped,
    AuthenticatorTOTPChallengeToJSON,
} from './AuthenticatorTOTPChallenge';
import {
    AuthenticatorValidationChallenge,
    instanceOfAuthenticatorValidationChallenge,
    AuthenticatorValidationChallengeFromJSON,
    AuthenticatorValidationChallengeFromJSONTyped,
    AuthenticatorValidationChallengeToJSON,
} from './AuthenticatorValidationChallenge';
import {
    AuthenticatorWebAuthnChallenge,
    instanceOfAuthenticatorWebAuthnChallenge,
    AuthenticatorWebAuthnChallengeFromJSON,
    AuthenticatorWebAuthnChallengeFromJSONTyped,
    AuthenticatorWebAuthnChallengeToJSON,
} from './AuthenticatorWebAuthnChallenge';
import {
    AutosubmitChallenge,
    instanceOfAutosubmitChallenge,
    AutosubmitChallengeFromJSON,
    AutosubmitChallengeFromJSONTyped,
    AutosubmitChallengeToJSON,
} from './AutosubmitChallenge';
import {
    CaptchaChallenge,
    instanceOfCaptchaChallenge,
    CaptchaChallengeFromJSON,
    CaptchaChallengeFromJSONTyped,
    CaptchaChallengeToJSON,
} from './CaptchaChallenge';
import {
    ConsentChallenge,
    instanceOfConsentChallenge,
    ConsentChallengeFromJSON,
    ConsentChallengeFromJSONTyped,
    ConsentChallengeToJSON,
} from './ConsentChallenge';
import {
    DummyChallenge,
    instanceOfDummyChallenge,
    DummyChallengeFromJSON,
    DummyChallengeFromJSONTyped,
    DummyChallengeToJSON,
} from './DummyChallenge';
import {
    EmailChallenge,
    instanceOfEmailChallenge,
    EmailChallengeFromJSON,
    EmailChallengeFromJSONTyped,
    EmailChallengeToJSON,
} from './EmailChallenge';
import {
    FlowErrorChallenge,
    instanceOfFlowErrorChallenge,
    FlowErrorChallengeFromJSON,
    FlowErrorChallengeFromJSONTyped,
    FlowErrorChallengeToJSON,
} from './FlowErrorChallenge';
import {
    IdentificationChallenge,
    instanceOfIdentificationChallenge,
    IdentificationChallengeFromJSON,
    IdentificationChallengeFromJSONTyped,
    IdentificationChallengeToJSON,
} from './IdentificationChallenge';
import {
    OAuthDeviceCodeChallenge,
    instanceOfOAuthDeviceCodeChallenge,
    OAuthDeviceCodeChallengeFromJSON,
    OAuthDeviceCodeChallengeFromJSONTyped,
    OAuthDeviceCodeChallengeToJSON,
} from './OAuthDeviceCodeChallenge';
import {
    OAuthDeviceCodeFinishChallenge,
    instanceOfOAuthDeviceCodeFinishChallenge,
    OAuthDeviceCodeFinishChallengeFromJSON,
    OAuthDeviceCodeFinishChallengeFromJSONTyped,
    OAuthDeviceCodeFinishChallengeToJSON,
} from './OAuthDeviceCodeFinishChallenge';
import {
    PasswordChallenge,
    instanceOfPasswordChallenge,
    PasswordChallengeFromJSON,
    PasswordChallengeFromJSONTyped,
    PasswordChallengeToJSON,
} from './PasswordChallenge';
import {
    PlexAuthenticationChallenge,
    instanceOfPlexAuthenticationChallenge,
    PlexAuthenticationChallengeFromJSON,
    PlexAuthenticationChallengeFromJSONTyped,
    PlexAuthenticationChallengeToJSON,
} from './PlexAuthenticationChallenge';
import {
    PromptChallenge,
    instanceOfPromptChallenge,
    PromptChallengeFromJSON,
    PromptChallengeFromJSONTyped,
    PromptChallengeToJSON,
} from './PromptChallenge';
import {
    RedirectChallenge,
    instanceOfRedirectChallenge,
    RedirectChallengeFromJSON,
    RedirectChallengeFromJSONTyped,
    RedirectChallengeToJSON,
} from './RedirectChallenge';
import {
    ShellChallenge,
    instanceOfShellChallenge,
    ShellChallengeFromJSON,
    ShellChallengeFromJSONTyped,
    ShellChallengeToJSON,
} from './ShellChallenge';
import {
    UserLoginChallenge,
    instanceOfUserLoginChallenge,
    UserLoginChallengeFromJSON,
    UserLoginChallengeFromJSONTyped,
    UserLoginChallengeToJSON,
} from './UserLoginChallenge';

/**
 * @type ChallengeTypes
 * 
 * @export
 */
export type ChallengeTypes = { component: 'ak-provider-oauth2-device-code' } & OAuthDeviceCodeChallenge | { component: 'ak-provider-oauth2-device-code-finish' } & OAuthDeviceCodeFinishChallenge | { component: 'ak-source-oauth-apple' } & AppleLoginChallenge | { component: 'ak-source-plex' } & PlexAuthenticationChallenge | { component: 'ak-stage-access-denied' } & AccessDeniedChallenge | { component: 'ak-stage-authenticator-duo' } & AuthenticatorDuoChallenge | { component: 'ak-stage-authenticator-sms' } & AuthenticatorSMSChallenge | { component: 'ak-stage-authenticator-static' } & AuthenticatorStaticChallenge | { component: 'ak-stage-authenticator-totp' } & AuthenticatorTOTPChallenge | { component: 'ak-stage-authenticator-validate' } & AuthenticatorValidationChallenge | { component: 'ak-stage-authenticator-webauthn' } & AuthenticatorWebAuthnChallenge | { component: 'ak-stage-autosubmit' } & AutosubmitChallenge | { component: 'ak-stage-captcha' } & CaptchaChallenge | { component: 'ak-stage-consent' } & ConsentChallenge | { component: 'ak-stage-dummy' } & DummyChallenge | { component: 'ak-stage-email' } & EmailChallenge | { component: 'ak-stage-flow-error' } & FlowErrorChallenge | { component: 'ak-stage-identification' } & IdentificationChallenge | { component: 'ak-stage-password' } & PasswordChallenge | { component: 'ak-stage-prompt' } & PromptChallenge | { component: 'ak-stage-user-login' } & UserLoginChallenge | { component: 'xak-flow-redirect' } & RedirectChallenge | { component: 'xak-flow-shell' } & ShellChallenge;

export function ChallengeTypesFromJSON(json: any): ChallengeTypes {
    return ChallengeTypesFromJSONTyped(json, false);
}

export function ChallengeTypesFromJSONTyped(json: any, ignoreDiscriminator: boolean): ChallengeTypes {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    switch (json['component']) {
        case 'ak-provider-oauth2-device-code':
            return {...OAuthDeviceCodeChallengeFromJSONTyped(json, true), component: 'ak-provider-oauth2-device-code'};
        case 'ak-provider-oauth2-device-code-finish':
            return {...OAuthDeviceCodeFinishChallengeFromJSONTyped(json, true), component: 'ak-provider-oauth2-device-code-finish'};
        case 'ak-source-oauth-apple':
            return {...AppleLoginChallengeFromJSONTyped(json, true), component: 'ak-source-oauth-apple'};
        case 'ak-source-plex':
            return {...PlexAuthenticationChallengeFromJSONTyped(json, true), component: 'ak-source-plex'};
        case 'ak-stage-access-denied':
            return {...AccessDeniedChallengeFromJSONTyped(json, true), component: 'ak-stage-access-denied'};
        case 'ak-stage-authenticator-duo':
            return {...AuthenticatorDuoChallengeFromJSONTyped(json, true), component: 'ak-stage-authenticator-duo'};
        case 'ak-stage-authenticator-sms':
            return {...AuthenticatorSMSChallengeFromJSONTyped(json, true), component: 'ak-stage-authenticator-sms'};
        case 'ak-stage-authenticator-static':
            return {...AuthenticatorStaticChallengeFromJSONTyped(json, true), component: 'ak-stage-authenticator-static'};
        case 'ak-stage-authenticator-totp':
            return {...AuthenticatorTOTPChallengeFromJSONTyped(json, true), component: 'ak-stage-authenticator-totp'};
        case 'ak-stage-authenticator-validate':
            return {...AuthenticatorValidationChallengeFromJSONTyped(json, true), component: 'ak-stage-authenticator-validate'};
        case 'ak-stage-authenticator-webauthn':
            return {...AuthenticatorWebAuthnChallengeFromJSONTyped(json, true), component: 'ak-stage-authenticator-webauthn'};
        case 'ak-stage-autosubmit':
            return {...AutosubmitChallengeFromJSONTyped(json, true), component: 'ak-stage-autosubmit'};
        case 'ak-stage-captcha':
            return {...CaptchaChallengeFromJSONTyped(json, true), component: 'ak-stage-captcha'};
        case 'ak-stage-consent':
            return {...ConsentChallengeFromJSONTyped(json, true), component: 'ak-stage-consent'};
        case 'ak-stage-dummy':
            return {...DummyChallengeFromJSONTyped(json, true), component: 'ak-stage-dummy'};
        case 'ak-stage-email':
            return {...EmailChallengeFromJSONTyped(json, true), component: 'ak-stage-email'};
        case 'ak-stage-flow-error':
            return {...FlowErrorChallengeFromJSONTyped(json, true), component: 'ak-stage-flow-error'};
        case 'ak-stage-identification':
            return {...IdentificationChallengeFromJSONTyped(json, true), component: 'ak-stage-identification'};
        case 'ak-stage-password':
            return {...PasswordChallengeFromJSONTyped(json, true), component: 'ak-stage-password'};
        case 'ak-stage-prompt':
            return {...PromptChallengeFromJSONTyped(json, true), component: 'ak-stage-prompt'};
        case 'ak-stage-user-login':
            return {...UserLoginChallengeFromJSONTyped(json, true), component: 'ak-stage-user-login'};
        case 'xak-flow-redirect':
            return {...RedirectChallengeFromJSONTyped(json, true), component: 'xak-flow-redirect'};
        case 'xak-flow-shell':
            return {...ShellChallengeFromJSONTyped(json, true), component: 'xak-flow-shell'};
        default:
            throw new Error(`No variant of ChallengeTypes exists with 'component=${json['component']}'`);
    }
}

export function ChallengeTypesToJSON(value?: ChallengeTypes | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    switch (value['component']) {
        case 'ak-provider-oauth2-device-code':
            return OAuthDeviceCodeChallengeToJSON(value);
        case 'ak-provider-oauth2-device-code-finish':
            return OAuthDeviceCodeFinishChallengeToJSON(value);
        case 'ak-source-oauth-apple':
            return AppleLoginChallengeToJSON(value);
        case 'ak-source-plex':
            return PlexAuthenticationChallengeToJSON(value);
        case 'ak-stage-access-denied':
            return AccessDeniedChallengeToJSON(value);
        case 'ak-stage-authenticator-duo':
            return AuthenticatorDuoChallengeToJSON(value);
        case 'ak-stage-authenticator-sms':
            return AuthenticatorSMSChallengeToJSON(value);
        case 'ak-stage-authenticator-static':
            return AuthenticatorStaticChallengeToJSON(value);
        case 'ak-stage-authenticator-totp':
            return AuthenticatorTOTPChallengeToJSON(value);
        case 'ak-stage-authenticator-validate':
            return AuthenticatorValidationChallengeToJSON(value);
        case 'ak-stage-authenticator-webauthn':
            return AuthenticatorWebAuthnChallengeToJSON(value);
        case 'ak-stage-autosubmit':
            return AutosubmitChallengeToJSON(value);
        case 'ak-stage-captcha':
            return CaptchaChallengeToJSON(value);
        case 'ak-stage-consent':
            return ConsentChallengeToJSON(value);
        case 'ak-stage-dummy':
            return DummyChallengeToJSON(value);
        case 'ak-stage-email':
            return EmailChallengeToJSON(value);
        case 'ak-stage-flow-error':
            return FlowErrorChallengeToJSON(value);
        case 'ak-stage-identification':
            return IdentificationChallengeToJSON(value);
        case 'ak-stage-password':
            return PasswordChallengeToJSON(value);
        case 'ak-stage-prompt':
            return PromptChallengeToJSON(value);
        case 'ak-stage-user-login':
            return UserLoginChallengeToJSON(value);
        case 'xak-flow-redirect':
            return RedirectChallengeToJSON(value);
        case 'xak-flow-shell':
            return ShellChallengeToJSON(value);
        default:
            throw new Error(`No variant of ChallengeTypes exists with 'component=${value['component']}'`);
    }

}

