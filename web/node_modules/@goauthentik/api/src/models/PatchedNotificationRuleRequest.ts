/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { SeverityEnum } from './SeverityEnum';
import {
    SeverityEnumFromJSON,
    SeverityEnumFromJSONTyped,
    SeverityEnumToJSON,
} from './SeverityEnum';

/**
 * NotificationRule Serializer
 * @export
 * @interface PatchedNotificationRuleRequest
 */
export interface PatchedNotificationRuleRequest {
    /**
     * 
     * @type {string}
     * @memberof PatchedNotificationRuleRequest
     */
    name?: string;
    /**
     * Select which transports should be used to notify the user. If none are selected, the notification will only be shown in the authentik UI.
     * @type {Array<string>}
     * @memberof PatchedNotificationRuleRequest
     */
    transports?: Array<string>;
    /**
     * 
     * @type {SeverityEnum}
     * @memberof PatchedNotificationRuleRequest
     */
    severity?: SeverityEnum;
    /**
     * Define which group of users this notification should be sent and shown to. If left empty, Notification won't ben sent.
     * @type {string}
     * @memberof PatchedNotificationRuleRequest
     */
    group?: string | null;
}

/**
 * Check if a given object implements the PatchedNotificationRuleRequest interface.
 */
export function instanceOfPatchedNotificationRuleRequest(value: object): boolean {
    let isInstance = true;

    return isInstance;
}

export function PatchedNotificationRuleRequestFromJSON(json: any): PatchedNotificationRuleRequest {
    return PatchedNotificationRuleRequestFromJSONTyped(json, false);
}

export function PatchedNotificationRuleRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): PatchedNotificationRuleRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': !exists(json, 'name') ? undefined : json['name'],
        'transports': !exists(json, 'transports') ? undefined : json['transports'],
        'severity': !exists(json, 'severity') ? undefined : SeverityEnumFromJSON(json['severity']),
        'group': !exists(json, 'group') ? undefined : json['group'],
    };
}

export function PatchedNotificationRuleRequestToJSON(value?: PatchedNotificationRuleRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'transports': value.transports,
        'severity': SeverityEnumToJSON(value.severity),
        'group': value.group,
    };
}

