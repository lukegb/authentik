/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ChallengeChoices } from './ChallengeChoices';
import {
    ChallengeChoicesFromJSON,
    ChallengeChoicesFromJSONTyped,
    ChallengeChoicesToJSON,
} from './ChallengeChoices';
import type { ContextualFlowInfo } from './ContextualFlowInfo';
import {
    ContextualFlowInfoFromJSON,
    ContextualFlowInfoFromJSONTyped,
    ContextualFlowInfoToJSON,
} from './ContextualFlowInfo';
import type { DeviceChallenge } from './DeviceChallenge';
import {
    DeviceChallengeFromJSON,
    DeviceChallengeFromJSONTyped,
    DeviceChallengeToJSON,
} from './DeviceChallenge';
import type { ErrorDetail } from './ErrorDetail';
import {
    ErrorDetailFromJSON,
    ErrorDetailFromJSONTyped,
    ErrorDetailToJSON,
} from './ErrorDetail';
import type { SelectableStage } from './SelectableStage';
import {
    SelectableStageFromJSON,
    SelectableStageFromJSONTyped,
    SelectableStageToJSON,
} from './SelectableStage';

/**
 * Authenticator challenge
 * @export
 * @interface AuthenticatorValidationChallenge
 */
export interface AuthenticatorValidationChallenge {
    /**
     * 
     * @type {ChallengeChoices}
     * @memberof AuthenticatorValidationChallenge
     */
    type: ChallengeChoices;
    /**
     * 
     * @type {ContextualFlowInfo}
     * @memberof AuthenticatorValidationChallenge
     */
    flowInfo?: ContextualFlowInfo;
    /**
     * 
     * @type {string}
     * @memberof AuthenticatorValidationChallenge
     */
    component?: string;
    /**
     * 
     * @type {{ [key: string]: Array<ErrorDetail>; }}
     * @memberof AuthenticatorValidationChallenge
     */
    responseErrors?: { [key: string]: Array<ErrorDetail>; };
    /**
     * 
     * @type {string}
     * @memberof AuthenticatorValidationChallenge
     */
    pendingUser: string;
    /**
     * 
     * @type {string}
     * @memberof AuthenticatorValidationChallenge
     */
    pendingUserAvatar: string;
    /**
     * 
     * @type {Array<DeviceChallenge>}
     * @memberof AuthenticatorValidationChallenge
     */
    deviceChallenges: Array<DeviceChallenge>;
    /**
     * 
     * @type {Array<SelectableStage>}
     * @memberof AuthenticatorValidationChallenge
     */
    configurationStages: Array<SelectableStage>;
}

/**
 * Check if a given object implements the AuthenticatorValidationChallenge interface.
 */
export function instanceOfAuthenticatorValidationChallenge(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "type" in value;
    isInstance = isInstance && "pendingUser" in value;
    isInstance = isInstance && "pendingUserAvatar" in value;
    isInstance = isInstance && "deviceChallenges" in value;
    isInstance = isInstance && "configurationStages" in value;

    return isInstance;
}

export function AuthenticatorValidationChallengeFromJSON(json: any): AuthenticatorValidationChallenge {
    return AuthenticatorValidationChallengeFromJSONTyped(json, false);
}

export function AuthenticatorValidationChallengeFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuthenticatorValidationChallenge {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'type': ChallengeChoicesFromJSON(json['type']),
        'flowInfo': !exists(json, 'flow_info') ? undefined : ContextualFlowInfoFromJSON(json['flow_info']),
        'component': !exists(json, 'component') ? undefined : json['component'],
        'responseErrors': !exists(json, 'response_errors') ? undefined : json['response_errors'],
        'pendingUser': json['pending_user'],
        'pendingUserAvatar': json['pending_user_avatar'],
        'deviceChallenges': ((json['device_challenges'] as Array<any>).map(DeviceChallengeFromJSON)),
        'configurationStages': ((json['configuration_stages'] as Array<any>).map(SelectableStageFromJSON)),
    };
}

export function AuthenticatorValidationChallengeToJSON(value?: AuthenticatorValidationChallenge | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'type': ChallengeChoicesToJSON(value.type),
        'flow_info': ContextualFlowInfoToJSON(value.flowInfo),
        'component': value.component,
        'response_errors': value.responseErrors,
        'pending_user': value.pendingUser,
        'pending_user_avatar': value.pendingUserAvatar,
        'device_challenges': ((value.deviceChallenges as Array<any>).map(DeviceChallengeToJSON)),
        'configuration_stages': ((value.configurationStages as Array<any>).map(SelectableStageToJSON)),
    };
}

