/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { ApplicationRequest } from './ApplicationRequest';
import {
    ApplicationRequestFromJSON,
    ApplicationRequestFromJSONTyped,
    ApplicationRequestToJSON,
} from './ApplicationRequest';
import type { ModelRequest } from './ModelRequest';
import {
    ModelRequestFromJSON,
    ModelRequestFromJSONTyped,
    ModelRequestToJSON,
} from './ModelRequest';
import type { ProviderModelEnum } from './ProviderModelEnum';
import {
    ProviderModelEnumFromJSON,
    ProviderModelEnumFromJSONTyped,
    ProviderModelEnumToJSON,
} from './ProviderModelEnum';

/**
 * Serializer for creating a provider and an application in one transaction
 * @export
 * @interface TransactionApplicationRequest
 */
export interface TransactionApplicationRequest {
    /**
     * 
     * @type {ApplicationRequest}
     * @memberof TransactionApplicationRequest
     */
    app: ApplicationRequest;
    /**
     * 
     * @type {ProviderModelEnum}
     * @memberof TransactionApplicationRequest
     */
    providerModel: ProviderModelEnum;
    /**
     * 
     * @type {ModelRequest}
     * @memberof TransactionApplicationRequest
     */
    provider: ModelRequest;
}

/**
 * Check if a given object implements the TransactionApplicationRequest interface.
 */
export function instanceOfTransactionApplicationRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "app" in value;
    isInstance = isInstance && "providerModel" in value;
    isInstance = isInstance && "provider" in value;

    return isInstance;
}

export function TransactionApplicationRequestFromJSON(json: any): TransactionApplicationRequest {
    return TransactionApplicationRequestFromJSONTyped(json, false);
}

export function TransactionApplicationRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): TransactionApplicationRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'app': ApplicationRequestFromJSON(json['app']),
        'providerModel': ProviderModelEnumFromJSON(json['provider_model']),
        'provider': ModelRequestFromJSON(json['provider']),
    };
}

export function TransactionApplicationRequestToJSON(value?: TransactionApplicationRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'app': ApplicationRequestToJSON(value.app),
        'provider_model': ProviderModelEnumToJSON(value.providerModel),
        'provider': ModelRequestToJSON(value.provider),
    };
}

