/*
authentik

Testing PoliciesApiService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package api

import (
	"context"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
	openapiclient "github.com/GIT_USER_ID/GIT_REPO_ID"
)

func Test_api_PoliciesApiService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test PoliciesApiService PoliciesAllCacheClearCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		httpRes, err := apiClient.PoliciesApi.PoliciesAllCacheClearCreate(context.Background()).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesAllCacheInfoRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PoliciesApi.PoliciesAllCacheInfoRetrieve(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesAllDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		httpRes, err := apiClient.PoliciesApi.PoliciesAllDestroy(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesAllList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PoliciesApi.PoliciesAllList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesAllRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		resp, httpRes, err := apiClient.PoliciesApi.PoliciesAllRetrieve(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesAllTestCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		resp, httpRes, err := apiClient.PoliciesApi.PoliciesAllTestCreate(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesAllTypesList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PoliciesApi.PoliciesAllTypesList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesAllUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		resp, httpRes, err := apiClient.PoliciesApi.PoliciesAllUsedByList(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesBindingsCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PoliciesApi.PoliciesBindingsCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesBindingsDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyBindingUuid string

		httpRes, err := apiClient.PoliciesApi.PoliciesBindingsDestroy(context.Background(), policyBindingUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesBindingsList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PoliciesApi.PoliciesBindingsList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesBindingsPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyBindingUuid string

		resp, httpRes, err := apiClient.PoliciesApi.PoliciesBindingsPartialUpdate(context.Background(), policyBindingUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesBindingsRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyBindingUuid string

		resp, httpRes, err := apiClient.PoliciesApi.PoliciesBindingsRetrieve(context.Background(), policyBindingUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesBindingsUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyBindingUuid string

		resp, httpRes, err := apiClient.PoliciesApi.PoliciesBindingsUpdate(context.Background(), policyBindingUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesBindingsUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyBindingUuid string

		resp, httpRes, err := apiClient.PoliciesApi.PoliciesBindingsUsedByList(context.Background(), policyBindingUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesDummyCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PoliciesApi.PoliciesDummyCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesDummyDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		httpRes, err := apiClient.PoliciesApi.PoliciesDummyDestroy(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesDummyList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PoliciesApi.PoliciesDummyList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesDummyPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		resp, httpRes, err := apiClient.PoliciesApi.PoliciesDummyPartialUpdate(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesDummyRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		resp, httpRes, err := apiClient.PoliciesApi.PoliciesDummyRetrieve(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesDummyUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		resp, httpRes, err := apiClient.PoliciesApi.PoliciesDummyUpdate(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesDummyUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		resp, httpRes, err := apiClient.PoliciesApi.PoliciesDummyUsedByList(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesEventMatcherCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PoliciesApi.PoliciesEventMatcherCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesEventMatcherDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		httpRes, err := apiClient.PoliciesApi.PoliciesEventMatcherDestroy(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesEventMatcherList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PoliciesApi.PoliciesEventMatcherList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesEventMatcherPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		resp, httpRes, err := apiClient.PoliciesApi.PoliciesEventMatcherPartialUpdate(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesEventMatcherRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		resp, httpRes, err := apiClient.PoliciesApi.PoliciesEventMatcherRetrieve(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesEventMatcherUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		resp, httpRes, err := apiClient.PoliciesApi.PoliciesEventMatcherUpdate(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesEventMatcherUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		resp, httpRes, err := apiClient.PoliciesApi.PoliciesEventMatcherUsedByList(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesExpressionCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PoliciesApi.PoliciesExpressionCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesExpressionDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		httpRes, err := apiClient.PoliciesApi.PoliciesExpressionDestroy(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesExpressionList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PoliciesApi.PoliciesExpressionList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesExpressionPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		resp, httpRes, err := apiClient.PoliciesApi.PoliciesExpressionPartialUpdate(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesExpressionRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		resp, httpRes, err := apiClient.PoliciesApi.PoliciesExpressionRetrieve(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesExpressionUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		resp, httpRes, err := apiClient.PoliciesApi.PoliciesExpressionUpdate(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesExpressionUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		resp, httpRes, err := apiClient.PoliciesApi.PoliciesExpressionUsedByList(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesPasswordCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PoliciesApi.PoliciesPasswordCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesPasswordDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		httpRes, err := apiClient.PoliciesApi.PoliciesPasswordDestroy(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesPasswordExpiryCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PoliciesApi.PoliciesPasswordExpiryCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesPasswordExpiryDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		httpRes, err := apiClient.PoliciesApi.PoliciesPasswordExpiryDestroy(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesPasswordExpiryList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PoliciesApi.PoliciesPasswordExpiryList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesPasswordExpiryPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		resp, httpRes, err := apiClient.PoliciesApi.PoliciesPasswordExpiryPartialUpdate(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesPasswordExpiryRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		resp, httpRes, err := apiClient.PoliciesApi.PoliciesPasswordExpiryRetrieve(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesPasswordExpiryUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		resp, httpRes, err := apiClient.PoliciesApi.PoliciesPasswordExpiryUpdate(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesPasswordExpiryUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		resp, httpRes, err := apiClient.PoliciesApi.PoliciesPasswordExpiryUsedByList(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesPasswordList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PoliciesApi.PoliciesPasswordList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesPasswordPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		resp, httpRes, err := apiClient.PoliciesApi.PoliciesPasswordPartialUpdate(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesPasswordRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		resp, httpRes, err := apiClient.PoliciesApi.PoliciesPasswordRetrieve(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesPasswordUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		resp, httpRes, err := apiClient.PoliciesApi.PoliciesPasswordUpdate(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesPasswordUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		resp, httpRes, err := apiClient.PoliciesApi.PoliciesPasswordUsedByList(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesReputationCreate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PoliciesApi.PoliciesReputationCreate(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesReputationDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		httpRes, err := apiClient.PoliciesApi.PoliciesReputationDestroy(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesReputationList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PoliciesApi.PoliciesReputationList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesReputationPartialUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		resp, httpRes, err := apiClient.PoliciesApi.PoliciesReputationPartialUpdate(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesReputationRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		resp, httpRes, err := apiClient.PoliciesApi.PoliciesReputationRetrieve(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesReputationScoresDestroy", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reputationUuid string

		httpRes, err := apiClient.PoliciesApi.PoliciesReputationScoresDestroy(context.Background(), reputationUuid).Execute()

		require.Nil(t, err)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesReputationScoresList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		resp, httpRes, err := apiClient.PoliciesApi.PoliciesReputationScoresList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesReputationScoresRetrieve", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reputationUuid string

		resp, httpRes, err := apiClient.PoliciesApi.PoliciesReputationScoresRetrieve(context.Background(), reputationUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesReputationScoresUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var reputationUuid string

		resp, httpRes, err := apiClient.PoliciesApi.PoliciesReputationScoresUsedByList(context.Background(), reputationUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesReputationUpdate", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		resp, httpRes, err := apiClient.PoliciesApi.PoliciesReputationUpdate(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test PoliciesApiService PoliciesReputationUsedByList", func(t *testing.T) {

		t.Skip("skip test")  // remove to run test

		var policyUuid string

		resp, httpRes, err := apiClient.PoliciesApi.PoliciesReputationUsedByList(context.Background(), policyUuid).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
