/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { FlowSet } from './FlowSet';
import {
    FlowSetFromJSON,
    FlowSetFromJSONTyped,
    FlowSetToJSON,
} from './FlowSet';

/**
 * EmailStage Serializer
 * @export
 * @interface EmailStage
 */
export interface EmailStage {
    /**
     * 
     * @type {string}
     * @memberof EmailStage
     */
    readonly pk: string;
    /**
     * 
     * @type {string}
     * @memberof EmailStage
     */
    name: string;
    /**
     * Get object type so that we know how to edit the object
     * @type {string}
     * @memberof EmailStage
     */
    readonly component: string;
    /**
     * Return object's verbose_name
     * @type {string}
     * @memberof EmailStage
     */
    readonly verboseName: string;
    /**
     * Return object's plural verbose_name
     * @type {string}
     * @memberof EmailStage
     */
    readonly verboseNamePlural: string;
    /**
     * Return internal model name
     * @type {string}
     * @memberof EmailStage
     */
    readonly metaModelName: string;
    /**
     * 
     * @type {Array<FlowSet>}
     * @memberof EmailStage
     */
    flowSet?: Array<FlowSet>;
    /**
     * When enabled, global Email connection settings will be used and connection settings below will be ignored.
     * @type {boolean}
     * @memberof EmailStage
     */
    useGlobalSettings?: boolean;
    /**
     * 
     * @type {string}
     * @memberof EmailStage
     */
    host?: string;
    /**
     * 
     * @type {number}
     * @memberof EmailStage
     */
    port?: number;
    /**
     * 
     * @type {string}
     * @memberof EmailStage
     */
    username?: string;
    /**
     * 
     * @type {boolean}
     * @memberof EmailStage
     */
    useTls?: boolean;
    /**
     * 
     * @type {boolean}
     * @memberof EmailStage
     */
    useSsl?: boolean;
    /**
     * 
     * @type {number}
     * @memberof EmailStage
     */
    timeout?: number;
    /**
     * 
     * @type {string}
     * @memberof EmailStage
     */
    fromAddress?: string;
    /**
     * Time in minutes the token sent is valid.
     * @type {number}
     * @memberof EmailStage
     */
    tokenExpiry?: number;
    /**
     * 
     * @type {string}
     * @memberof EmailStage
     */
    subject?: string;
    /**
     * 
     * @type {string}
     * @memberof EmailStage
     */
    template?: string;
    /**
     * Activate users upon completion of stage.
     * @type {boolean}
     * @memberof EmailStage
     */
    activateUserOnSuccess?: boolean;
}

/**
 * Check if a given object implements the EmailStage interface.
 */
export function instanceOfEmailStage(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "pk" in value;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "component" in value;
    isInstance = isInstance && "verboseName" in value;
    isInstance = isInstance && "verboseNamePlural" in value;
    isInstance = isInstance && "metaModelName" in value;

    return isInstance;
}

export function EmailStageFromJSON(json: any): EmailStage {
    return EmailStageFromJSONTyped(json, false);
}

export function EmailStageFromJSONTyped(json: any, ignoreDiscriminator: boolean): EmailStage {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'pk': json['pk'],
        'name': json['name'],
        'component': json['component'],
        'verboseName': json['verbose_name'],
        'verboseNamePlural': json['verbose_name_plural'],
        'metaModelName': json['meta_model_name'],
        'flowSet': !exists(json, 'flow_set') ? undefined : ((json['flow_set'] as Array<any>).map(FlowSetFromJSON)),
        'useGlobalSettings': !exists(json, 'use_global_settings') ? undefined : json['use_global_settings'],
        'host': !exists(json, 'host') ? undefined : json['host'],
        'port': !exists(json, 'port') ? undefined : json['port'],
        'username': !exists(json, 'username') ? undefined : json['username'],
        'useTls': !exists(json, 'use_tls') ? undefined : json['use_tls'],
        'useSsl': !exists(json, 'use_ssl') ? undefined : json['use_ssl'],
        'timeout': !exists(json, 'timeout') ? undefined : json['timeout'],
        'fromAddress': !exists(json, 'from_address') ? undefined : json['from_address'],
        'tokenExpiry': !exists(json, 'token_expiry') ? undefined : json['token_expiry'],
        'subject': !exists(json, 'subject') ? undefined : json['subject'],
        'template': !exists(json, 'template') ? undefined : json['template'],
        'activateUserOnSuccess': !exists(json, 'activate_user_on_success') ? undefined : json['activate_user_on_success'],
    };
}

export function EmailStageToJSON(value?: EmailStage | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'flow_set': value.flowSet === undefined ? undefined : ((value.flowSet as Array<any>).map(FlowSetToJSON)),
        'use_global_settings': value.useGlobalSettings,
        'host': value.host,
        'port': value.port,
        'username': value.username,
        'use_tls': value.useTls,
        'use_ssl': value.useSsl,
        'timeout': value.timeout,
        'from_address': value.fromAddress,
        'token_expiry': value.tokenExpiry,
        'subject': value.subject,
        'template': value.template,
        'activate_user_on_success': value.activateUserOnSuccess,
    };
}

