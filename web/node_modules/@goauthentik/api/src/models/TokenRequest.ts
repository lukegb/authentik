/* tslint:disable */
/* eslint-disable */
/**
 * authentik
 * Making authentication simple.
 *
 * The version of the OpenAPI document: 2024.2.1
 * Contact: hello@goauthentik.io
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { IntentEnum } from './IntentEnum';
import {
    IntentEnumFromJSON,
    IntentEnumFromJSONTyped,
    IntentEnumToJSON,
} from './IntentEnum';

/**
 * Token Serializer
 * @export
 * @interface TokenRequest
 */
export interface TokenRequest {
    /**
     * Objects that are managed by authentik. These objects are created and updated automatically. This flag only indicates that an object can be overwritten by migrations. You can still modify the objects via the API, but expect changes to be overwritten in a later update.
     * @type {string}
     * @memberof TokenRequest
     */
    managed?: string | null;
    /**
     * 
     * @type {string}
     * @memberof TokenRequest
     */
    identifier: string;
    /**
     * 
     * @type {IntentEnum}
     * @memberof TokenRequest
     */
    intent?: IntentEnum;
    /**
     * 
     * @type {number}
     * @memberof TokenRequest
     */
    user?: number;
    /**
     * 
     * @type {string}
     * @memberof TokenRequest
     */
    description?: string;
    /**
     * 
     * @type {Date}
     * @memberof TokenRequest
     */
    expires?: Date;
    /**
     * 
     * @type {boolean}
     * @memberof TokenRequest
     */
    expiring?: boolean;
}

/**
 * Check if a given object implements the TokenRequest interface.
 */
export function instanceOfTokenRequest(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "identifier" in value;

    return isInstance;
}

export function TokenRequestFromJSON(json: any): TokenRequest {
    return TokenRequestFromJSONTyped(json, false);
}

export function TokenRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): TokenRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'managed': !exists(json, 'managed') ? undefined : json['managed'],
        'identifier': json['identifier'],
        'intent': !exists(json, 'intent') ? undefined : IntentEnumFromJSON(json['intent']),
        'user': !exists(json, 'user') ? undefined : json['user'],
        'description': !exists(json, 'description') ? undefined : json['description'],
        'expires': !exists(json, 'expires') ? undefined : (new Date(json['expires'])),
        'expiring': !exists(json, 'expiring') ? undefined : json['expiring'],
    };
}

export function TokenRequestToJSON(value?: TokenRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'managed': value.managed,
        'identifier': value.identifier,
        'intent': IntentEnumToJSON(value.intent),
        'user': value.user,
        'description': value.description,
        'expires': value.expires === undefined ? undefined : (value.expires.toISOString()),
        'expiring': value.expiring,
    };
}

